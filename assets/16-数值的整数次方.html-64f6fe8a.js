import{_ as t,W as o,X as c,a0 as n,a1 as s,Z as e,$ as p,C as l}from"./framework-afce0fe7.js";const u={},i=n("h1",{id:"剑指-offer-16-数值的整数次方",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#剑指-offer-16-数值的整数次方","aria-hidden":"true"},"#"),s(" 剑指 Offer 16. 数值的整数次方")],-1),r={href:"https://leetcode.cn/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/",target:"_blank",rel:"noopener noreferrer"},d=n("h2",{id:"题目描述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#题目描述","aria-hidden":"true"},"#"),s(" 题目描述")],-1),k={href:"https://www.cplusplus.com/reference/valarray/pow/",target:"_blank",rel:"noopener noreferrer"},x=n("em",null,"x",-1),v=n("em",null,"n",-1),m=p(`<p>示例 1：</p><p>输入：x = 2.00000, n = 10 输出：1024.00000</p><p>示例 2：</p><p>输入：x = 2.10000, n = 3 输出：9.26100</p><p>示例 3：</p><p>输入：x = 2.00000, n = -2 输出：0.25000 解释：2-2 = 1/22 = 1/4 = 0.25</p><h2 id="直接计算-math-pow" tabindex="-1"><a class="header-anchor" href="#直接计算-math-pow" aria-hidden="true">#</a> 直接计算：Math.pow</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>执行结果：通过</p><p>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户</p><p>内存消耗：40.7 MB, 在所有 Java 提交中击败了31.05% 的用户</p><p>通过测试用例：304 / 304</p></blockquote><h2 id="快速幂" tabindex="-1"><a class="header-anchor" href="#快速幂" aria-hidden="true">#</a> 快速幂</h2><blockquote><p>个人理解，我看这个结果跟直接使用<code>Math.pow</code>性能差不多，感觉解题人应该看了语言的底层实现逻辑。简单理解就是将n化为二进制，比如9就是1001，再进一步化简成2的次方，第一个是0就是1，最后一个1就是2的3次方就是8，合起来就是9</p></blockquote><p>比如要求x11x^{11}x11，正常的乘积需要循环乘11次，时间复杂度为O(n)</p><p>快速幂的思想就是将指数11 可以转成二进制数1011，则原来的式子可以转化成</p>`,13),b=n("p",null,[s("x11=x23+21+20=x23×x21×x20x^{11} = x"),n("sup",{3:""},"{2"),s(" + 2^{1} + 2^{0}} = x"),n("sup",null,"{2"),s("{3}} \\times x"),n("sup",null,"{2"),s("{1}} \\times x"),n("sup",null,"{2"),s("{0}}x11=x23+21+20=x23×x21×x20，此时只运算了3次乘积，时间复杂度降至O(logn)")],-1),h=p(`<p>下方代码中的x *= x是一个累乘的过程，得到四位二进制数，对应的四个权重，xxx，x∗=xx *= xx∗=x，x2 ∗=x2x^2 \\ *= x^2x2 ∗=x2，x4 ∗=x4x^4 \\ *= x^4x4 ∗=x4</p><p>1011二进制数，从右至左分别为1 1 0 1 ，只有在1的位置上，才有相应的权重，这也就是为什么需要通过与运算：(b &amp; 1) == 1判断最后一位是否为1。</p><p>x−−−&gt;x20x ---&gt; x<sup>{2</sup>{0}}x−−−&gt;x20 ---------&gt; 1</p><p>x2−−−&gt;x21x^2 ---&gt; x<sup>{2</sup>{1}}x2−−−&gt;x21 -------------&gt; 1</p><p>x4−−−&gt;x22x^4 ---&gt; x<sup>{2</sup>{2}}x4−−−&gt;x22 -----------------&gt; 0</p><p>x8−−−&gt;x23x^8 ---&gt; x<sup>{2</sup>{3}}x8−−−&gt;x23 -----------------------&gt; 1</p><p>最终的结果就是将每一位的1 所对应的权重相乘即可：x20×x21×x23x<sup>{2</sup>{0}} \\times x<sup>{2</sup>{1}} \\times x<sup>{2</sup>{3}}x20×x21×x23</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> b <span class="token operator">=</span> n<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            x <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> x<span class="token punctuation">;</span>
            b <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res <span class="token operator">*=</span> x<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            x <span class="token operator">*=</span> x<span class="token punctuation">;</span>
            b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户</p><p>内存消耗：40.7 MB, 在所有 Java 提交中击败了30.43% 的用户</p><p>通过测试用例：304 / 304</p></blockquote>`,9);function _(g,f){const a=l("ExternalLinkIcon");return o(),c("div",null,[i,n("p",null,[n("a",r,[s("https://leetcode.cn/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/"),e(a)])]),d,n("p",null,[s("实现 "),n("a",k,[s("pow("),x,s(", "),v,s(")"),e(a)]),s(" ，即计算 x 的 n 次幂函数（即，xn）。不得使用库函数，同时不需要考虑大数问题。")]),m,b,h])}const y=t(u,[["render",_],["__file","16-数值的整数次方.html.vue"]]);export{y as default};
