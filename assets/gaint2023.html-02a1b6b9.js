import{_ as l,W as i,X as c,a0 as n,a1 as s,Z as a,a2 as r,$ as t,C as o}from"./framework-c8643d23.js";const u="/Computer-Science-Learn-Notes/assets/n1ql-query-workflow-1bdb3bce.png",d="/Computer-Science-Learn-Notes/assets/n1ql-query-workflow-cover-idx-98e67a6c.png",k="/Computer-Science-Learn-Notes/assets/v2-8cec22d735be76cd4a140ac30513ca49_b-fad59dda.jpg",h={},m=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),g=t('<h2 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库" aria-hidden="true">#</a> 数据库</h2><h3 id="什么是覆盖索引-2023-快手" tabindex="-1"><a class="header-anchor" href="#什么是覆盖索引-2023-快手" aria-hidden="true">#</a> 什么是覆盖索引？（2023 快手）</h3><blockquote><p>这个其实在2022年的大厂面试中出现过，但是是以聚簇索引形式提问出现</p></blockquote><p><strong>覆盖索引是一种数据库查询优化机制</strong>。在覆盖索引中，索引本身包含了查询所需要的所有数据，因此在执行查询时，数据库系统可以只访问索引，而不需要再访问数据行。这样可以显著提高查询速度，因为访问索引通常比访问数据行要快。（在索引 B+Tree 的叶子节点上都能找得到的那些索引，从二级索引中查询得到记录，而不需要通过聚簇索引查询获得，可以避免回表的操作）</p><blockquote><p>覆盖索引与聚簇索引和非聚簇索引的主要区别在于数据的存储和访问方式：</p><ul><li>覆盖索引：它被称为“覆盖”，因为只需使用索引即可满足查询，而无需访问表数据本身。这可以使查询更快，因为它避免了访问表数据的需要，而是使用通常更小、更紧凑的索引数据</li><li>聚簇索引：在聚簇索引中，数据行实际上被存储在索引中，因此每个表只能有一个聚簇索引。索引的顺序与磁盘上行的物理顺序相同。聚簇索引可以快速查找指定的数据行，但如果你需要在同一表上执行许多不同的查询，那么可能会受到限制，因为每个表只能有一个聚簇索引。</li><li>非聚簇索引：非聚簇索引是一个单独的结构，与数据行分开存储。非聚簇索引包含索引键值和一个指向每个数据行实际位置的指针。在非聚簇索引中查找数据需要两个步骤：首先在索引中查找，然后使用索引中的指针访问数据行。因此，非聚簇索引的查询通常比聚簇索引要慢一些。</li></ul></blockquote><p>覆盖索引可以看作是非聚簇索引的一个特例，它不仅包含索引键值和数据行的指针，还包含查询所需的其他列的数据。所以，如果查询可以被一个覆盖索引满足，那么查询速度就会比一般的非聚簇索引要快，因为数据库系统不需要再访问数据行，所有需要的数据都在索引中。使用覆盖索引的好处就是，不需要查询出包含整行记录的所有信息，也就减少了大量的 I/O 操作。</p><p>使用覆盖索引的例子:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tbl_user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_name_age<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>\n\n<span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>tbl_user<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span> <span class="token operator">AND</span> <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里 (name, age) 组成了一个复合索引 idx_name_age,查询只需要name和age两列,所以这个查询可以使用覆盖索引,数据库只需要扫描索引,不需要访问表数据,所以查询效率高。</p><p>具体查询为：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>tbl_user<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span> <span class="token operator">AND</span> <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个查询只需要name和age两个字段,而idx_name_age索引中就包含这两个字段,所以这个查询可以使用覆盖索引。 覆盖索引的查询语句应该是:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> \n    idx_name_age<span class="token punctuation">.</span>name<span class="token punctuation">,</span> \n    idx_name_age<span class="token punctuation">.</span>age\n<span class="token keyword">FROM</span> tbl_user \n<span class="token keyword">WHERE</span> idx_name_age<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span> <span class="token operator">AND</span> idx_name_age<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们直接从idx_name_age索引中选取需要的字段,而不再访问表数据,所以这个查询使用了覆盖索引。 所以,一个查询要使用覆盖索引,需要满足两个条件:</p><ol><li>查询所需要的字段都存在于某个索引中</li><li>查询语句直接从该索引中选取字段,而不再访问表数据</li></ol><p>没使用覆盖索引的例子:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tbl_user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>address<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_name_age<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span><span class="token punctuation">)</span>  \n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>\n\n<span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>address<span class="token punctuation">`</span></span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>tbl_user<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span> <span class="token operator">AND</span> <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里虽然有(name, age)的索引,但是由于查询需要的address字段不在该索引中,所以这个查询无法使用覆盖索引,需要访问表数据获取address字段,查询效率较低。</p><p>图示： 在没有使用覆盖索引，数据库查询数据是这样： <img src="'+u+'" alt="" loading="lazy"></p><p>使用了覆盖索引避免了从数据服务中获取数据的额外步骤。这导致了相当大的性能改进。 <img src="'+d+'" alt="" loading="lazy"></p>',20),b=n("p",null,"参考文献：",-1),v={href:"https://stackoverflow.com/questions/62137/what-is-a-covered-index",target:"_blank",rel:"noopener noreferrer"},_={href:"https://xiaolincoding.com/mysql/index/index_interview.html#%E6%8C%89%E5%AD%97%E6%AE%B5%E4%B8%AA%E6%95%B0%E5%88%86%E7%B1%BB",target:"_blank",rel:"noopener noreferrer"},f={href:"https://stackoverflow.com/questions/609343/what-are-covering-indexes-and-covered-queries-in-sql-server",target:"_blank",rel:"noopener noreferrer"},w={href:"https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/covering-indexes.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.red-gate.com/simple-talk/databases/sql-server/learn/using-covering-indexes-to-improve-query-performance/",target:"_blank",rel:"noopener noreferrer"},C=t('<h2 id="♻️-jvm" tabindex="-1"><a class="header-anchor" href="#♻️-jvm" aria-hidden="true">#</a> ♻️ JVM</h2><h3 id="堆是如何管理内存的-2023-快手" tabindex="-1"><a class="header-anchor" href="#堆是如何管理内存的-2023-快手" aria-hidden="true">#</a> 堆是如何管理内存的（2023 快手）</h3><ol><li><strong>堆的划分</strong>：在JVM中，堆被划分为年轻代（Young Generation）和老年代（Old Generation）。年轻代又被划分为Eden区和两个Survivor区（S0和S1）。新创建的对象首先在Eden区创建，当Eden区满时，会触发Minor GC进行垃圾回收。存活的对象会被移动到Survivor区，当Survivor区也满时，对象会被移动到老年代。当老年代满了，会触发Major GC或者Full GC。</li><li><strong>垃圾回收</strong>：JVM通过垃圾回收机制自动回收不再使用的对象以释放内存。JVM的垃圾回收算法包括标记-清除、复制、标记-整理、分代收集等。</li><li><strong>内存分配</strong>：当创建新对象时，JVM会在堆中为其分配内存。JVM有一个指针叫做TLAB（Thread Local Allocation Buffer），用于在特定的线程中分配对象，这样可以避免线程之间的竞争。如果对象很大，可能直接在老年代分配。</li><li><strong>堆大小调整</strong>：JVM的堆大小可以动态调整，以适应程序的需求。可以通过启动参数设置最小堆大小（-Xms）和最大堆大小（-Xmx）。如果程序需要更多内存，堆可以扩展到最大堆大小；如果程序需要的内存减少，堆可以收缩到最小堆大小。</li></ol><h3 id="跨代引用问题怎么解决-2023-快手" tabindex="-1"><a class="header-anchor" href="#跨代引用问题怎么解决-2023-快手" aria-hidden="true">#</a> 跨代引用问题怎么解决（2023 快手）</h3><p><strong>跨代引用问题是指在JVM内存模型中，年轻代的对象引用老年代的对象，或者老年代的对象引用年轻代的对象</strong>。这在垃圾回收时可能会导致一些问题，因为垃圾回收通常会针对年轻代和老年代分别进行。</p><p>为了解决这个问题，JVM引入了一个叫做 <strong>&quot;卡表&quot;（Card Table）</strong> 的数据结构。卡表的主要作用是快速找到老年代中被年轻代对象引用的对象，从而在进行Minor GC时，减少全堆扫描的开销。</p><blockquote><p>卡表概览：卡表是Java虚拟机（JVM）中加速查找引用的一种辅助数据结构。表中每个条目对应于Java堆的一小部分，这里我称为小块。当老年代中的一个对象写入/更新对年轻代中的一个对象的引用时，这个操作会通过一种叫做写屏障的东西。当JVM看到这些写屏障时，它会更新卡片表中的相应条目。</p><ul><li>写屏障：垃圾收集器用来跟踪对象引用更改的一种机制。它是一段代码（JVM实现的），每当对象引用更新时就会运行。写屏障确保垃圾收集器可以跟踪堆中的所有引用，并确定哪些对象仍在使用，哪些没有。</li><li>当写入屏障发现语句<code>some_obj.field = other_obj;</code>将年轻指针存储在旧对象中时，它会这样做：<code>card_table[(&amp;old_obj - start_of_heap) &gt;&gt; K] = 1;</code></li><li>其中<code>&amp;old_obj</code>是现在有一个年轻代指针的对象的地址（它已经在寄存器中，因为它刚刚被确定引用旧对象）。 在次要GC期间，垃圾收集器查看卡表以确定要扫描哪些堆区域以查找年轻指针。 <ul><li>for i from 0 to (heap_size &gt;&gt; K):</li><li>if card_table[i]: scan heap[i &lt;&lt; K .. (i + 1) &lt;&lt; K] for young pointers <img src="'+k+'" alt="card-table" loading="lazy"></li></ul></li></ul></blockquote><p>卡表将老年代的内存分为多个小块（通常为512字节），每个小块对应卡表中的一项，当老年代中的某个小块内存<strong>被修改时</strong>（例如年轻代的对象引用了该小块中的某个对象），对应的卡表项就被标记为 <strong>&quot;脏（dirty）&quot;</strong> 。</p><p>在进行Minor GC（清理年轻代）时，JVM只需要检查标记为&quot;脏&quot;的卡表项对应的内存块，找出被年轻代对象引用的老年代对象，而无需扫描整个老年代。这样就大大提高了垃圾回收的效率。</p><p>至于<strong>老年代的对象引用年轻代的对象，这在JVM的分代回收策略中是不推荐的，因为会增加垃圾回收的复杂性</strong>。如果确实存在这种情况，一般需要在进行垃圾回收时，遍历老年代找到所有引用年轻代的对象，确保不会误删。</p>',10),x=n("p",null,"参考文献如下：",-1),y={href:"https://stackoverflow.com/questions/19154607/how-actually-card-table-and-writer-barrier-work",target:"_blank",rel:"noopener noreferrer"},E={href:"https://tschatzl.github.io/2022/02/15/card-table-card-size.html",target:"_blank",rel:"noopener noreferrer"},R={href:"https://www.mo4tech.com/jvm-card-table.html",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.cnblogs.com/hongdada/p/12016020.html",target:"_blank",rel:"noopener noreferrer"},L={href:"http://blog.ragozin.info/2011/06/understanding-gc-pauses-in-jvm-hotspots.html",target:"_blank",rel:"noopener noreferrer"},G=t('<h3 id="每次回收都要从gc-root开始吗-2023-快手" tabindex="-1"><a class="header-anchor" href="#每次回收都要从gc-root开始吗-2023-快手" aria-hidden="true">#</a> 每次回收都要从GC ROOT开始吗（2023 快手）</h3><p>是的，每次垃圾回收都会从GC Roots开始。GC Roots是垃圾回收算法开始工作的一组必要的&quot;根&quot;对象。</p><p>Java中可以作为GC Roots的对象包括：</p><ol><li>在虚拟机栈（栈帧中的本地变量表）中引用的对象。</li><li>方法区中类静态属性引用的对象。</li><li>方法区中常量引用的对象。</li><li>本地方法栈中JNI（即一般说的Native方法）引用的对象。</li></ol><p>垃圾回收器在对堆进行回收前，会先从GC Roots开始对堆中的对象进行可达性分析。只有当对象在GC Roots到该对象之间没有任何引用链可达时（换句话说，GC Roots到该对象不可达），这个对象才会被判定为可回收的垃圾对象。</p><p>这种通过GC Roots进行可达性分析的方式，保证了只有真正不再使用的对象会被回收，从而避免了错误地回收仍在使用的对象。</p><h3 id="垃圾回收过程如何判断每个阶段已经完成-可以进入下一个阶段-2023-快手" tabindex="-1"><a class="header-anchor" href="#垃圾回收过程如何判断每个阶段已经完成-可以进入下一个阶段-2023-快手" aria-hidden="true">#</a> 垃圾回收过程如何判断每个阶段已经完成，可以进入下一个阶段（2023 快手）</h3><p>像是垃圾回收器如CMS（并发标记清除）和G1（Garbage-First）在进行垃圾回收时，会通过一系列的阶段来判断何时可以进入下一步。</p><p>CMS垃圾回收器： CMS垃圾回收器主要包含以下四个阶段：</p><ol><li>初始标记（Initial Mark）：标记GC Roots能直接关联的对象，此阶段需要暂停所有的其他线程，但是时间通常较短。</li><li>并发标记（Concurrent Mark）：进行GC Roots Tracing的过程，也就是从GC Roots开始对堆中的对象进行可达性分析，此阶段可以与用户线程并发执行。</li><li>重新标记（Remark）：修正并发标记期间因用户程序继续运行而导致标记产生变动的那一部分标记记录，防止数据不一致，此阶段需要暂停所有的其他线程。</li><li>并发清除（Concurrent Sweep）：清除不再使用的对象，此阶段可以与用户线程并发执行。 CMS在每个阶段完成后会判断是否可以进入下一阶段。例如，在并发标记阶段，当所有从GC Roots开始可达的对象都被标记后，就可以进入重新标记阶段。</li></ol><p>G1垃圾回收器： G1垃圾回收器将堆内存划分为多个小块（Region），每个小块可能属于Eden区、Survivor区或者Old区。G1的垃圾回收过程包括以下几个阶段：</p><ol><li>初始标记（Initial Mark）：标记所有的GC Roots能直接关联的对象，此阶段需要暂停所有的其他线程。</li><li>并发标记（Concurrent Mark）：进行GC Roots Tracing的过程，此阶段可以与用户线程并发执行。</li><li>最终标记（Final Mark）：修正并发标记期间因用户程序继续运行而导致标记产生变动的那一部分标记记录，此阶段需要暂停所有的其他线程。</li><li>筛选回收（Cleanup）：首先统计各个Region的存活对象，并对Region进行排序，然后回收垃圾对象最多的Region。 类似地，G1在每个阶段完成后会判断是否可以进入下一阶段。例如，在并发标记阶段，当所有从GC Roots开始可达的对象都被标记后，就可以进入最终标记阶段。</li></ol><p>总的来说，垃圾回收器在每个阶段的结束条件主要取决于当前阶段的任务是否完成，例如是否所有的对象都已经被标记，或者是否所有的垃圾都已经被清除。</p><h2 id="💦算法汇总" tabindex="-1"><a class="header-anchor" href="#💦算法汇总" aria-hidden="true">#</a> 💦算法汇总</h2>',14),N={href:"https://leetcode.cn/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/",target:"_blank",rel:"noopener noreferrer"};function T(J,S){const p=o("RouterLink"),e=o("ExternalLinkIcon");return i(),c("div",null,[m,n("p",null,[s("2022有的大厂面试题不会在2023再次出现（也有可能会因为粗心加上，欢迎issue或者PR指正和修改），如果想要了解可以先看"),a(p,{to:"/Java/eightpart/giant.html"},{default:r(()=>[s("2022大厂面试")]),_:1}),s("版本")]),g,n("blockquote",null,[b,n("ul",null,[n("li",null,[n("a",v,[s("https://stackoverflow.com/questions/62137/what-is-a-covered-index"),a(e)]),s(" 什么是覆盖索引？")]),n("li",null,[n("a",_,[s("https://xiaolincoding.com/mysql/index/index_interview.html#按字段个数分类"),a(e)]),s(" 覆盖索引优化-小林coding")]),n("li",null,[n("a",f,[s("https://stackoverflow.com/questions/609343/what-are-covering-indexes-and-covered-queries-in-sql-server"),a(e)]),s(" 在SQL Server中什么是覆盖索引和覆盖查询？")]),n("li",null,[n("a",w,[s("https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/covering-indexes.html"),a(e)]),s(" Covering Indexes")]),n("li",null,[n("a",q,[s("https://www.red-gate.com/simple-talk/databases/sql-server/learn/using-covering-indexes-to-improve-query-performance/"),a(e)]),s(" 使用覆盖索引以提高查询性能")])])]),C,n("blockquote",null,[x,n("ul",null,[n("li",null,[n("a",y,[s("https://stackoverflow.com/questions/19154607/how-actually-card-table-and-writer-barrier-work"),a(e)]),s(" 卡表和写屏障是如何工作的？")]),n("li",null,[n("a",E,[s("https://tschatzl.github.io/2022/02/15/card-table-card-size.html"),a(e)]),s(" Card Table Card Size Shenanigans")]),n("li",null,[n("a",R,[s("https://www.mo4tech.com/jvm-card-table.html"),a(e)]),s(" JVM Card Table")]),n("li",null,[n("a",M,[s("https://www.cnblogs.com/hongdada/p/12016020.html"),a(e)]),s(" JVM-卡表（Card Table）")]),n("li",null,[n("a",L,[s("http://blog.ragozin.info/2011/06/understanding-gc-pauses-in-jvm-hotspots.html"),a(e)]),s(" Alexey Ragozin")])])]),G,n("ol",null,[n("li",null,[n("a",N,[s("二叉树的公共祖先（2023 快手）"),a(e)])])])])}const A=l(h,[["render",T],["__file","gaint2023.html.vue"]]);export{A as default};
