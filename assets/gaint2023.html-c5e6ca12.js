import{_ as l}from"./v2-8cec22d735be76cd4a140ac30513ca49_b-96a3f059.js";import{_ as p,W as r,X as c,a0 as n,a1 as a,Z as s,a2 as d,$ as t,C as o}from"./framework-c8643d23.js";const u="/Computer-Science-Learn-Notes/assets/641-578d5863.png",k="/Computer-Science-Learn-Notes/assets/n1ql-query-workflow-1bdb3bce.png",h="/Computer-Science-Learn-Notes/assets/n1ql-query-workflow-cover-idx-98e67a6c.png",g="/Computer-Science-Learn-Notes/assets/640-cd2471c0.png",m={},v=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),a(" 前言")],-1),b=t(`<h2 id="🐦java-基础" tabindex="-1"><a class="header-anchor" href="#🐦java-基础" aria-hidden="true">#</a> 🐦Java 基础</h2><h3 id="arraylist线程安全吗-把arraylist变成线程安全有哪些方法-2023美团" tabindex="-1"><a class="header-anchor" href="#arraylist线程安全吗-把arraylist变成线程安全有哪些方法-2023美团" aria-hidden="true">#</a> ArrayList线程安全吗？把ArrayList变成线程安全有哪些方法？（2023美团）</h3><p>将ArrayList变成线程安全有几种方法：</p><ol><li>使用<strong>Collections.synchronizedList()</strong> 方法将ArrayList转换为线程安全的List。该方法会返回一个线程安全的List，使用该List时需要在访问它的方法上添加synchronized关键字，以保证多线程访问的安全性。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> synchronizedList <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用<strong>CopyOnWriteArrayList</strong>类来代替ArrayList。CopyOnWriteArrayList是一种线程安全的List实现，它通过在写操作时复制整个数组来保证线程安全性，在读操作时不需要加锁，因此可以提高读取效率。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CopyOnWriteArrayList</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>使用Lock接口来实现同步。可以使用ReentrantLock类来实现对ArrayList的同步操作，该类提供了与synchronized类似的功能，但是具有更高的灵活性。比如可以使用tryLock()方法来尝试获取锁，避免了线程的长时间等待。</li><li>使用读写锁来实现同步。可以使用ReentrantReadWriteLock类来实现对ArrayList的读写操作的同步。该类提供了读锁和写锁两种锁，多个线程可以同时获取读锁，但是只有一个线程可以获取写锁，在写操作时需要先获取写锁，以保证线程安全。</li></ol>`,8),y=n("p",null,"参考文献：",-1),f={href:"https://stackoverflow.com/questions/2444005/how-do-i-make-my-arraylist-thread-safe-another-approach-to-problem-in-java",target:"_blank",rel:"noopener noreferrer"},_={href:"https://stackoverflow.com/questions/18983362/how-to-prove-arraylist-is-not-thread-safe-with-a-test",target:"_blank",rel:"noopener noreferrer"},w={href:"https://stackoverflow.com/questions/300519/arraylist-vs-vectors-in-java-if-thread-safety-isnt-a-concern",target:"_blank",rel:"noopener noreferrer"},C=t('<h3 id="面向过程的方法存在哪些问题-2023美团" tabindex="-1"><a class="header-anchor" href="#面向过程的方法存在哪些问题-2023美团" aria-hidden="true">#</a> 面向过程的方法存在哪些问题？（2023美团）</h3><ol><li>可维护性较差：面向过程编程主要依赖于函数和过程，随着代码规模的增大，可能会导致代码结构复杂，不易维护。</li><li>可复用性较低：面向过程编程难以实现模块化，导致代码难以复用，进一步增加开发时间和成本。</li><li>扩展性不足：面向过程编程在代码逻辑发生变化时，往往需要对程序进行大量的修改，这样的代码扩展性不足。</li><li>抽象能力有限：面向过程编程主要关注过程和算法，而不是数据结构和对象，这使得它在表达现实世界的复杂问题时抽象能力有限。</li><li>封装性差：面向过程编程没有提供良好的封装机制，程序中的数据和处理过程容易暴露，可能导致数据安全性和程序稳定性问题。</li><li>强耦合：面向过程编程的方法往往导致程序组件之间存在强耦合，当一个组件发生变化时，可能会影响其他组件的正常工作。</li></ol><h3 id="面向过程好处是什么-2023美团" tabindex="-1"><a class="header-anchor" href="#面向过程好处是什么-2023美团" aria-hidden="true">#</a> 面向过程好处是什么？（2023美团）</h3><ul><li>面向过程编程采用自顶向下的编程方式，将问题分解为一个个小的模块，便于理解和编写。</li><li>每个模块相对独立，出现问题时可以单独调试，降低了调试难度。</li><li>面向过程编程适合解决简单、逻辑性强的问题，对于初学者来说，学习成本较低。</li></ul><h2 id="🕝-并发编程" tabindex="-1"><a class="header-anchor" href="#🕝-并发编程" aria-hidden="true">#</a> 🕝 并发编程</h2><h3 id="使用多线程要注意哪些问题-2023美团" tabindex="-1"><a class="header-anchor" href="#使用多线程要注意哪些问题-2023美团" aria-hidden="true">#</a> 使用多线程要注意哪些问题？（2023美团）</h3><p>使用多线程时需要注意以下问题：</p><ol><li><strong>线程安全</strong>：当多个线程同时访问某一数据时，如果不进行正确的同步控制，可能会导致数据的不一致。需要通过使用synchronized，Lock，volatile等机制来保证线程安全。</li><li><strong>死锁</strong>：死锁是指两个或两个以上的线程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力干涉那他们都将无法推进下去。我们应避免在代码中产生死锁。</li><li><strong>活锁</strong>：活锁指的是线程虽然没有被阻塞，但是由于某种条件没有被满足，始终无法向前执行，就像在原地踏步。</li><li><strong>饥饿</strong>：由于线程的优先级设置不合理或者锁机制不公平，导致某些线程始终无法获取到CPU资源或者锁资源，从而无法进行工作。</li><li><strong>资源消耗</strong>：每个线程都会占用一定的内存资源，过多的线程可能会导致系统资源消耗过大。同时，线程上下文切换也会消耗CPU资源，过多的线程也可能会导致CPU负载过大。</li><li><strong>数据共享和可见性</strong>：多线程之间共享数据，需要保证一个线程对数据的修改对其他线程可见，可以使用volatile或者Atomic类来保证。</li><li><strong>线程的生命周期管理</strong>：需要合理的创建、启动、暂停、恢复、终止线程，不合理的管理可能会导致程序错误或者资源泄漏。</li><li><strong>线程异常处理</strong>：线程中的未捕获异常会导致线程终止，而且这个异常不能被外部捕获。需要为线程设置UncaughtExceptionHandler来处理未捕获的异常。</li></ol><h3 id="保证数据的一致性有哪些方案呢-2023美团" tabindex="-1"><a class="header-anchor" href="#保证数据的一致性有哪些方案呢-2023美团" aria-hidden="true">#</a> 保证数据的一致性有哪些方案呢？（2023美团）</h3><p>在Java中，有多种方式可以保证数据的一致性：</p><ol><li><strong>同步语句块(Synchronized Blocks)</strong>：在Java中，你可以使用synchronized关键字对一个对象或者方法进行锁定，来保证在一个时刻只有一个线程可以访问该对象或者方法，从而避免数据的不一致。</li><li><strong>Volatile关键字</strong>：volatile关键字可以保证变量的可见性。当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去主存中读取新值。</li><li><strong>原子类（Atomic Classes）</strong>：Java提供了一组原子类（如AtomicInteger、AtomicLong等），它们使用了高效的机器级指令来保证原子性操作，从而避免了复杂的同步。</li><li><strong>Lock接口和相关类</strong>：Java并发库提供了显式的锁机制，包括ReentrantLock、ReadWriteLock等，可以提供比synchronized更灵活的锁定机制。</li><li><strong>并发集合（Concurrent Collections）</strong>：Java提供了一组并发集合类（如ConcurrentHashMap、CopyOnWriteArrayList等），它们内部已经实现了并发控制，可以在并发环境中安全使用。</li><li><strong>事务（Transactions）</strong>：在数据库和某些支持事务的系统中，可以通过事务来保证数据的一致性。Java中的JPA和Spring等框架提供了对事务的支持。</li></ol><p>以上就是在Java中保证数据一致性的一些常用方案，选择哪种方案取决于具体的应用场景和需求。</p><h2 id="🍃-常用框架" tabindex="-1"><a class="header-anchor" href="#🍃-常用框架" aria-hidden="true">#</a> 🍃 常用框架</h2><h3 id="mybatis运用了哪些常见的设计模式-2023美团" tabindex="-1"><a class="header-anchor" href="#mybatis运用了哪些常见的设计模式-2023美团" aria-hidden="true">#</a> MyBatis运用了哪些常见的设计模式？（2023美团）</h3><ul><li><strong>工厂模式</strong>，工厂模式在 MyBatis 中的典型代表是 SqlSessionFactory</li><li><strong>建造者模式</strong>，建造者模式在 MyBatis 中的典型代表是 SqlSessionFactoryBuilder</li><li><strong>单例模式</strong>，单例模式在 MyBatis 中的典型代表是 ErrorContext</li><li><strong>适配器模式</strong>，适配器模式在 MyBatis 中的典型代表是 Log</li><li><strong>代理模式</strong>，代理模式在 MyBatis 中的典型代表是 MapperProxyFactory</li><li><strong>模板方法模式</strong>，模板方法在 MyBatis 中的典型代表是 BaseExecutor</li><li><strong>装饰器模式</strong>，装饰器模式在 MyBatis 中的典型代表是 Cache</li><li><strong>迭代器模式</strong>，如迭代器模式Properties tyTokenizer；</li><li><strong>组合模式</strong>，如SqlNode和每个子类ChooseSqlNode；</li></ul>',15),S=n("p",null,"参考文献：",-1),x={href:"https://programming.vip/docs/6200e8e7b682c.html",target:"_blank",rel:"noopener noreferrer"},L={href:"https://programming.vip/docs/mybatis-design-pattern.html",target:"_blank",rel:"noopener noreferrer"},M=t('<h3 id="mybatis中创建了一个mapper接口-在写一个xml文件-java的接口是要实现的-为什么这没有实现呢-2023美团" tabindex="-1"><a class="header-anchor" href="#mybatis中创建了一个mapper接口-在写一个xml文件-java的接口是要实现的-为什么这没有实现呢-2023美团" aria-hidden="true">#</a> MyBatis中创建了一个Mapper接口，在写一个xml文件，java的接口是要实现的，为什么这没有实现呢？（2023美团）</h3><p>MyBatis中的Mapper接口并不需要实现，它只是定义了一组方法签名。MyBatis会根据Mapper接口中的方法名、参数类型和返回值类型，自动生成实现方法。因此，Mapper接口中的方法不需要实现，也不需要在该接口中编写任何方法体。</p><p>相反，你需要编写一个与Mapper接口同名的XML文件，来实现这些方法的具体SQL操作。这样，当你在Java代码中调用Mapper接口中的方法时，MyBatis会自动将该方法映射到对应的XML文件中的SQL语句，并执行该语句。</p><h3 id="与传统的jdbc相比-mybatis的优点-2023美团" tabindex="-1"><a class="header-anchor" href="#与传统的jdbc相比-mybatis的优点-2023美团" aria-hidden="true">#</a> 与传统的JDBC相比，MyBatis的优点？（2023美团）</h3><ul><li>mybatis的全局配置文件中可以设置数据库连接池，和spring整合可以配置数据库连接</li><li>mybatis把sql和代码分离，提供了Mapper.xml映射文件，在映射文件中通过标签来写sql</li><li>mybatis中自动完成java对象和sql中参数的映射</li><li>mybatis中通过ResultSetHandler自动将结果集映射到对应的java对象中</li></ul><h3 id="jdbc连接数据库的步骤吗-2023美团" tabindex="-1"><a class="header-anchor" href="#jdbc连接数据库的步骤吗-2023美团" aria-hidden="true">#</a> JDBC连接数据库的步骤吗？（2023美团）</h3>',6),q=n("ol",null,[n("li",null,'加载数据库驱动程序：使用Class.forName()方法加载对应的数据库驱动程序，例如：Class.forName("com.mysql.jdbc.Driver");'),n("li",null,'建立数据库连接：使用DriverManager.getConnection()方法建立与数据库的连接，需要指定数据库的URL、用户名和密码，例如：Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/mydatabase", "username", "password");'),n("li",null,"创建Statement对象：使用Connection对象的createStatement()方法创建一个Statement对象，用于执行SQL语句，例如：Statement stmt = conn.createStatement();"),n("li",null,'执行SQL语句：使用Statement对象的executeQuery()或executeUpdate()方法执行SQL语句，例如：ResultSet rs = stmt.executeQuery("SELECT * FROM mytable");'),n("li",{String:"",name:"",class:'rsgetString("name"); rsgetInt("age");',int:"",age:""},"处理查询结果：如果执行的是查询语句，需要使用ResultSet对象来处理查询结果，例如：while (rs.next())"),n("li",null,"关闭数据库连接：在程序结束时，需要使用Connection对象的close()方法关闭数据库连接，例如：conn.close();")],-1),A=t('<h3 id="怎么理解springioc-2023美团" tabindex="-1"><a class="header-anchor" href="#怎么理解springioc-2023美团" aria-hidden="true">#</a> 怎么理解SpringIoc？（2023美团）</h3><p><strong>IoC（Inversion of Control）是“控制反转”</strong> 的缩写，是一种设计思想，也是Spring框架的核心。IoC是将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好IoC呢？可以从以下几点来看：</p><ol><li><strong>控制反转</strong>：传统的程序是由我们自己在对象内部通过new进行创建对象，是由程序控制对象的创建。在Spring框架中，对象的创建是由Spring容器来进行的，它负责控制对象的生命周期。所谓“控制反转”就是把传统的有我们自己控制的对象创建过程交给Spring框架来做。</li><li><strong>依赖注入</strong>：IoC的一个重要的具体实现方法是DI（Dependency Injection），也叫作依赖注入。在我们设计好的对象中会有一些其他对象的引用（即依赖），如果没有Spring容器，我们需要使用很多复杂的方法来管理这些依赖。而有了Spring容器，我们只需要告诉Spring这些依赖即可，Spring会自动把这些依赖注入到对象中。</li><li><strong>容器</strong>：在Spring的IoC下，Spring容器是一个非常重要的角色，它包含并管理了应用中定义的各种组件，负责实例化、配置、装配对象，管理对象的整个生命周期。</li><li><strong>减轻耦合</strong>：通过IoC，对象间的耦合度可以降低，对象只需要关注自身的业务逻辑，而不需要关心其他对象是如何创建和管理的，大大增强了代码的可维护性和可测试性。</li><li><strong>提供配置</strong>：Spring容器可以使用XML、Java注解、Java代码等多种方式来进行配置，提供了非常大的灵活性。</li></ol><h3 id="如果让你设计一个springioc-你觉得会从哪些方面考虑这个设计-2023美团" tabindex="-1"><a class="header-anchor" href="#如果让你设计一个springioc-你觉得会从哪些方面考虑这个设计-2023美团" aria-hidden="true">#</a> 如果让你设计一个SpringIoc，你觉得会从哪些方面考虑这个设计？（2023美团）</h3><ul><li>Bean的生命周期管理：需要设计Bean的创建、初始化、销毁等生命周期管理机制，可以考虑使用工厂模式和单例模式来实现。</li><li>依赖注入：需要实现依赖注入的功能，包括属性注入、构造函数注入、方法注入等，可以考虑使用反射机制和XML配置文件来实现。</li><li>Bean的作用域：需要支持多种Bean作用域，比如单例、原型、会话、请求等，可以考虑使用Map来存储不同作用域的Bean实例。</li><li>AOP功能的支持：需要支持AOP功能，可以考虑使用动态代理机制和切面编程来实现。</li><li>异常处理：需要考虑异常处理机制，包括Bean创建异常、依赖注入异常等，可以考虑使用try-catch机制来处理异常。</li><li>配置文件加载：需要支持从不同的配置文件中加载Bean的相关信息，可以考虑使用XML、注解或者Java配置类来实现。</li></ul><h3 id="spring给我们提供了很多扩展点-这些有了解吗-2023美团" tabindex="-1"><a class="header-anchor" href="#spring给我们提供了很多扩展点-这些有了解吗-2023美团" aria-hidden="true">#</a> Spring给我们提供了很多扩展点，这些有了解吗？（2023美团）</h3><ol><li>BeanFactoryPostProcessor：允许在Spring容器实例化bean之前修改bean的定义。常用于修改bean属性或改变bean的作用域。</li><li>BeanPostProcessor：可以在bean实例化、配置以及初始化之后对其进行额外处理。常用于代理bean、修改bean属性等。</li><li>PropertySource：用于定义不同的属性源，如文件、数据库等，以便在Spring应用中使用。</li><li>ImportSelector和ImportBeanDefinitionRegistrar：用于根据条件动态注册bean定义，实现配置类的模块化。</li><li>Spring MVC中的HandlerInterceptor：用于拦截处理请求，可以在请求处理前、处理中和处理后执行特定逻辑。</li><li>Spring MVC中的ControllerAdvice：用于全局处理控制器的异常、数据绑定和数据校验。</li><li>Spring Boot的自动配置：通过创建自定义的自动配置类，可以实现对框架和第三方库的自动配置。</li><li>自定义注解：创建自定义注解，用于实现特定功能或约定，如权限控制、日志记录等。</li></ol><h3 id="大致了解springmvc的处理流程吗-2023美团" tabindex="-1"><a class="header-anchor" href="#大致了解springmvc的处理流程吗-2023美团" aria-hidden="true">#</a> 大致了解SpringMVC的处理流程吗？（2023美团）</h3><ol><li><strong>接收请求</strong>：用户发送请求至前端控制器DispatcherServlet。</li><li><strong>查找处理器映射</strong>：DispatcherServlet收到请求后，调用HandlerMapping处理器映射器。</li><li><strong>处理器映射返回处理器执行链</strong>：HandlerMapping根据请求的URL找到对应的Controller并返回一个HandlerExecutionChain对象（包含一个Handler处理器（页面控制器）对象，多个HandlerInterceptor拦截器对象）。</li><li><strong>调用处理器适配器</strong>：DispatcherServlet通过HandlerAdapter进行多类型的页面控制器的适配，调用对应的Controller（处理器）。</li><li><strong>Controller执行业务逻辑</strong>：Controller开始执行页面控制器的处理方法，并返回一个ModelAndView对象（模型和视图）。</li><li><strong>视图解析</strong>：DispatcherServlet通过视图解析器进行解析（根据逻辑视图名解析成实际视图/页面），并将ModelAndView对象中的模型数据填充到request域对象中。</li><li><strong>返回视图</strong>：DispatcherServlet把返回的视图对象返回给用户。</li></ol><h3 id="springaop主要想解决什么问题-2023美团" tabindex="-1"><a class="header-anchor" href="#springaop主要想解决什么问题-2023美团" aria-hidden="true">#</a> SpringAOP主要想解决什么问题（2023美团）</h3><p>Spring AOP主要解决的是横切关注点的问题，即在一个系统中，可能存在多个模块或组件都需要实现类似的功能，比如日志记录、权限校验、事务管理等等。如果每个模块都去实现这些功能，就会导致代码冗余，可维护性和可扩展性降低。而AOP则是基于动态代理的机制，在不修改原有代码的情况下，通过在代码执行前后插入增强代码的方式，实现对横切关注点的统一处理，从而提高代码的复用性和可维护性。</p><h3 id="springaop的原理了解吗-2023美团" tabindex="-1"><a class="header-anchor" href="#springaop的原理了解吗-2023美团" aria-hidden="true">#</a> SpringAOP的原理了解吗（2023美团）</h3><p>Spring AOP的主要目的是将横切关注点（如日志、安全和事务管理等）从业务逻辑中分离出来，从而提高代码的模块性和可维护性。</p><p>原理主要包括以下几个方面：</p><ol><li>代理模式：Spring AOP基于代理模式实现，主要有两种代理方式，JDK动态代理和CGLIB代理。JDK动态代理要求目标类必须实现接口，而CGLIB代理则可以针对没有实现接口的类进行代理。</li><li>切面（Aspect）：切面是将横切关注点模块化的实现。切面通常包含通知（Advice）和切点（Pointcut）。通知是在特定的切点执行的动作，切点则用于定义通知应该在何处执行。</li><li>连接点（Joinpoint）：连接点代表在应用程序中可以插入切面的点，如方法调用、异常处理等。</li><li>织入（Weaving）：织入是将切面应用到目标对象的过程，从而创建代理对象。在Spring AOP中，织入过程发生在运行时。</li></ol><p>通过以上原理，Spring AOP能够在不修改原有业务代码的情况下，将横切关注点进行模块化管理，提高代码的可读性和易维护性。</p><h2 id="📑-数据库" tabindex="-1"><a class="header-anchor" href="#📑-数据库" aria-hidden="true">#</a> 📑 数据库</h2><h3 id="可重复读和已提交读隔离级别表现的现象是什么-区别是什么样的-2023美团" tabindex="-1"><a class="header-anchor" href="#可重复读和已提交读隔离级别表现的现象是什么-区别是什么样的-2023美团" aria-hidden="true">#</a> 可重复读和已提交读隔离级别表现的现象是什么，区别是什么样的？（2023美团）</h3><ul><li>读提交，指一个事务提交之后，它做的变更才能被其他事务看到，会有不可重复读、幻读的问题。</li><li>可重复读，指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，MySQL InnoDB 引擎的默认隔离级别，解决了不可重复读的问题，并且以很大程度上避免幻读现象的发生。</li></ul><h3 id="数据文件大体分成哪几种数据文件-2023美团" tabindex="-1"><a class="header-anchor" href="#数据文件大体分成哪几种数据文件-2023美团" aria-hidden="true">#</a> 数据文件大体分成哪几种数据文件？（2023美团）</h3><p>我们每创建一个 database（数据库） 都会在 /var/lib/mysql/ 目录里面创建一个以 database 为名的目录，然后保存表结构和表数据的文件都会存放在这个目录里。</p><p>比如，我这里有一个名为 my_test 的 database，该 database 里有一张名为 t_order 数据库表。 <img src="'+u+'" alt="" loading="lazy"> 然后，我们进入 /var/lib/mysql/my_test 目录，看看里面有什么文件？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span>root <span class="token operator">~</span><span class="token punctuation">]</span>#ls <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>mysql<span class="token operator">/</span>my_test\ndb<span class="token punctuation">.</span>opt  \nt_order<span class="token punctuation">.</span>frm  \nt_order<span class="token punctuation">.</span>ibd\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，共有三个文件，这三个文件分别代表着：</p><ul><li>db.opt，用来存储当前数据库的默认字符集和字符校验规则。</li><li>t_order.frm ，t_order 的表结构会保存在这个文件。在 MySQL 中建立一张表都会生成一个.frm 文件，该文件是用来保存每个表的元数据信息的，主要包含表结构定义。</li><li>t_order.ibd，t_order 的表数据会保存在这个文件。表数据既可以存在共享表空间文件（文件名：ibdata1）里，也可以存放在独占表空间文件（文件名：表名字.ibd）。这个行为是由参数 innodb_file_per_table 控制的，若设置了参数 innodb_file_per_table 为 1，则会将存储的数据、索引等信息单独存储在一个独占表空间，从 MySQL 5.6.6 版本开始，它的默认值就是 1 了，因此从这个版本之后， MySQL 中每一张表的数据都存放在一个独立的 .ibd 文件。</li></ul><h3 id="对一个慢sql怎么去排查-2023美团" tabindex="-1"><a class="header-anchor" href="#对一个慢sql怎么去排查-2023美团" aria-hidden="true">#</a> 对一个慢sql怎么去排查？（2023美团）</h3><p>可通过开启mysql的慢日志查询，设置好时间阈值，进行捕获</p><h3 id="索引字段是不是建的越多越好-2023美团" tabindex="-1"><a class="header-anchor" href="#索引字段是不是建的越多越好-2023美团" aria-hidden="true">#</a> 索引字段是不是建的越多越好（2023美团）</h3><p>索引越多，在写入频繁的场景下，对于B+树的维护所付出的性能消耗也会越大</p><h3 id="什么是覆盖索引-2023-快手" tabindex="-1"><a class="header-anchor" href="#什么是覆盖索引-2023-快手" aria-hidden="true">#</a> 什么是覆盖索引？（2023 快手）</h3><blockquote><p>这个其实在2022年的大厂面试中出现过，但是是以聚簇索引形式提问出现</p></blockquote><p><strong>覆盖索引是一种数据库查询优化机制</strong>。在覆盖索引中，索引本身包含了查询所需要的所有数据，因此在执行查询时，数据库系统可以只访问索引，而不需要再访问数据行。这样可以显著提高查询速度，因为访问索引通常比访问数据行要快。（在索引 B+Tree 的叶子节点上都能找得到的那些索引，从二级索引中查询得到记录，而不需要通过聚簇索引查询获得，可以避免回表的操作）</p><blockquote><p>覆盖索引与聚簇索引和非聚簇索引的主要区别在于数据的存储和访问方式：</p><ul><li>覆盖索引：它被称为“覆盖”，因为只需使用索引即可满足查询，而无需访问表数据本身。这可以使查询更快，因为它避免了访问表数据的需要，而是使用通常更小、更紧凑的索引数据</li><li>聚簇索引：在聚簇索引中，数据行实际上被存储在索引中，因此每个表只能有一个聚簇索引。索引的顺序与磁盘上行的物理顺序相同。聚簇索引可以快速查找指定的数据行，但如果你需要在同一表上执行许多不同的查询，那么可能会受到限制，因为每个表只能有一个聚簇索引。</li><li>非聚簇索引：非聚簇索引是一个单独的结构，与数据行分开存储。非聚簇索引包含索引键值和一个指向每个数据行实际位置的指针。在非聚簇索引中查找数据需要两个步骤：首先在索引中查找，然后使用索引中的指针访问数据行。因此，非聚簇索引的查询通常比聚簇索引要慢一些。</li></ul></blockquote><p>覆盖索引可以看作是非聚簇索引的一个特例，它不仅包含索引键值和数据行的指针，还包含查询所需的其他列的数据。所以，如果查询可以被一个覆盖索引满足，那么查询速度就会比一般的非聚簇索引要快，因为数据库系统不需要再访问数据行，所有需要的数据都在索引中。使用覆盖索引的好处就是，不需要查询出包含整行记录的所有信息，也就减少了大量的 I/O 操作。</p><p>使用覆盖索引的例子:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tbl_user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_name_age<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>\n\n<span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>tbl_user<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span> <span class="token operator">AND</span> <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里 (name, age) 组成了一个复合索引 idx_name_age,查询只需要name和age两列,所以这个查询可以使用覆盖索引,数据库只需要扫描索引,不需要访问表数据,所以查询效率高。</p><p>具体查询为：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>tbl_user<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span> <span class="token operator">AND</span> <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个查询只需要name和age两个字段,而idx_name_age索引中就包含这两个字段,所以这个查询可以使用覆盖索引。 覆盖索引的查询语句应该是:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> \n    idx_name_age<span class="token punctuation">.</span>name<span class="token punctuation">,</span> \n    idx_name_age<span class="token punctuation">.</span>age\n<span class="token keyword">FROM</span> tbl_user \n<span class="token keyword">WHERE</span> idx_name_age<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span> <span class="token operator">AND</span> idx_name_age<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们直接从idx_name_age索引中选取需要的字段,而不再访问表数据,所以这个查询使用了覆盖索引。 所以,一个查询要使用覆盖索引,需要满足两个条件:</p><ol><li>查询所需要的字段都存在于某个索引中</li><li>查询语句直接从该索引中选取字段,而不再访问表数据</li></ol><p>没使用覆盖索引的例子:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tbl_user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>address<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_name_age<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span><span class="token punctuation">)</span>  \n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>\n\n<span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>address<span class="token punctuation">`</span></span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>tbl_user<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span> <span class="token operator">AND</span> <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里虽然有(name, age)的索引,但是由于查询需要的address字段不在该索引中,所以这个查询无法使用覆盖索引,需要访问表数据获取address字段,查询效率较低。</p><p>图示： 在没有使用覆盖索引，数据库查询数据是这样： <img src="'+k+'" alt="" loading="lazy"></p><p>使用了覆盖索引避免了从数据服务中获取数据的额外步骤。这导致了相当大的性能改进。 <img src="'+h+'" alt="" loading="lazy"></p>',48),E=n("p",null,"参考文献：",-1),B={href:"https://stackoverflow.com/questions/62137/what-is-a-covered-index",target:"_blank",rel:"noopener noreferrer"},R={href:"https://xiaolincoding.com/mysql/index/index_interview.html#%E6%8C%89%E5%AD%97%E6%AE%B5%E4%B8%AA%E6%95%B0%E5%88%86%E7%B1%BB",target:"_blank",rel:"noopener noreferrer"},J={href:"https://stackoverflow.com/questions/609343/what-are-covering-indexes-and-covered-queries-in-sql-server",target:"_blank",rel:"noopener noreferrer"},j={href:"https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/covering-indexes.html",target:"_blank",rel:"noopener noreferrer"},N={href:"https://www.red-gate.com/simple-talk/databases/sql-server/learn/using-covering-indexes-to-improve-query-performance/",target:"_blank",rel:"noopener noreferrer"},T=t('<h2 id="♻️-jvm" tabindex="-1"><a class="header-anchor" href="#♻️-jvm" aria-hidden="true">#</a> ♻️ JVM</h2><h3 id="堆是如何管理内存的-2023-快手" tabindex="-1"><a class="header-anchor" href="#堆是如何管理内存的-2023-快手" aria-hidden="true">#</a> 堆是如何管理内存的（2023 快手）</h3><ol><li><strong>堆的划分</strong>：在JVM中，堆被划分为年轻代（Young Generation）和老年代（Old Generation）。年轻代又被划分为Eden区和两个Survivor区（S0和S1）。新创建的对象首先在Eden区创建，当Eden区满时，会触发Minor GC进行垃圾回收。存活的对象会被移动到Survivor区，当Survivor区也满时，对象会被移动到老年代。当老年代满了，会触发Major GC或者Full GC。</li><li><strong>垃圾回收</strong>：JVM通过垃圾回收机制自动回收不再使用的对象以释放内存。JVM的垃圾回收算法包括标记-清除、复制、标记-整理、分代收集等。</li><li><strong>内存分配</strong>：当创建新对象时，JVM会在堆中为其分配内存。JVM有一个指针叫做TLAB（Thread Local Allocation Buffer），用于在特定的线程中分配对象，这样可以避免线程之间的竞争。如果对象很大，可能直接在老年代分配。</li><li><strong>堆大小调整</strong>：JVM的堆大小可以动态调整，以适应程序的需求。可以通过启动参数设置最小堆大小（-Xms）和最大堆大小（-Xmx）。如果程序需要更多内存，堆可以扩展到最大堆大小；如果程序需要的内存减少，堆可以收缩到最小堆大小。</li></ol><h3 id="跨代引用问题怎么解决-2023-快手" tabindex="-1"><a class="header-anchor" href="#跨代引用问题怎么解决-2023-快手" aria-hidden="true">#</a> 跨代引用问题怎么解决（2023 快手）</h3><p><strong>跨代引用问题是指在JVM内存模型中，年轻代的对象引用老年代的对象，或者老年代的对象引用年轻代的对象</strong>。这在垃圾回收时可能会导致一些问题，因为垃圾回收通常会针对年轻代和老年代分别进行。</p><p>为了解决这个问题，JVM引入了一个叫做 <strong>&quot;卡表&quot;（Card Table）</strong> 的数据结构。卡表的主要作用是快速找到老年代中被年轻代对象引用的对象，从而在进行Minor GC时，减少全堆扫描的开销。</p><blockquote><p>卡表概览：卡表是Java虚拟机（JVM）中加速查找引用的一种辅助数据结构。表中每个条目对应于Java堆的一小部分，这里我称为小块。当老年代中的一个对象写入/更新对年轻代中的一个对象的引用时，这个操作会通过一种叫做写屏障的东西。当JVM看到这些写屏障时，它会更新卡片表中的相应条目。</p><ul><li>写屏障：垃圾收集器用来跟踪对象引用更改的一种机制。它是一段代码（JVM实现的），每当对象引用更新时就会运行。写屏障确保垃圾收集器可以跟踪堆中的所有引用，并确定哪些对象仍在使用，哪些没有。</li><li>当写入屏障发现语句<code>some_obj.field = other_obj;</code>将年轻指针存储在旧对象中时，它会这样做：<code>card_table[(&amp;old_obj - start_of_heap) &gt;&gt; K] = 1;</code></li><li>其中<code>&amp;old_obj</code>是现在有一个年轻代指针的对象的地址（它已经在寄存器中，因为它刚刚被确定引用旧对象）。 在次要GC期间，垃圾收集器查看卡表以确定要扫描哪些堆区域以查找年轻指针。 <ul><li>for i from 0 to (heap_size &gt;&gt; K):</li><li>if card_table[i]: scan heap[i &lt;&lt; K .. (i + 1) &lt;&lt; K] for young pointers <img src="'+l+'" alt="card-table" loading="lazy"></li></ul></li></ul></blockquote><p>卡表将老年代的内存分为多个小块（通常为512字节），每个小块对应卡表中的一项，当老年代中的某个小块内存<strong>被修改时</strong>（例如年轻代的对象引用了该小块中的某个对象），对应的卡表项就被标记为 <strong>&quot;脏（dirty）&quot;</strong> 。</p><p>在进行Minor GC（清理年轻代）时，JVM只需要检查标记为&quot;脏&quot;的卡表项对应的内存块，找出被年轻代对象引用的老年代对象，而无需扫描整个老年代。这样就大大提高了垃圾回收的效率。</p><p>至于<strong>老年代的对象引用年轻代的对象，这在JVM的分代回收策略中是不推荐的，因为会增加垃圾回收的复杂性</strong>。如果确实存在这种情况，一般需要在进行垃圾回收时，遍历老年代找到所有引用年轻代的对象，确保不会误删。</p>',10),G=n("p",null,"参考文献如下：",-1),O={href:"https://stackoverflow.com/questions/19154607/how-actually-card-table-and-writer-barrier-work",target:"_blank",rel:"noopener noreferrer"},I={href:"https://tschatzl.github.io/2022/02/15/card-table-card-size.html",target:"_blank",rel:"noopener noreferrer"},z={href:"https://www.mo4tech.com/jvm-card-table.html",target:"_blank",rel:"noopener noreferrer"},V={href:"https://www.cnblogs.com/hongdada/p/12016020.html",target:"_blank",rel:"noopener noreferrer"},D={href:"http://blog.ragozin.info/2011/06/understanding-gc-pauses-in-jvm-hotspots.html",target:"_blank",rel:"noopener noreferrer"},P=t('<h3 id="每次回收都要从gc-root开始吗-2023-快手" tabindex="-1"><a class="header-anchor" href="#每次回收都要从gc-root开始吗-2023-快手" aria-hidden="true">#</a> 每次回收都要从GC ROOT开始吗（2023 快手）</h3><p>是的，每次垃圾回收都会从GC Roots开始。GC Roots是垃圾回收算法开始工作的一组必要的&quot;根&quot;对象。</p><p>Java中可以作为GC Roots的对象包括：</p><ol><li>在虚拟机栈（栈帧中的本地变量表）中引用的对象。</li><li>方法区中类静态属性引用的对象。</li><li>方法区中常量引用的对象。</li><li>本地方法栈中JNI（即一般说的Native方法）引用的对象。</li></ol><p>垃圾回收器在对堆进行回收前，会先从GC Roots开始对堆中的对象进行可达性分析。只有当对象在GC Roots到该对象之间没有任何引用链可达时（换句话说，GC Roots到该对象不可达），这个对象才会被判定为可回收的垃圾对象。</p><p>这种通过GC Roots进行可达性分析的方式，保证了只有真正不再使用的对象会被回收，从而避免了错误地回收仍在使用的对象。</p><h3 id="垃圾回收过程如何判断每个阶段已经完成-可以进入下一个阶段-2023-快手" tabindex="-1"><a class="header-anchor" href="#垃圾回收过程如何判断每个阶段已经完成-可以进入下一个阶段-2023-快手" aria-hidden="true">#</a> 垃圾回收过程如何判断每个阶段已经完成，可以进入下一个阶段（2023 快手）</h3><p>像是垃圾回收器如CMS（并发标记清除）和G1（Garbage-First）在进行垃圾回收时，会通过一系列的阶段来判断何时可以进入下一步。</p><p>CMS垃圾回收器： CMS垃圾回收器主要包含以下四个阶段：</p><ol><li>初始标记（Initial Mark）：标记GC Roots能直接关联的对象，此阶段需要暂停所有的其他线程，但是时间通常较短。</li><li>并发标记（Concurrent Mark）：进行GC Roots Tracing的过程，也就是从GC Roots开始对堆中的对象进行可达性分析，此阶段可以与用户线程并发执行。</li><li>重新标记（Remark）：修正并发标记期间因用户程序继续运行而导致标记产生变动的那一部分标记记录，防止数据不一致，此阶段需要暂停所有的其他线程。</li><li>并发清除（Concurrent Sweep）：清除不再使用的对象，此阶段可以与用户线程并发执行。 CMS在每个阶段完成后会判断是否可以进入下一阶段。例如，在并发标记阶段，当所有从GC Roots开始可达的对象都被标记后，就可以进入重新标记阶段。</li></ol><p>G1垃圾回收器： G1垃圾回收器将堆内存划分为多个小块（Region），每个小块可能属于Eden区、Survivor区或者Old区。G1的垃圾回收过程包括以下几个阶段：</p><ol><li>初始标记（Initial Mark）：标记所有的GC Roots能直接关联的对象，此阶段需要暂停所有的其他线程。</li><li>并发标记（Concurrent Mark）：进行GC Roots Tracing的过程，此阶段可以与用户线程并发执行。</li><li>最终标记（Final Mark）：修正并发标记期间因用户程序继续运行而导致标记产生变动的那一部分标记记录，此阶段需要暂停所有的其他线程。</li><li>筛选回收（Cleanup）：首先统计各个Region的存活对象，并对Region进行排序，然后回收垃圾对象最多的Region。 类似地，G1在每个阶段完成后会判断是否可以进入下一阶段。例如，在并发标记阶段，当所有从GC Roots开始可达的对象都被标记后，就可以进入最终标记阶段。</li></ol><p>总的来说，垃圾回收器在每个阶段的结束条件主要取决于当前阶段的任务是否完成，例如是否所有的对象都已经被标记，或者是否所有的垃圾都已经被清除。</p><h2 id="🌐-计算机网络" tabindex="-1"><a class="header-anchor" href="#🌐-计算机网络" aria-hidden="true">#</a> 🌐 计算机网络</h2><h3 id="http协议的报文的格式有了解吗" tabindex="-1"><a class="header-anchor" href="#http协议的报文的格式有了解吗" aria-hidden="true">#</a> http协议的报文的格式有了解吗？</h3><p><img src="'+g+'" alt="" loading="lazy"> HTTP 的请求报文分为三个部分：</p><p>请求行、首部行、实体主体。</p><h2 id="🎨-设计模式" tabindex="-1"><a class="header-anchor" href="#🎨-设计模式" aria-hidden="true">#</a> 🎨 设计模式</h2><h3 id="代理模式和适配器模式有什么区别" tabindex="-1"><a class="header-anchor" href="#代理模式和适配器模式有什么区别" aria-hidden="true">#</a> 代理模式和适配器模式有什么区别？</h3><p>代理模式和适配器模式是两种常用的设计模式，它们的区别主要体现在以下几个方面：</p><ol><li>作用不同：代理模式是为了控制对对象的访问，而适配器模式是为了解决接口不匹配的问题。</li><li>解决问题的角度不同：代理模式是从外部控制访问，保护目标对象，而适配器模式是从内部改变对象接口，让其能够适配客户端的要求。</li><li>实现方式不同：代理模式通常使用面向对象的继承或者组合方式实现，而适配器模式则通常使用对象组合方式实现。</li><li>适用场景不同：代理模式适用于需要对对象进行控制和保护的情况，例如远程代理、虚拟代理等。适配器模式适用于需要将一个类的接口转换成客户端期望的另一个接口的情况，例如旧系统的升级改造、不兼容接口的统一等。</li></ol><h2 id="💦-算法汇总" tabindex="-1"><a class="header-anchor" href="#💦-算法汇总" aria-hidden="true">#</a> 💦 算法汇总</h2>',22),H={href:"https://leetcode.cn/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/",target:"_blank",rel:"noopener noreferrer"};function U(F,W){const i=o("RouterLink"),e=o("ExternalLinkIcon");return r(),c("div",null,[v,n("p",null,[a("2022有的大厂面试题不会在2023再次出现（也有可能会因为粗心加上，欢迎issue或者PR指正和修改），如果想要了解可以先看"),s(i,{to:"/Java/eightpart/giant.html"},{default:d(()=>[a("2022大厂面试")]),_:1}),a("版本。")]),b,n("blockquote",null,[y,n("ul",null,[n("li",null,[n("a",f,[a("https://stackoverflow.com/questions/2444005/how-do-i-make-my-arraylist-thread-safe-another-approach-to-problem-in-java"),s(e)]),a(" 如何使我的ArrayList线程安全？Java问题的另一种方法？")]),n("li",null,[n("a",_,[a("https://stackoverflow.com/questions/18983362/how-to-prove-arraylist-is-not-thread-safe-with-a-test"),s(e)]),a(" 如何用测试证明数组列表不是线程安全的？")]),n("li",null,[n("a",w,[a("https://stackoverflow.com/questions/300519/arraylist-vs-vectors-in-java-if-thread-safety-isnt-a-concern"),s(e)]),a(" ArrayList与vector，Java如果线程安全不是一个问题")])])]),C,n("blockquote",null,[S,n("ul",null,[n("li",null,[n("a",x,[a("https://programming.vip/docs/6200e8e7b682c.html"),s(e)]),a(" 【Mybatis源码解析】Mybatis源码涉及的设计模式总结")]),n("li",null,[n("a",L,[a("https://programming.vip/docs/mybatis-design-pattern.html"),s(e)]),a(" Mybatis设计模式")])])]),M,q,A,n("blockquote",null,[E,n("ul",null,[n("li",null,[n("a",B,[a("https://stackoverflow.com/questions/62137/what-is-a-covered-index"),s(e)]),a(" 什么是覆盖索引？")]),n("li",null,[n("a",R,[a("https://xiaolincoding.com/mysql/index/index_interview.html#按字段个数分类"),s(e)]),a(" 覆盖索引优化-小林coding")]),n("li",null,[n("a",J,[a("https://stackoverflow.com/questions/609343/what-are-covering-indexes-and-covered-queries-in-sql-server"),s(e)]),a(" 在SQL Server中什么是覆盖索引和覆盖查询？")]),n("li",null,[n("a",j,[a("https://docs.couchbase.com/server/current/n1ql/n1ql-language-reference/covering-indexes.html"),s(e)]),a(" Covering Indexes")]),n("li",null,[n("a",N,[a("https://www.red-gate.com/simple-talk/databases/sql-server/learn/using-covering-indexes-to-improve-query-performance/"),s(e)]),a(" 使用覆盖索引以提高查询性能")])])]),T,n("blockquote",null,[G,n("ul",null,[n("li",null,[n("a",O,[a("https://stackoverflow.com/questions/19154607/how-actually-card-table-and-writer-barrier-work"),s(e)]),a(" 卡表和写屏障是如何工作的？")]),n("li",null,[n("a",I,[a("https://tschatzl.github.io/2022/02/15/card-table-card-size.html"),s(e)]),a(" Card Table Card Size Shenanigans")]),n("li",null,[n("a",z,[a("https://www.mo4tech.com/jvm-card-table.html"),s(e)]),a(" JVM Card Table")]),n("li",null,[n("a",V,[a("https://www.cnblogs.com/hongdada/p/12016020.html"),s(e)]),a(" JVM-卡表（Card Table）")]),n("li",null,[n("a",D,[a("http://blog.ragozin.info/2011/06/understanding-gc-pauses-in-jvm-hotspots.html"),s(e)]),a(" Alexey Ragozin")])])]),P,n("ol",null,[n("li",null,[n("a",H,[a("二叉树的公共祖先（2023 快手）"),s(e)])])])])}const X=p(m,[["render",U],["__file","gaint2023.html.vue"]]);export{X as default};
