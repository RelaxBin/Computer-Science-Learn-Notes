"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9097],{3905:(e,r,t)=>{t.d(r,{Zo:()=>s,kt:()=>m});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=n.createContext({}),p=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},s=function(e){var r=p(e.components);return n.createElement(c.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return t?n.createElement(f,i(i({ref:r},s),{},{components:t})):n.createElement(f,i({ref:r},s))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},16222:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=t(87462),o=(t(67294),t(3905));const a={},i="\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",l={unversionedId:"Java/leetcode/src/BinaryTree/\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",id:"Java/leetcode/src/BinaryTree/\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",title:"\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",description:"https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/",source:"@site/docs/Java/leetcode/src/BinaryTree/106-\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811.md",sourceDirName:"Java/leetcode/src/BinaryTree",slug:"/Java/leetcode/src/BinaryTree/\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",draft:!1,editUrl:"https://github.com/zhiyu1998/Computer-Science-Learn-Notes/edit/master/docs/Java/leetcode/src/BinaryTree/106-\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811.md",tags:[],version:"current",sidebarPosition:106,frontMatter:{},sidebar:"sidebars",previous:{title:"\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"},next:{title:"\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 II",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 II"}},c={},p=[{value:"\u95ee\u9898\u63cf\u8ff0",id:"\u95ee\u9898\u63cf\u8ff0",level:2},{value:"\u7b2c\u4e00\u60f3\u6cd5\uff1a\u5206\u800c\u6cbb\u4e4b",id:"\u7b2c\u4e00\u60f3\u6cd5\u5206\u800c\u6cbb\u4e4b",level:2}],s={toc:p};function d(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"},"\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/"},"https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/")),(0,o.kt)("h2",{id:"\u95ee\u9898\u63cf\u8ff0"},"\u95ee\u9898\u63cf\u8ff0"),(0,o.kt)("p",null,"\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\u6570\u7ec4 inorder \u548c postorder \uff0c\u5176\u4e2d inorder \u662f\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\uff0c postorder \u662f\u540c\u4e00\u68f5\u6811\u7684\u540e\u5e8f\u904d\u5386\uff0c\u8bf7\u4f60\u6784\u9020\u5e76\u8fd4\u56de\u8fd9\u9897 \u4e8c\u53c9\u6811 \u3002"),(0,o.kt)("h2",{id:"\u7b2c\u4e00\u60f3\u6cd5\u5206\u800c\u6cbb\u4e4b"},"\u7b2c\u4e00\u60f3\u6cd5\uff1a\u5206\u800c\u6cbb\u4e4b"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u6392\u9664\u7279\u6b8a\u90e8\u5206\uff08\u957f\u5ea6\u4e3a\uff1a0\uff0c 1\uff09"),(0,o.kt)("li",{parentName:"ol"},"\u5efa\u7acb\u54c8\u5e0c\u8868\uff08\u5b58\u653e\u4e2d\u5e8f\u904d\u5386\u7684\u4f4d\u7f6e\uff09"),(0,o.kt)("li",{parentName:"ol"},"\u540e\u7eed\u904d\u5386\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff08\u5c40\u90e8\u5934\u8282\u70b9\uff09\uff0c\u7136\u540e\u4ece\u54c8\u5e0c\u8868\u4e2d\u627e\u5230\u4e2d\u5e8f\u4f4d\u7f6e"),(0,o.kt)("li",{parentName:"ol"},"\u7b97\u51fa\u5c40\u90e8\u5934\u8282\u70b9\u5de6\u8fb9\u6709\u51e0\u4e2a\u5143\u7d20"),(0,o.kt)("li",{parentName:"ol"},"\u8ba1\u7b97\u51fa\u4e2d\u5e8f\u8282\u70b9\u7684\u5de6\u8fb9\u8303\u56f4\u548c\u540e\u5e8f\u904d\u5386\u7684\u5de6\u8fb9\u8303\u56f4"),(0,o.kt)("li",{parentName:"ol"},"\u540c\u7406\uff1a\u53f3\u8fb9\u8303\u56f4"),(0,o.kt)("li",{parentName:"ol"},"\uff01\uff01\u96be\u70b9",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"\u540e\u5e8f\u904d\u5386\u7684\u5de6\u8fb9\u8303\u56f4\u548c\u53f3\u8fb9\u8303\u56f4",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"\u5de6\u8fb9 \u3010\u540e\u5e8f\u904d\u5386\u7684\u5934\uff0c \u540e\u5e8f\u904d\u5386\u7684\u5934 + \u5de6\u8fb9\u6709\u51e0\u4e2a\u8282\u70b9\u3011"),(0,o.kt)("li",{parentName:"ol"},"\u53f3\u8fb9 \u3010\u540e\u5e8f\u904d\u5386\u7684\u5934 + \u5de6\u8fb9\u6709\u51e0\u4e2a\u8282\u70b9\uff0c\u540e\u5e8f\u904d\u5386\u7684\u5c3e - 1 \u3011"))),(0,o.kt)("li",{parentName:"ol"},"\u9012\u5f52\u5934",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"\u540e\u5e8f\u904d\u5386\u5934 == \u540e\u5e8f\u904d\u5386\u5c3e \u3010\u53ef\u4ee5\u901a\u8fc7\u4e2d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u7ed3\u679c\u90fd\u662f","[2,1]","\u5206\u6790\u5f97\u5230\u3011")))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n * int val;\n * TreeNode left;\n * TreeNode right;\n * TreeNode() {}\n * TreeNode(int val) { this.val = val; }\n * TreeNode(int val, TreeNode left, TreeNode right) {\n * this.val = val;\n * this.left = left;\n * this.right = right;\n * }\n * }\n */\nclass Solution {\n    HashMap<Integer, Integer> map = new HashMap<>();\n\n    public TreeNode buildTree(int[] inorder, int[] postorder) {\n        // \u5224\u65ad2\u79cd\u7279\u6b8a\u60c5\u51b5\n        if (inorder.length == 0) {\n            return null;\n        }\n        if (inorder.length == 1) {\n            return new TreeNode(inorder[0]);\n        }\n\n        for (int i = 0; i < inorder.length; i++)\n            map.put(inorder[i], i);\n        return build(inorder, 0, inorder.length, postorder, 0, postorder.length);\n    }\n\n    private TreeNode build(int[] inorder, int inStart, int inEnd, int[] postorder, int postStart, int postEnd) {\n        \n        if (postEnd == postStart) {\n            return null;\n        }\n\n        // \u5f53\u524d\u7684\u5934\u7ed3\u70b9\n        TreeNode cur = new TreeNode(postorder[postEnd - 1]);\n        // \u5f53\u524d\u8282\u70b9\u5728\u4e2d\u5e8f\u904d\u5386\u7684\u4f4d\u7f6e\n        int curIndex = map.get(cur.val);\n\n        // \u5de6\u8fb9\u5143\u7d20\u7684\u4e2a\u6570\n        int leftNum = curIndex - inStart;\n\n        cur.left = build(inorder, inStart, curIndex, postorder, postStart, postStart + leftNum);\n\n        cur.right = build(inorder, curIndex + 1, inEnd, postorder, postStart + leftNum, postEnd - 1);\n\n        return cur;\n    }\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u6267\u884c\u7ed3\u679c\uff1a"),(0,o.kt)("p",{parentName:"blockquote"},"\u6267\u884c\u7528\u65f6\uff1a2 ms, \u5728\u6240\u6709 Java \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8671.01% \u7684\u7528\u6237"),(0,o.kt)("p",{parentName:"blockquote"},"\u5185\u5b58\u6d88\u8017\uff1a40.6 MB, \u5728\u6240\u6709 Java \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8677.77% \u7684\u7528\u6237"),(0,o.kt)("p",{parentName:"blockquote"},"\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b\uff1a202 / 202")))}d.isMDXComponent=!0}}]);