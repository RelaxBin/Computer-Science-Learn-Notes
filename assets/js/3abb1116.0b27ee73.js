"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5045],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var r=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=c(t),f=l,m=p["".concat(u,".").concat(f)]||p[f]||d[f]||a;return t?r.createElement(m,i(i({ref:n},s),{},{components:t})):r.createElement(m,i({ref:n},s))}));function f(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,i=new Array(a);i[0]=p;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},45654:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=t(87462),l=(t(67294),t(3905));const a={},i=void 0,o={unversionedId:"Java/leetcode/src/BinaryTree/\u5bf9\u79f0\u4e8c\u53c9\u6811",id:"Java/leetcode/src/BinaryTree/\u5bf9\u79f0\u4e8c\u53c9\u6811",title:"\u5bf9\u79f0\u4e8c\u53c9\u6811",description:"\u5bf9\u79f0\u4e8c\u53c9\u6811",source:"@site/docs/Java/leetcode/src/BinaryTree/101-\u5bf9\u79f0\u4e8c\u53c9\u6811.md",sourceDirName:"Java/leetcode/src/BinaryTree",slug:"/Java/leetcode/src/BinaryTree/\u5bf9\u79f0\u4e8c\u53c9\u6811",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u5bf9\u79f0\u4e8c\u53c9\u6811",draft:!1,editUrl:"https://github.com/zhiyu1998/Computer-Science-Learn-Notes/edit/master/docs/Java/leetcode/src/BinaryTree/101-\u5bf9\u79f0\u4e8c\u53c9\u6811.md",tags:[],version:"current",sidebarPosition:101,frontMatter:{},sidebar:"sidebars",previous:{title:"\u76f8\u540c\u7684\u6811",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u76f8\u540c\u7684\u6811"},next:{title:"\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"}},u={},c=[{value:"\u5bf9\u79f0\u4e8c\u53c9\u6811",id:"\u5bf9\u79f0\u4e8c\u53c9\u6811",level:2},{value:"\u95ee\u9898\u63cf\u8ff0",id:"\u95ee\u9898\u63cf\u8ff0",level:2},{value:"\u3010\u9519\u8bef\u3011\u7b2c\u4e00\u601d\u8def\uff1a\u904d\u5386\u6210\u6570\u7ec4\u5f62\u5f0f\u524d\u540e\u5bf9\u6bd4",id:"\u9519\u8bef\u7b2c\u4e00\u601d\u8def\u904d\u5386\u6210\u6570\u7ec4\u5f62\u5f0f\u524d\u540e\u5bf9\u6bd4",level:2},{value:"\u5de6\u53f3\u5b50\u6811\u9012\u5f52\u5f62\u5f0f",id:"\u5de6\u53f3\u5b50\u6811\u9012\u5f52\u5f62\u5f0f",level:2},{value:"\u601d\u8def2\uff1a\u4f7f\u7528\u961f\u5217\u89e3\u51b3",id:"\u601d\u8def2\u4f7f\u7528\u961f\u5217\u89e3\u51b3",level:2}],s={toc:c};function d(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"\u5bf9\u79f0\u4e8c\u53c9\u6811"},"\u5bf9\u79f0\u4e8c\u53c9\u6811"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/symmetric-tree/"},"https://leetcode-cn.com/problems/symmetric-tree/")),(0,l.kt)("h2",{id:"\u95ee\u9898\u63cf\u8ff0"},"\u95ee\u9898\u63cf\u8ff0"),(0,l.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c \u68c0\u67e5\u5b83\u662f\u5426\u8f74\u5bf9\u79f0\u3002"),(0,l.kt)("h2",{id:"\u9519\u8bef\u7b2c\u4e00\u601d\u8def\u904d\u5386\u6210\u6570\u7ec4\u5f62\u5f0f\u524d\u540e\u5bf9\u6bd4"},"\u3010\u9519\u8bef\u3011\u7b2c\u4e00\u601d\u8def\uff1a\u904d\u5386\u6210\u6570\u7ec4\u5f62\u5f0f\u524d\u540e\u5bf9\u6bd4"),(0,l.kt)("p",null,"\u9762\u5bf9\u60c5\u51b5\uff1a","[1,2,2,2,null,2]"," \u53d1\u751f\u9519\u8bef"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    private List<Integer> list = new ArrayList<>();\n\n    public boolean isSymmetric(TreeNode root) {\n        inOrder(root);\n\n        int length = list.size();\n        if (length % 2 == 0)\n            return false;\n\n        for (int i = 0, j = length - 1; i < length / 2; i++, j--) {\n            if (list.get(i) != list.get(j))\n                return false;\n        }\n        return true;\n    }\n}\n")),(0,l.kt)("h2",{id:"\u5de6\u53f3\u5b50\u6811\u9012\u5f52\u5f62\u5f0f"},"\u5de6\u53f3\u5b50\u6811\u9012\u5f52\u5f62\u5f0f"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\u4f20\u9012\u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811"),(0,l.kt)("li",{parentName:"ol"},"\u5206\u522b\u8fdb\u5224\u65ad\u4ee5\u4e0b\u60c5\u51b5",(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},"\u5de6\u5b50\u6811\u8282\u70b9\u548c\u53f3\u5b50\u6811\u8282\u70b9\u90fd\u4e3a\u7a7a -- \u771f"),(0,l.kt)("li",{parentName:"ol"},"\u57281\u7684\u524d\u63d0\u4e0b\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u4efb\u610f\u4e00\u4e2a\u4e3a\u7a7a -- \u5047"),(0,l.kt)("li",{parentName:"ol"},"\u5de6\u5b50\u6811\u8282\u70b9\u7684\u6570\u503c != \u53f3\u5b50\u6811\u8282\u70b9\u7684\u6570\u503c -- \u5047"))),(0,l.kt)("li",{parentName:"ol"},"\u9012\u5f52\uff1a\u5de6\u5b50\u6811\u7684\u5de6\u8282\u70b9\u548c\u53f3\u5b50\u6811\u7684\u53f3\u8282\u70b9\uff0c\u5de6\u5b50\u6811\u7684\u53f3\u8282\u70b9\u548c\u53f3\u5b50\u6811\u7684\u5de6\u8282\u70b9")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"//\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c \u68c0\u67e5\u5b83\u662f\u5426\u8f74\u5bf9\u79f0\u3002 \n//\n// \n//\n// \u793a\u4f8b 1\uff1a \n//\n// \n//\u8f93\u5165\uff1aroot = [1,2,2,3,4,4,3]\n//\u8f93\u51fa\uff1atrue\n// \n//\n// \u793a\u4f8b 2\uff1a \n//\n// \n//\u8f93\u5165\uff1aroot = [1,2,2,null,3,null,3]\n//\u8f93\u51fa\uff1afalse\n// \n//\n// \n//\n// \u63d0\u793a\uff1a \n//\n// \n// \u6811\u4e2d\u8282\u70b9\u6570\u76ee\u5728\u8303\u56f4 [1, 1000] \u5185 \n// -100 <= Node.val <= 100 \n// \n//\n// \n//\n// \u8fdb\u9636\uff1a\u4f60\u53ef\u4ee5\u8fd0\u7528\u9012\u5f52\u548c\u8fed\u4ee3\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f \n// Related Topics \u6811 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 \u4e8c\u53c9\u6811 \ud83d\udc4d 1773 \ud83d\udc4e 0\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n * int val;\n * TreeNode left;\n * TreeNode right;\n * TreeNode() {}\n * TreeNode(int val) { this.val = val; }\n * TreeNode(int val, TreeNode left, TreeNode right) {\n * this.val = val;\n * this.left = left;\n * this.right = right;\n * }\n * }\n */\nclass Solution {\n\n    public boolean isSymmetric(TreeNode root) {\n        if (root == null)\n            return false;\n\n        return inOrder(root.left, root.right);\n    }\n\n    private boolean inOrder(TreeNode left, TreeNode right) {\n        if (left == null && right == null) return true;\n\n        if (left == null || right == null) return false;\n\n        if (left.val != right.val)\n            return false;\n\n        return inOrder(left.left, right.right) && inOrder(left.right, right.left);\n    }\n}\n")),(0,l.kt)("h2",{id:"\u601d\u8def2\u4f7f\u7528\u961f\u5217\u89e3\u51b3"},"\u601d\u8def2\uff1a\u4f7f\u7528\u961f\u5217\u89e3\u51b3"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\u5224\u65ad\u4e24\u79cd\u60c5\u51b5",(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},"[1]"," -- true"),(0,l.kt)("li",{parentName:"ol"},"[1,2]"," -- false"))),(0,l.kt)("li",{parentName:"ol"},"\u628a\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u52a0\u5165\u5230\u961f\u5217\u4e2d"),(0,l.kt)("li",{parentName:"ol"},"\u5faa\u73af\u904d\u5386\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811",(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},"\u5206\u522b\u53d6\u51fa\u5de6\u5b50\u6811\u7684\u5de6\u8282\u70b9\u548c\u53f3\u5b50\u6811\u7684\u53f3\u8282\u70b9 & \u53f3\u5b50\u6811\u7684\u5de6\u8282\u70b9\u548c\u5de6\u5b50\u6811\u7684\u53f3\u8282\u70b9"),(0,l.kt)("li",{parentName:"ol"},"\u53d6\u51fa\u6765\u7684\u8282\u70b9\u8fdb\u884c\u5224\u65ad",(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},"\u5982\u679c\u5de6\u8282\u70b9\u548c\u53f3\u8282\u70b9\u90fd\u4e3a\u7a7a -- \u5bf9\u79f0"),(0,l.kt)("li",{parentName:"ol"},"\u57281\u7684\u57fa\u7840\u4e0a\u5982\u679c\u5176\u4e2d\u6709\u4e00\u4e2a\u4e3a\u7a7a -- \u4e0d\u5bf9\u79f0"),(0,l.kt)("li",{parentName:"ol"},"\u5982\u679c\u5de6\u8282\u70b9\u6570\u503c \uff01=  \u53f3\u8282\u70b9\u7684\u6570\u503c -- \u4e0d\u5bf9\u79f0"))))),(0,l.kt)("li",{parentName:"ol"},"\u5982\u679c\u4e0a\u8ff0\u60c5\u51b5\u90fd\u4e0d\u6ee1\u8db3\uff0c\u90a3\u4e48\u5bf9\u79f0 -- \u8fd4\u56detrue")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n * int val;\n * TreeNode left;\n * TreeNode right;\n * TreeNode() {}\n * TreeNode(int val) { this.val = val; }\n * TreeNode(int val, TreeNode left, TreeNode right) {\n * this.val = val;\n * this.left = left;\n * this.right = right;\n * }\n * }\n */\nclass Solution {\n\n    public boolean isSymmetric(TreeNode root) {\n        if (root == null || (root.left == null && root.right == null)) {\n            return true;\n        }\n\n        LinkedList<TreeNode> queue = new LinkedList<TreeNode>();\n        queue.add(root.left);\n        queue.add(root.right);\n\n        while (queue.size() > 0) {\n            TreeNode l = queue.removeFirst();\n            TreeNode r = queue.removeFirst();\n\n            if (l == null && r == null)\n                continue;\n\n            if (l == null || r == null)\n                return false;\n\n            if (l.val != r.val)\n                return false;\n\n            queue.add(l.left);\n            queue.add(r.right);\n\n            queue.add(l.right);\n            queue.add(r.left);\n        }\n        return true;\n    }\n}\n")))}d.isMDXComponent=!0}}]);