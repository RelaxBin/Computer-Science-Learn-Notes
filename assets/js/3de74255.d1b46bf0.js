"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1955],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=s(n),m=i,k=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(k,l(l({ref:t},p),{},{components:n})):r.createElement(k,l({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=u;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:i,l[1]=a;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},25022:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>s});var r=n(87462),i=(n(67294),n(3905));const o={},l="\u53cd\u8f6c\u94fe\u8868II",a={unversionedId:"Java/leetcode/src/LinkedList/\u53cd\u8f6c\u94fe\u8868II",id:"Java/leetcode/src/LinkedList/\u53cd\u8f6c\u94fe\u8868II",title:"\u53cd\u8f6c\u94fe\u8868II",description:"https://leetcode-cn.com/problems/reverse-linked-list-ii/",source:"@site/docs/Java/leetcode/src/LinkedList/92-\u53cd\u8f6c\u94fe\u8868II.md",sourceDirName:"Java/leetcode/src/LinkedList",slug:"/Java/leetcode/src/LinkedList/\u53cd\u8f6c\u94fe\u8868II",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/LinkedList/\u53cd\u8f6c\u94fe\u8868II",draft:!1,editUrl:"https://github.com/zhiyu1998/Computer-Science-Learn-Notes/edit/master/docs/Java/leetcode/src/LinkedList/92-\u53cd\u8f6c\u94fe\u8868II.md",tags:[],version:"current",sidebarPosition:92,frontMatter:{},sidebar:"sidebars",previous:{title:"\u5206\u9694\u94fe\u8868",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/LinkedList/\u5206\u9694\u94fe\u8868"},next:{title:"\u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/LinkedList/\u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868"}},c={},s=[{value:"\u95ee\u9898\u63cf\u8ff0",id:"\u95ee\u9898\u63cf\u8ff0",level:2},{value:"\u7b2c\u4e00\u60f3\u6cd5\uff1a\u76f4\u63a5\u8fed\u4ee3",id:"\u7b2c\u4e00\u60f3\u6cd5\u76f4\u63a5\u8fed\u4ee3",level:2}],p={toc:s};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u53cd\u8f6c\u94fe\u8868ii"},"\u53cd\u8f6c\u94fe\u8868II"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/reverse-linked-list-ii/"},"https://leetcode-cn.com/problems/reverse-linked-list-ii/")),(0,i.kt)("h2",{id:"\u95ee\u9898\u63cf\u8ff0"},"\u95ee\u9898\u63cf\u8ff0"),(0,i.kt)("p",null,"\u7ed9\u4f60\u5355\u94fe\u8868\u7684\u5934\u6307\u9488 head \u548c\u4e24\u4e2a\u6574\u6570 left \u548c right \uff0c\u5176\u4e2d left <= right \u3002\u8bf7\u4f60\u53cd\u8f6c\u4ece\u4f4d\u7f6e left \u5230\u4f4d\u7f6e right \u7684\u94fe\u8868\u8282\u70b9\uff0c\u8fd4\u56de \u53cd\u8f6c\u540e\u7684\u94fe\u8868 \u3002 "),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/02/19/rev2ex2.jpg",alt:null})),(0,i.kt)("h2",{id:"\u7b2c\u4e00\u60f3\u6cd5\u76f4\u63a5\u8fed\u4ee3"},"\u7b2c\u4e00\u60f3\u6cd5\uff1a\u76f4\u63a5\u8fed\u4ee3"),(0,i.kt)("p",null,"\u7531\u4e8e\u8111\u5b50\u4e0d\u597d\u4f7f\uff0c\u7528\u4e86\u4e24\u6b21while\u5faa\u73af"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"\u9996\u5148\u5224\u65ad\u4e24\u4e2a\u7279\u6b8a\u60c5\u51b5"),(0,i.kt)("li",{parentName:"ol"},"\u4e00\u5f00\u59cb\u6211\u6ca1\u7528\u54d1\u8282\u70b9\uff08",(0,i.kt)("inlineCode",{parentName:"li"},"dummy"),"\uff09\u7684\uff0c\u662f\u56e0\u4e3a\u540e\u9762\u5199\u7740\u5199\u7740\u8003\u8651\u5230\u5982\u679c\u8981\u53cd\u8f6c\u7684\u5217\u8868\u5305\u542b\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5c31\u6709\u70b9\u96be\u53cd\u8f6c\uff0c\u6240\u4ee5\u52a0\u5165\u4e86\u54d1\u8282\u70b9"),(0,i.kt)("li",{parentName:"ol"},"\u7b2c\u4e00\u4e2awhile\u4e3b\u8981\u662f\u627e\u5230\u4f20\u5165\u53c2\u6570\uff08",(0,i.kt)("inlineCode",{parentName:"li"},"left"),"\uff09\u6240\u5728\u7684\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\uff08",(0,i.kt)("inlineCode",{parentName:"li"},"left - 1"),"\uff09"),(0,i.kt)("li",{parentName:"ol"},"\u7136\u540e\u6807\u8bb0\u8fd9\u4e2a\uff08",(0,i.kt)("inlineCode",{parentName:"li"},"leftNode"),"\uff09\u4e3a\u7b2c\u4e00\u4e2awhile\u627e\u5230\u7684\u8282\u70b9"),(0,i.kt)("li",{parentName:"ol"},"\u540e\u7eed\u8df3\u51fa\u8fd9\u4e2a\u8282\u70b9\uff0c\u4f7f\uff08cur\uff0cpre\uff09\u90fd\u5728left\u548cright\u91cc\u9762\uff1b\u5e76\u6807\u8bb0\uff08",(0,i.kt)("inlineCode",{parentName:"li"},"rightNode"),"\uff09\u4e3a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u5373\u53cd\u8f6c\u524d\u7684\u4e00\u4e2a\u5143\u7d20\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20"),(0,i.kt)("li",{parentName:"ol"},"\u7b2c\u4e8c\u4e2awhile\u5f88\u597d\u7406\u89e3\uff0c\u5c31\u662f206\u9898\u53cd\u8f6c\u5217\u8868\u7684\u9898\u89e3\u5199\u6cd5"),(0,i.kt)("li",{parentName:"ol"},"\u6807\u8bb0\u4e3aleft\u5de6\u8fb9\u7684\u90a3\u4e2a\u8282\u70b9\uff08",(0,i.kt)("inlineCode",{parentName:"li"},"leftNode"),"\uff09\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff08\u4ee5\u4e0a\u8ff0\u56fe\u793a\u30101,2,3\uff0c4,5\u8f6c1,4,3,2,5\u3011\u4e3a\u4f8b\u7684\u8bdd\u5c31\u662f",(0,i.kt)("inlineCode",{parentName:"li"},"4"),"\u6240\u5728\u7684\u4f4d\u7f6e\uff09"),(0,i.kt)("li",{parentName:"ol"},"\u6807\u8bb0\u4e3a\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u4f4d\u7f6e\uff08",(0,i.kt)("inlineCode",{parentName:"li"},"rightNode"),"\uff09\u6307\u5411\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff08cur\u7684\u540e\u9762\uff0c\u5728\u56fe\u793a\u7684\u4f4d\u7f6e\u5c31\u662f",(0,i.kt)("inlineCode",{parentName:"li"},"5"),"\u6240\u5728\u7684\u4f4d\u7f6e\uff09")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseBetween(ListNode head, int left, int right) {\n        if (head == null || head.next == null) return head;\n\n        ListNode dummy = new ListNode(0, head);\n\n        int count = 0;\n        ListNode cur = dummy;\n        while (count != left - 1) {\n            count++;\n            cur = cur.next;\n        }\n        ListNode leftNode = cur; // \u88ab\u8c03\u6362\u5b50\u4e32\u5934\u7ed3\u70b9\u7684\u4e0a\u4e00\u4e2a\u5143\u7d20\n\n        count++;\n        cur = cur.next;\n        ListNode pre = cur.next;\n        ListNode rightNode= cur; // \u88ab\u8c03\u6362\u5b50\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        \n        while (count != right) {\n            ListNode temp = pre;\n            pre = pre.next;\n            temp.next = cur;\n            cur = temp;\n            count++;\n        }\n        rightNode.next = pre;\n        leftNode.next = cur;\n\n        return dummy.next;\n    }\n}\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"44 / 44")," \u4e2a\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b"),(0,i.kt)("p",{parentName:"blockquote"},"\u72b6\u6001\uff1a",(0,i.kt)("em",{parentName:"p"},"\u901a\u8fc7")),(0,i.kt)("p",{parentName:"blockquote"},"\u6267\u884c\u7528\u65f6: ",(0,i.kt)("strong",{parentName:"p"},"0 ms")),(0,i.kt)("p",{parentName:"blockquote"},"\u5185\u5b58\u6d88\u8017: ",(0,i.kt)("strong",{parentName:"p"},"39.2 MB"))))}d.isMDXComponent=!0}}]);