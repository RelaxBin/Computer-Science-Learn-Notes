"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8754],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=d(t),f=o,v=p["".concat(s,".").concat(f)]||p[f]||c[f]||l;return t?r.createElement(v,a(a({ref:n},u),{},{components:t})):r.createElement(v,a({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,a=new Array(l);a[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var d=2;d<l;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},26367:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var r=t(87462),o=(t(67294),t(3905));const l={},a="\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",i={unversionedId:"Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",id:"Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",title:"\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",description:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/",source:"@site/docs/Java/leetcode/src/BinaryTree/102-\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386.md",sourceDirName:"Java/leetcode/src/BinaryTree",slug:"/Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",draft:!1,editUrl:"https://github.com/zhiyu1998/Computer-Science-Learn-Notes/edit/master/docs/Java/leetcode/src/BinaryTree/102-\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386.md",tags:[],version:"current",sidebarPosition:102,frontMatter:{},sidebar:"sidebars",previous:{title:"\u5bf9\u79f0\u4e8c\u53c9\u6811",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u5bf9\u79f0\u4e8c\u53c9\u6811"},next:{title:"\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386"}},s={},d=[{value:"\u95ee\u9898\u63cf\u8ff0",id:"\u95ee\u9898\u63cf\u8ff0",level:2},{value:"\u7b2c\u4e00\u601d\u8def: \u961f\u5217\u65b9\u5f0f\u89e3\u51b3",id:"\u7b2c\u4e00\u601d\u8def-\u961f\u5217\u65b9\u5f0f\u89e3\u51b3",level:2},{value:"\u4ecb\u7ecd: BFS vs DFS",id:"\u4ecb\u7ecd-bfs-vs-dfs",level:2},{value:"DFS \u4e0e BFS\u533a\u522b",id:"dfs-\u4e0e-bfs\u533a\u522b",level:3},{value:"BFS \u7684\u5e94\u7528\u4e00\uff1a\u5c42\u5e8f\u904d\u5386",id:"bfs-\u7684\u5e94\u7528\u4e00\u5c42\u5e8f\u904d\u5386",level:3},{value:"BFS \u7684\u5e94\u7528\u4e8c\uff1a\u6700\u77ed\u8def\u5f84",id:"bfs-\u7684\u5e94\u7528\u4e8c\u6700\u77ed\u8def\u5f84",level:3},{value:"\u4ee3\u7801\u4f18\u5316",id:"\u4ee3\u7801\u4f18\u5316",level:2}],u={toc:d};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"},"\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/"},"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/")),(0,o.kt)("h2",{id:"\u95ee\u9898\u63cf\u8ff0"},"\u95ee\u9898\u63cf\u8ff0"),(0,o.kt)("p",null,"\u7ed9\u4f60\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u7684 \u5c42\u5e8f\u904d\u5386 \u3002 \uff08\u5373\u9010\u5c42\u5730\uff0c\u4ece\u5de6\u5230\u53f3\u8bbf\u95ee\u6240\u6709\u8282\u70b9\uff09\u3002"),(0,o.kt)("h2",{id:"\u7b2c\u4e00\u601d\u8def-\u961f\u5217\u65b9\u5f0f\u89e3\u51b3"},"\u7b2c\u4e00\u601d\u8def: \u961f\u5217\u65b9\u5f0f\u89e3\u51b3"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"//\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c \u68c0\u67e5\u5b83\u662f\u5426\u8f74\u5bf9\u79f0\u3002 \n//\n// \n//\n// \u793a\u4f8b 1\uff1a \n//\n// \n//\u8f93\u5165\uff1aroot = [1,2,2,3,4,4,3]\n//\u8f93\u51fa\uff1atrue\n// \n//\n// \u793a\u4f8b 2\uff1a \n//\n// \n//\u8f93\u5165\uff1aroot = [1,2,2,null,3,null,3]\n//\u8f93\u51fa\uff1afalse\n// \n//\n// \n//\n// \u63d0\u793a\uff1a \n//\n// \n// \u6811\u4e2d\u8282\u70b9\u6570\u76ee\u5728\u8303\u56f4 [1, 1000] \u5185 \n// -100 <= Node.val <= 100 \n// \n//\n// \n//\n// \u8fdb\u9636\uff1a\u4f60\u53ef\u4ee5\u8fd0\u7528\u9012\u5f52\u548c\u8fed\u4ee3\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f \n// Related Topics \u6811 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 \u4e8c\u53c9\u6811 \ud83d\udc4d 1773 \ud83d\udc4e 0\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n\nimport java.util.LinkedList;\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n * int val;\n * TreeNode left;\n * TreeNode right;\n * TreeNode() {}\n * TreeNode(int val) { this.val = val; }\n * TreeNode(int val, TreeNode left, TreeNode right) {\n * this.val = val;\n * this.left = left;\n * this.right = right;\n * }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        List<List<Integer>> ans = new LinkedList<>();\n\n        // \u7b2c\u4e00\u5c42\n        if (root == null)\n            return ans;\n        else {\n            final List<Integer> temp = new LinkedList<>();\n            temp.add(root.val);\n            ans.add(temp);\n        }\n\n        // \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\n        if (root.left == null && root.right == null)\n            return ans;\n\n        // \u7b2c\u4e8c\u5c42\n        LinkedList<TreeNode> curG = new LinkedList<>();\n        LinkedList<TreeNode> nextG = new LinkedList<>();\n\n        if (root.left != null)\n            curG.add(root.left);\n        if (root.right != null)\n            curG.add(root.right);\n\n        // \u5176\u4ed6\u5c42\uff08>2\uff09\n        while (curG.size() > 0) {\n            List<Integer> elList = new LinkedList<>();\n\n            // \u52a0\u5165\u4e0a\u4e00\u6b21\u7684\u7b54\u6848, \u6e05\u9664\u961f\u5217\u5143\u7d20\n            while (curG.size() > 0) {\n                final TreeNode node = curG.removeFirst();\n                elList.add(node.val);\n                // \u6dfb\u52a0\u5de6\u8282\u70b9\u548c\u53f3\u8282\u70b9\n                if (node.left != null)\n                    nextG.add(node.left);\n                if (node.right != null)\n                    nextG.add(node.right);\n            }\n\n            // \u6dfb\u52a0\u961f\u5217\u5143\u7d20\n            ans.add(elList);\n            curG.addAll(nextG);\n            nextG.clear();\n        }\n\n        return ans;\n    }\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u6267\u884c\u7ed3\u679c\uff1a \u901a\u8fc7",(0,o.kt)("br",{parentName:"p"}),"\n","\u6267\u884c\u7528\u65f6\uff1a1 ms, \u5728\u6240\u6709 Java \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 79.04% \u7684\u7528\u6237",(0,o.kt)("br",{parentName:"p"}),"\n","\u5185\u5b58\u6d88\u8017\uff1a41.2 MB, \u5728\u6240\u6709 Java \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 40.13% \u7684\u7528\u6237")),(0,o.kt)("h2",{id:"\u4ecb\u7ecd-bfs-vs-dfs"},"\u4ecb\u7ecd: BFS vs DFS"),(0,o.kt)("p",null,"DFS\uff08\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff09\u548c BFS\uff08\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff09"),(0,o.kt)("h3",{id:"dfs-\u4e0e-bfs\u533a\u522b"},"DFS \u4e0e BFS\u533a\u522b"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"DFS\u904d\u5386"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-java"},"void dfs(TreeNode root) {\n    if (root == null) {\n        return;\n    }\n    dfs(root.left);\n    dfs(root.right);\n}\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\n> BFS\u904d\u5386\n```java\nvoid bfs(TreeNode root) {\n    Queue<TreeNode> queue = new ArrayDeque<>();\n    queue.add(root);\n    while (!queue.isEmpty()) {\n        TreeNode node = queue.poll(); // Java \u7684 pop \u5199\u4f5c poll()\n        if (node.left != null) {\n            queue.add(node.left);\n        }\n        if (node.right != null) {\n            queue.add(node.right);\n        }\n    }\n}\n\n")),(0,o.kt)("p",null,"\u53ea\u662f\u6bd4\u8f83\u4e24\u6bb5\u4ee3\u7801\u7684\u8bdd\uff0c\u6700\u76f4\u89c2\u7684\u611f\u53d7\u5c31\u662f\uff1aDFS \u904d\u5386\u7684\u4ee3\u7801\u6bd4 BFS \u7b80\u6d01\u592a\u591a\u4e86\uff01\u8fd9\u662f\u56e0\u4e3a\u9012\u5f52\u7684\u65b9\u5f0f\u9690\u542b\u5730\u4f7f\u7528\u4e86\u7cfb\u7edf\u7684 \u6808\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u81ea\u5df1\u7ef4\u62a4\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u3002\u5982\u679c\u53ea\u662f\u7b80\u5355\u5730\u5c06\u4e8c\u53c9\u6811\u904d\u5386\u4e00\u904d\uff0c\u90a3\u4e48 DFS \u663e\u7136\u662f\u66f4\u65b9\u4fbf\u7684\u9009\u62e9\u3002"),(0,o.kt)("h3",{id:"bfs-\u7684\u5e94\u7528\u4e00\u5c42\u5e8f\u904d\u5386"},"BFS \u7684\u5e94\u7528\u4e00\uff1a\u5c42\u5e8f\u904d\u5386"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/bfs-de-shi-yong-chang-jing-zong-jie-ceng-xu-bian-l/"},"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/bfs-de-shi-yong-chang-jing-zong-jie-ceng-xu-bian-l/")),(0,o.kt)("h3",{id:"bfs-\u7684\u5e94\u7528\u4e8c\u6700\u77ed\u8def\u5f84"},"BFS \u7684\u5e94\u7528\u4e8c\uff1a\u6700\u77ed\u8def\u5f84"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/bfs-de-shi-yong-chang-jing-zong-jie-ceng-xu-bian-l/"},"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/bfs-de-shi-yong-chang-jing-zong-jie-ceng-xu-bian-l/")),(0,o.kt)("h2",{id:"\u4ee3\u7801\u4f18\u5316"},"\u4ee3\u7801\u4f18\u5316"),(0,o.kt)("p",null,"\u6709\u4e86\u4e0a\u8ff0\u4e86\u77e5\u8bc6\uff0c\u5c31\u53ef\u4ee5\u5bf9\u7b2c\u4e00\u6b21\u4f7f\u7528\u961f\u5217\u89e3\u51b3\u95ee\u9898\u8fdb\u884cBFS\u4f18\u5316"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u5220\u9664\u4e86nextG\uff08generation\uff09"),(0,o.kt)("li",{parentName:"ol"},"\u52a0\u5165\u5bf9\u7b2c\u4e00\u4ee3\u7684\u8bb0\u5fc6n"),(0,o.kt)("li",{parentName:"ol"},"\u628awhile\u6539\u4e3a\u4e86for"),(0,o.kt)("li",{parentName:"ol"},"\u5220\u9664\u4e86clear\u7b49\u6709nextG\u624d\u4f1a\u6709\u7684\u64cd\u4f5c")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.LinkedList;\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        List<List<Integer>> ans = new LinkedList<>();\n\n        // \u7b2c\u4e00\u5c42\n        if (root == null)\n            return ans;\n        else {\n            final List<Integer> temp = new LinkedList<>();\n            temp.add(root.val);\n            ans.add(temp);\n        }\n\n        // \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\n        if (root.left == null && root.right == null)\n            return ans;\n\n        // \u7b2c\u4e8c\u5c42\n        LinkedList<TreeNode> queue = new LinkedList<>();\n\n        if (root.left != null)\n            queue.add(root.left);\n        if (root.right != null)\n            queue.add(root.right);\n\n        // \u5176\u4ed6\u5c42\uff08>2\uff09\n        while (queue.size() > 0) {\n            List<Integer> elList = new LinkedList<>();\n\n            int n = queue.size(); // \u8bb0\u5fc6\u5f53\u524d\u96c6\u5408\u7684\u5927\u5c0f\uff0c\u65b9\u4fbf\u4e0b\u4e00\u4ee3\u52a0\u5165\u7684\u65f6\u5019\u51fa\u73b0\u95ee\u9898\n\n            // \u52a0\u5165\u4e0a\u4e00\u6b21\u7684\u7b54\u6848, \u6e05\u9664\u961f\u5217\u5143\u7d20\n            for (int i = 0; i < n; i++) {\n                final TreeNode node = queue.removeFirst();\n                elList.add(node.val);\n                // \u6dfb\u52a0\u5de6\u8282\u70b9\u548c\u53f3\u8282\u70b9\n                if (node.left != null)\n                    queue.add(node.left);\n                if (node.right != null)\n                    queue.add(node.right);\n            }\n\n            // \u6dfb\u52a0\u961f\u5217\u5143\u7d20\n            ans.add(elList);\n        }\n\n        return ans;\n    }\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u6267\u884c\u7ed3\u679c\uff1a \u901a\u8fc7",(0,o.kt)("br",{parentName:"p"}),"\n","\u6267\u884c\u7528\u65f6\uff1a0 ms, \u5728\u6240\u6709 Java \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 100.00% \u7684\u7528\u6237",(0,o.kt)("br",{parentName:"p"}),"\n","\u5185\u5b58\u6d88\u8017\uff1a41.2 MB, \u5728\u6240\u6709 Java \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 39.91% \u7684\u7528\u6237")))}c.isMDXComponent=!0}}]);