"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1762],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>m});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),s=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},u=function(e){var n=s(e.components);return t.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(r),m=a,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return r?t.createElement(f,l(l({ref:n},u),{},{components:r})):t.createElement(f,l({ref:n},u))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=r[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7947:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var t=r(87462),a=(r(67294),r(3905));const o={},l="\u76f8\u540c\u7684\u6811",i={unversionedId:"Java/leetcode/src/BinaryTree/\u76f8\u540c\u7684\u6811",id:"Java/leetcode/src/BinaryTree/\u76f8\u540c\u7684\u6811",title:"\u76f8\u540c\u7684\u6811",description:"https://leetcode-cn.com/problems/same-tree/",source:"@site/docs/Java/leetcode/src/BinaryTree/100-\u76f8\u540c\u7684\u6811.md",sourceDirName:"Java/leetcode/src/BinaryTree",slug:"/Java/leetcode/src/BinaryTree/\u76f8\u540c\u7684\u6811",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u76f8\u540c\u7684\u6811",draft:!1,editUrl:"https://github.com/zhiyu1998/Computer-Science-Learn-Notes/edit/master/docs/Java/leetcode/src/BinaryTree/100-\u76f8\u540c\u7684\u6811.md",tags:[],version:"current",sidebarPosition:100,frontMatter:{},sidebar:"sidebars",previous:{title:"\u6062\u590d\u4e8c\u53c9\u641c\u7d22\u6811",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u6062\u590d\u4e8c\u53c9\u641c\u7d22\u6811"},next:{title:"\u5bf9\u79f0\u4e8c\u53c9\u6811",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u5bf9\u79f0\u4e8c\u53c9\u6811"}},c={},s=[{value:"\u9898\u76ee\u63cf\u8ff0",id:"\u9898\u76ee\u63cf\u8ff0",level:2},{value:"\u7b2c\u4e00\u60f3\u6cd5\uff1a\u4efb\u4f55\u904d\u5386\u65b9\u6cd5+\u5224\u65ad",id:"\u7b2c\u4e00\u60f3\u6cd5\u4efb\u4f55\u904d\u5386\u65b9\u6cd5\u5224\u65ad",level:2},{value:"\u7cbe\u7b80\u5199\u6cd5",id:"\u7cbe\u7b80\u5199\u6cd5",level:2}],u={toc:s};function p(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u76f8\u540c\u7684\u6811"},"\u76f8\u540c\u7684\u6811"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/same-tree/"},"https://leetcode-cn.com/problems/same-tree/")),(0,a.kt)("h2",{id:"\u9898\u76ee\u63cf\u8ff0"},"\u9898\u76ee\u63cf\u8ff0"),(0,a.kt)("p",null,"\u7ed9\u4f60\u4e24\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 p \u548c q \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u8fd9\u4e24\u68f5\u6811\u662f\u5426\u76f8\u540c\u3002"),(0,a.kt)("p",null,"\u5982\u679c\u4e24\u4e2a\u6811\u5728\u7ed3\u6784\u4e0a\u76f8\u540c\uff0c\u5e76\u4e14\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u5219\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684"),(0,a.kt)("h2",{id:"\u7b2c\u4e00\u60f3\u6cd5\u4efb\u4f55\u904d\u5386\u65b9\u6cd5\u5224\u65ad"},"\u7b2c\u4e00\u60f3\u6cd5\uff1a\u4efb\u4f55\u904d\u5386\u65b9\u6cd5+\u5224\u65ad"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u672c\u6b21\u65b9\u6cd5\u91c7\u53d6\u4e2d\u5e8f\u904d\u5386"),(0,a.kt)("li",{parentName:"ol"},"\u9996\u5148\u5224\u65ad\u7a7a\u7684\u60c5\u51b5\u76f4\u63a5\u8fd4\u56de"),(0,a.kt)("li",{parentName:"ol"},"\u5224\u65ad\u5982\u679c\u6709\u4e00\u8fb9\u4e3a\u7a7a\uff0c\u53e6\u4e00\u8fb9\u4e0d\u4e3a\u7a7a\u7684\u60c5\u51b5\uff0c\u6b64\u65f6\u4e5f\u4e0d\u662f\u76f8\u540c\u7684\u6811"),(0,a.kt)("li",{parentName:"ol"},"\u5224\u65ad\u4e24\u8fb9\u7684\u503c\u662f\u5426\u76f8\u7b49\uff0c\u5b8c\u6210\u7b97\u6cd5")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    private boolean isSame = true;\n\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        inOrder(p, q);\n        return isSame;\n    }\n\n    private void inOrder(TreeNode p, TreeNode q) {\n        if ( p == null && q==null )\n            return;\n        if ( p == null && q != null ) {\n            isSame = false;\n            return;\n        } else if ( p != null && q == null ) {\n            isSame = false;\n            return;\n        }\n\n        inOrder(p.left, q.left);\n\n        if ( p.val != q.val ) {\n            isSame = false;\n            return;\n        }\n\n        inOrder(p.right, q.right);\n    }\n}\n")),(0,a.kt)("h2",{id:"\u7cbe\u7b80\u5199\u6cd5"},"\u7cbe\u7b80\u5199\u6cd5"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u6807\u7b7e\uff1a\u6df1\u5ea6\u4f18\u5148\u904d\u5386"),(0,a.kt)("li",{parentName:"ul"},"\u7ec8\u6b62\u6761\u4ef6\u4e0e\u8fd4\u56de\u503c\uff1a\n\u5f53\u4e24\u68f5\u6811\u7684\u5f53\u524d\u8282\u70b9\u90fd\u4e3a null \u65f6\u8fd4\u56de true\n\u5f53\u5176\u4e2d\u4e00\u4e2a\u4e3a null \u53e6\u4e00\u4e2a\u4e0d\u4e3a null \u65f6\u8fd4\u56de false\n\u5f53\u4e24\u4e2a\u90fd\u4e0d\u4e3a\u7a7a\u4f46\u662f\u503c\u4e0d\u76f8\u7b49\u65f6\uff0c\u8fd4\u56de false"),(0,a.kt)("li",{parentName:"ul"},"\u6267\u884c\u8fc7\u7a0b\uff1a\u5f53\u6ee1\u8db3\u7ec8\u6b62\u6761\u4ef6\u65f6\u8fdb\u884c\u8fd4\u56de\uff0c\u4e0d\u6ee1\u8db3\u65f6\u5206\u522b\u5224\u65ad\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u662f\u5426\u76f8\u540c\uff0c\u5176\u4e2d\u8981\u6ce8\u610f\u4ee3\u7801\u4e2d\u7684\u77ed\u8def\u6548\u5e94"),(0,a.kt)("li",{parentName:"ul"},"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)O(n)O(n)\uff0cnnn \u4e3a\u6811\u7684\u8282\u70b9\u4e2a\u6570")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean isSameTree(TreeNode root1, TreeNode root2) {\n        // \u90fd\u4e3a\u7a7a\u7684\u8bdd\uff0c\u663e\u7136\u76f8\u540c\n        if (root1 == null && root2 == null) return true;\n        // \u4e00\u4e2a\u4e3a\u7a7a\uff0c\u4e00\u4e2a\u975e\u7a7a\uff0c\u663e\u7136\u4e0d\u540c\n        if (root1 == null || root2 == null) return false;\n        // \u4e24\u4e2a\u90fd\u975e\u7a7a\uff0c\u4f46 val \u4e0d\u4e00\u6837\u4e5f\u4e0d\u884c\n        if (root1.val != root2.val) return false;\n\n        // root1 \u548c root2 \u8be5\u6bd4\u7684\u90fd\u6bd4\u5b8c\u4e86\n        return isSameTree(root1.left, root2.left)\n                && isSameTree(root1.right, root2.right);\n    }\n}\n\n")))}p.isMDXComponent=!0}}]);