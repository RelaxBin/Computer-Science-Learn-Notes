"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4434],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=u;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,l[1]=a;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},95820:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const i={},l="\u6392\u5e8f\u94fe\u8868",a={unversionedId:"Java/leetcode/src/LinkedList/\u6392\u5e8f\u94fe\u8868",id:"Java/leetcode/src/LinkedList/\u6392\u5e8f\u94fe\u8868",title:"\u6392\u5e8f\u94fe\u8868",description:"https://leetcode.cn/problems/sort-list/",source:"@site/docs/Java/leetcode/src/LinkedList/148-\u6392\u5e8f\u94fe\u8868.md",sourceDirName:"Java/leetcode/src/LinkedList",slug:"/Java/leetcode/src/LinkedList/\u6392\u5e8f\u94fe\u8868",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/LinkedList/\u6392\u5e8f\u94fe\u8868",draft:!1,editUrl:"https://github.com/zhiyu1998/Computer-Science-Learn-Notes/edit/master/docs/Java/leetcode/src/LinkedList/148-\u6392\u5e8f\u94fe\u8868.md",tags:[],version:"current",sidebarPosition:148,frontMatter:{},sidebar:"sidebars",previous:{title:"\u91cd\u6392\u94fe\u8868",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/LinkedList/\u91cd\u6392\u94fe\u8868"},next:{title:"\u53cd\u8f6c\u94fe\u8868",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/LinkedList/\u53cd\u8f6c\u94fe\u8868"}},s={},c=[{value:"\u95ee\u9898\u63cf\u8ff0",id:"\u95ee\u9898\u63cf\u8ff0",level:2},{value:"\u60f3\u6cd51\uff1aAPI\u5f52\u5e76\u6392\u5e8f",id:"\u60f3\u6cd51api\u5f52\u5e76\u6392\u5e8f",level:2},{value:"\u81ea\u9876\u5411\u4e0b\u5f52\u5e76",id:"\u81ea\u9876\u5411\u4e0b\u5f52\u5e76",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u6392\u5e8f\u94fe\u8868"},"\u6392\u5e8f\u94fe\u8868"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/sort-list/"},"https://leetcode.cn/problems/sort-list/")),(0,o.kt)("h2",{id:"\u95ee\u9898\u63cf\u8ff0"},"\u95ee\u9898\u63cf\u8ff0"),(0,o.kt)("p",null,"\u7ed9\u4f60\u94fe\u8868\u7684\u5934\u7ed3\u70b9 ",(0,o.kt)("inlineCode",{parentName:"p"},"head")," \uff0c\u8bf7\u5c06\u5176\u6309 ",(0,o.kt)("strong",{parentName:"p"},"\u5347\u5e8f")," \u6392\u5217\u5e76\u8fd4\u56de ",(0,o.kt)("strong",{parentName:"p"},"\u6392\u5e8f\u540e\u7684\u94fe\u8868")," \u3002"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/09/14/sort_list_1.jpg",alt:null})),(0,o.kt)("h2",{id:"\u60f3\u6cd51api\u5f52\u5e76\u6392\u5e8f"},"\u60f3\u6cd51\uff1aAPI\u5f52\u5e76\u6392\u5e8f"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode sortList(ListNode head) {\n        PriorityQueue<ListNode> list = new PriorityQueue<>(new CustomComparator());\n        while (head != null) {\n            list.add(head);\n            head = head.next;\n        }\n        ListNode dummy = new ListNode();\n        ListNode p = dummy;\n        while (list.size() > 0) {\n            p.next = list.poll();\n            p = p.next;\n        }\n        p.next = null;\n        return dummy.next;\n    }\n}\n\nclass CustomComparator implements Comparator<ListNode> {\n\n    @Override\n    public int compare(ListNode node1, ListNode node2) {\n        Integer number1 = Integer.valueOf(node1.val);\n        Integer number2 = Integer.valueOf(node2.val);\n        int value =  number1.compareTo(number2);\n        //\u5143\u7d20\u4ee5\u76f8\u53cd\u7684\u987a\u5e8f\u6392\u5e8f\n        if (value < 0) {\n            return -1;\n        }\n        else if (value > 0) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n}\n\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u901a\u8fc7\n51 ms\t48.7 MB\tJava")),(0,o.kt)("h2",{id:"\u81ea\u9876\u5411\u4e0b\u5f52\u5e76"},"\u81ea\u9876\u5411\u4e0b\u5f52\u5e76"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode sortList(ListNode head) {\n        if (head == null || head.next == null) return head;\n\n        ListNode slow = head, fast = head.next;\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        ListNode tmp = slow.next;\n        slow.next = null;\n        ListNode left = sortList(head);\n        ListNode right = sortList(tmp);\n\n        ListNode dummy = new ListNode();\n        ListNode p = dummy;\n        // merge\n        while (left != null && right != null) {\n            if (left.val < right.val) {\n                p.next = left;\n                left = left.next;\n            } else {\n                p.next = right;\n                right = right.next;\n            }\n            p = p.next;\n        }\n        p.next = left != null ? left : right;\n        return dummy.next;\n    }\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u6267\u884c\u7ed3\u679c\uff1a\u901a\u8fc7"),(0,o.kt)("p",{parentName:"blockquote"},"\u6267\u884c\u7528\u65f6\uff1a8 ms, \u5728\u6240\u6709 Java \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8646.85% \u7684\u7528\u6237"),(0,o.kt)("p",{parentName:"blockquote"},"\u5185\u5b58\u6d88\u8017\uff1a49.8 MB, \u5728\u6240\u6709 Java \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8612.84% \u7684\u7528\u6237"),(0,o.kt)("p",{parentName:"blockquote"},"\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b\uff1a29 / 29")))}d.isMDXComponent=!0}}]);