"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1730],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),p=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(t),d=r,g=m["".concat(o,".").concat(d)]||m[d]||c[d]||l;return t?a.createElement(g,i(i({ref:n},u),{},{components:t})):a.createElement(g,i({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=m;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},24288:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const l={},i="\u5de5\u4f5c\u4e2d\u9047\u5230\u7684\u95ee\u9898\u53ca\u89e3\u51b3\u65b9\u6848",s={unversionedId:"others/personal_tech",id:"others/personal_tech",title:"\u5de5\u4f5c\u4e2d\u9047\u5230\u7684\u95ee\u9898\u53ca\u89e3\u51b3\u65b9\u6848",description:"* \u8fd9\u4e2a\u6587\u6863\u5c06\u4f1a\u9047\u5230\u4e00\u4e9b\u5de5\u4f5c\u4e2d\u4e0d\u662f\u7b2c\u4e00\u65f6\u95f4\u5c31\u80fd\u60f3\u5230\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u800c\u662f\u7ecf\u8fc7\u9605\u8bfb\u3001\u67e5\u9605\u76f8\u5173\u8d44\u6599\u3001\u6216\u8005\u662f\u524d\u4eba\u7684\u89e3\u51b3\u65b9\u6848\u4e2d\u5f97\u5230\u7684\u7b54\u6848\u3002",source:"@site/docs/others/personal_tech.md",sourceDirName:"others",slug:"/others/personal_tech",permalink:"/Computer-Science-Learn-Notes/docs/others/personal_tech",draft:!1,editUrl:"https://github.com/zhiyu1998/Computer-Science-Learn-Notes/edit/master/docs/others/personal_tech.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebars",previous:{title:"\u5bf9\u79f0\u7684\u4e8c\u53c9\u6811",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/\u5251\u6307offer/\u5bf9\u79f0\u7684\u4e8c\u53c9\u6811"},next:{title:"\u5e94\u5c4a\u751f\u79df\u623f",permalink:"/Computer-Science-Learn-Notes/docs/others/rent_house"}},o={},p=[{value:"\u4e24\u4e2aList\u8d4b\u503c\uff08\u5217\u8868\u5f62\u5f0f\uff09\u67d0\u4e2a\u5c5e\u6027",id:"\u4e24\u4e2alist\u8d4b\u503c\u5217\u8868\u5f62\u5f0f\u67d0\u4e2a\u5c5e\u6027",level:2},{value:"\u6df1\u62f7\u8d1d\u6e90\u7801\u5b66\u4e60",id:"\u6df1\u62f7\u8d1d\u6e90\u7801\u5b66\u4e60",level:3},{value:"\u65b9\u68481",id:"\u65b9\u68481",level:4},{value:"\u65b9\u68482",id:"\u65b9\u68482",level:4},{value:"\u65b9\u68483",id:"\u65b9\u68483",level:4},{value:"\u65b9\u68484\uff08\u738b\u724c\u65b9\u6848\uff09",id:"\u65b9\u68484\u738b\u724c\u65b9\u6848",level:4},{value:"\u5217\u8868\u8d4b\u503c",id:"\u5217\u8868\u8d4b\u503c",level:3},{value:"\u5206\u7ec4\u8fdb\u884c\u4f18\u5148\u7ea7\u6392\u5e8f",id:"\u5206\u7ec4\u8fdb\u884c\u4f18\u5148\u7ea7\u6392\u5e8f",level:2},{value:"\u5206\u9875\u540e\u6392\u5e8f\uff08\u6bcf\u9875\u6392\u5e8f\uff09",id:"\u5206\u9875\u540e\u6392\u5e8f\u6bcf\u9875\u6392\u5e8f",level:3},{value:"\u5206\u9875\u524d\u6392\u5e8f\uff08\u6574\u4f53\u6392\u5e8f\uff09",id:"\u5206\u9875\u524d\u6392\u5e8f\u6574\u4f53\u6392\u5e8f",level:3},{value:"\u5224\u65ad\u7a7a\u503c\u60c5\u51b5",id:"\u5224\u65ad\u7a7a\u503c\u60c5\u51b5",level:2},{value:"Optional",id:"optional",level:3},{value:"\u5b57\u7b26\u4e32\u5224\u7a7a",id:"\u5b57\u7b26\u4e32\u5224\u7a7a",level:3},{value:"\u4f7f\u7528Supplier<code>&lt;Object&gt; </code>var-args\u53c2\u6570\u5224\u65adnull\u503c",id:"\u4f7f\u7528supplierobject-var-args\u53c2\u6570\u5224\u65adnull\u503c",level:3},{value:"1\u30010\u66ff\u6362-\u5f02\u6216",id:"10\u66ff\u6362-\u5f02\u6216",level:2},{value:"Maven\u6784\u5efa\u95ee\u9898\uff08\u7236\u5b50\u5de5\u7a0b\uff09",id:"maven\u6784\u5efa\u95ee\u9898\u7236\u5b50\u5de5\u7a0b",level:2},{value:"HashMap-computeIfAbsent\u7528\u6cd5",id:"hashmap-computeifabsent\u7528\u6cd5",level:2},{value:"List\u8f6cMap",id:"list\u8f6cmap",level:2},{value:"Java8\u4e4b\u524d",id:"java8\u4e4b\u524d",level:3},{value:"Java 8",id:"java-8",level:3},{value:"toMap",id:"tomap",level:4},{value:"groupingBy",id:"groupingby",level:4},{value:"Apache",id:"apache",level:3},{value:"Guava",id:"guava",level:3},{value:"\u95ee\u9898\uff1akey\u503c\u91cd\u590d",id:"\u95ee\u9898key\u503c\u91cd\u590d",level:3},{value:"SQL\u6280\u5de7\u6c47\u603b",id:"sql\u6280\u5de7\u6c47\u603b",level:2},{value:"\u5224\u65ad\u5947\u6570\u7684 6 \u79cd\u65b9\u6cd5",id:"\u5224\u65ad\u5947\u6570\u7684-6-\u79cd\u65b9\u6cd5",level:3},{value:"\u5f00\u7a97\u5206\u7ec4\u6280\u5de7",id:"\u5f00\u7a97\u5206\u7ec4\u6280\u5de7",level:3},{value:"\u5de5\u5177\u7c7b\u5c01\u88c5",id:"\u5de5\u5177\u7c7b\u5c01\u88c5",level:2},{value:"BeanUtils\u5c01\u88c5",id:"beanutils\u5c01\u88c5",level:3},{value:"CopyUtils\u5c01\u88c5",id:"copyutils\u5c01\u88c5",level:3},{value:"\u5e76\u53d1\u67e5\u8be2\u6a21\u677f",id:"\u5e76\u53d1\u67e5\u8be2\u6a21\u677f",level:3},{value:"\u7ebf\u7a0b\u5de5\u5382\u5c01\u88c5",id:"\u7ebf\u7a0b\u5de5\u5382\u5c01\u88c5",level:3},{value:"\u6279\u5904\u7406\u7b80\u5355\u5c01\u88c5",id:"\u6279\u5904\u7406\u7b80\u5355\u5c01\u88c5",level:3}],u={toc:p};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u5de5\u4f5c\u4e2d\u9047\u5230\u7684\u95ee\u9898\u53ca\u89e3\u51b3\u65b9\u6848"},"\u5de5\u4f5c\u4e2d\u9047\u5230\u7684\u95ee\u9898\u53ca\u89e3\u51b3\u65b9\u6848"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u8fd9\u4e2a\u6587\u6863\u5c06\u4f1a\u9047\u5230\u4e00\u4e9b\u5de5\u4f5c\u4e2d\u4e0d\u662f\u7b2c\u4e00\u65f6\u95f4\u5c31\u80fd\u60f3\u5230\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u800c\u662f\u7ecf\u8fc7\u9605\u8bfb\u3001\u67e5\u9605\u76f8\u5173\u8d44\u6599\u3001\u6216\u8005\u662f\u524d\u4eba\u7684\u89e3\u51b3\u65b9\u6848\u4e2d\u5f97\u5230\u7684\u7b54\u6848\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u7b2c\u4e8c\u8fd9\u4e2a\u6587\u6863\u8fd8\u4f1a\u5206\u4eab\u4e00\u4e9b\u7f16\u7801\u6280\u5de7\uff0c\u5305\u62ec\u6700\u5e38\u7528\u7684Java8\uff0c\u4ee5\u53ca\u6bd4\u8f83\u65b0\u7684Java11\u3001Java17\u7684\u7528\u6cd5\u3002",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"\u4f8b\u5b50\u4e2d\u4e0d\u4f1a\u4f7f\u7528\u539f\u6765\u7684\u4ee3\u7801\uff0c\u800c\u662f\u53d8\u5411\u7684\u4ee3\u7801\u5f62\u5f0f\u5c55\u793a\uff0c\u9632\u6b62\u516c\u53f8\u4ee3\u7801\u6cc4\u9732")))),(0,r.kt)("h2",{id:"\u4e24\u4e2alist\u8d4b\u503c\u5217\u8868\u5f62\u5f0f\u67d0\u4e2a\u5c5e\u6027"},"\u4e24\u4e2aList\u8d4b\u503c\uff08\u5217\u8868\u5f62\u5f0f\uff09\u67d0\u4e2a\u5c5e\u6027"),(0,r.kt)("h3",{id:"\u6df1\u62f7\u8d1d\u6e90\u7801\u5b66\u4e60"},"\u6df1\u62f7\u8d1d\u6e90\u7801\u5b66\u4e60"),(0,r.kt)("h4",{id:"\u65b9\u68481"},"\u65b9\u68481"),(0,r.kt)("p",null,"\u5728\u7f51\u4e0a\u627e\u4e86\u4e2a\u5217\u8868\u8d4b\u503c\u7684\uff0c\u611f\u89c9\u8fd8\u53ef\u4ee5\uff08\u5f88\u50cf\u516c\u53f8\u7684\u5199\u6cd5\uff0c\u4f46\u53c8\u4e0d\u662f\uff09\uff0c\u56e0\u4e3aBeanUtils.copyProperties\u4e0d\u80fd\u8d4b\u503c\u5217\u8868"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class CopyUtil {\n\n    /**\n     * \u5bf9\u8c61\u590d\u5236\n     */\n    public static <T> T copy(Class<T> clazz, Object source) {\n        if (source == null) {\n            return null;\n        }\n        T obj = null;\n        try {\n            obj = clazz.newInstance();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n        BeanUtils.copyProperties(source, obj);\n        return obj;\n    }\n\n    /**\n     * \u5217\u8868\u590d\u5236\n     */\n    public static <T> List<T> copyList(Class<T> clazz, List source) {\n        List<T> target = new ArrayList<>();\n        if (!CollectionUtils.isEmpty(source)){\n            for (Object c: source) {\n                T obj = copy(c, clazz);\n                target.add(obj);\n            }\n        }\n        return target;\n    }\n}\n")),(0,r.kt)("h4",{id:"\u65b9\u68482"},"\u65b9\u68482"),(0,r.kt)("p",null,"\u5f53\u7136\u6211\u4e5f\u770b\u5230\u5176\u4ed6\u7684\u62f7\u8d1d\u6e90\u7801\u987a\u4fbf\u8d34\u4e0a\u6765\u5b66\u4e60\u4e0b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@FunctionalInterface\npublic interface BeanCopyUtilCallBack <S, T> {\n\n    /**\n     * \u5b9a\u4e49\u9ed8\u8ba4\u56de\u8c03\u65b9\u6cd5\n     * @param t\n     * @param s\n     */\n    void callBack(S t, T s);\n}\n\npublic class BeanCopyUtil extends BeanUtils {\n\n    /**\n     * \u96c6\u5408\u6570\u636e\u7684\u62f7\u8d1d\n     * @param sources: \u6570\u636e\u6e90\u7c7b\n     * @param target: \u76ee\u6807\u7c7b::new(eg: UserVO::new)\n     * @return\n     */\n    public static <S, T> List<T> copyListProperties(List<S> sources, Supplier<T> target) {\n        return copyListProperties(sources, target, null);\n    }\n\n\n    /**\n     * \u5e26\u56de\u8c03\u51fd\u6570\u7684\u96c6\u5408\u6570\u636e\u7684\u62f7\u8d1d\uff08\u53ef\u81ea\u5b9a\u4e49\u5b57\u6bb5\u62f7\u8d1d\u89c4\u5219\uff09\n     * @param sources: \u6570\u636e\u6e90\u7c7b\n     * @param target: \u76ee\u6807\u7c7b::new(eg: UserVO::new)\n     * @param callBack: \u56de\u8c03\u51fd\u6570\n     * @return\n     */\n    public static <S, T> List<T> copyListProperties(List<S> sources, Supplier<T> target, BeanCopyUtilCallBack<S, T> callBack) {\n        List<T> list = new ArrayList<>(sources.size());\n        for (S source : sources) {\n            T t = target.get();\n            copyProperties(source, t);\n            list.add(t);\n            if (callBack != null) {\n                // \u56de\u8c03\n                callBack.callBack(source, t);\n            }\n        }\n        return list;\n    }\n}\n")),(0,r.kt)("p",null,"\u7b2c\u4e8c\u4e2a\u7684\u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Test\npublic void listCopyUp() {\n    List<UserDO> userDOList = new ArrayList();\n    userDOList.add(new UserDO(1L, "Van", 18, 1));\n    userDOList.add(new UserDO(2L, "VanVan", 20, 2));\n    List<UserVO> userVOList = BeanCopyUtil.copyListProperties(userDOList, UserVO::new);\n    log.info("userVOList:{}",userVOList);\n}\n')),(0,r.kt)("p",null,"\u5e26\u4f1a\u56de\u6389\u7684\u4f7f\u7528\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Test\npublic void listCopyUpWithCallback() {\n    List<UserDO> userDOList = new ArrayList();\n    userDOList.add(new UserDO(1L, "Van", 18, 1));\n    userDOList.add(new UserDO(2L, "VanVan", 20, 2));\n    List<UserVO> userVOList = BeanCopyUtil.copyListProperties(userDOList, UserVO::new, (userDO, userVO) ->{\n        // \u8fd9\u91cc\u53ef\u4ee5\u5b9a\u4e49\u7279\u5b9a\u7684\u8f6c\u6362\u89c4\u5219\n        userVO.setSex(SexEnum.getDescByCode(userDO.getSex()).getDesc());\n    });\n    log.info("userVOList:{}",userVOList);\n}\n')),(0,r.kt)("h4",{id:"\u65b9\u68483"},"\u65b9\u68483"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/19312055/beanutils-copyproperties-to-copy-arraylist"},"StackOverflow"),"\u4e5f\u63d0\u4f9b\u4e86\u66b4\u529b\u7f8e\u5b66"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'FromBean fromBean = new FromBean("fromBean", "fromBeanAProp", "fromBeanBProp");\nToBean toBean = new ToBean("toBean", "toBeanBProp", "toBeanCProp");\nfor (int i = 0; i < fromBeanList.size(); i++) {\n     BeanUtils.copyProperties(toBeanList.get(i), fromBeanList.get(i));\n}\n')),(0,r.kt)("h4",{id:"\u65b9\u68484\u738b\u724c\u65b9\u6848"},"\u65b9\u68484\uff08\u738b\u724c\u65b9\u6848\uff09"),(0,r.kt)("p",null,"\u4f7f\u7528JSON\u7684\u65b9\u5f0f\u8fdb\u884c\u8d4b\u503c\uff0c\u8fd9\u4e2a\u771f\u7684\u5927\u5f00\u773c\u754c\u4e86"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// \u6d4b\u8bd5\u6570\u636e\nList<Person> ps = new ArrayList<>();\nPerson p1 = new Person("zhiyu", 12, true);\nPerson p2 = new Person("zzzs", 13, false);\nPerson p3 = new Person("kk", 14, true);\nPerson p4 = new Person("ll", 15, true);\nPerson p5 = new Person("oo", 16, true);\nps.add(p1);\nps.add(p2);\nps.add(p3);\nps.add(p4);\nps.add(p5);\n// JSON\u62f7\u8d1d\nList<Person> people = JSON.parseArray(JSON.toJSONString(ps), Person.class);\npeople.forEach(item -> {\n    System.out.println(item.getName() + item.getAge());\n});\n')),(0,r.kt)("p",null,"\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5c01\u88c5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import com.alibaba.fastjson.JSON;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.util.CollectionUtils;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Function;\n\npublic class BeanUtil {\n\n\n    /**\n     * \u5bf9\u8c61\u62f7\u8d1d\n     *\n     * @param source \u6e90\n     * @param target \u76ee\u6807\n     */\n    public static void copyProperties(Object source, Object target) {\n        if (source == null) {\n            return;\n        }\n        BeanUtils.copyProperties(source, target);\n    }\n\n    /**\n     * List \u5bf9\u8c61\u62f7\u8d1d\n     *\n     * @param list \u6e90\n     * @param <T>  \u76ee\u6807\n     * @return \u76ee\u6807\n     */\n    public static <T, E> List copyList(List<T> list, Class<E> clazz) {\n        if (CollectionUtils.isEmpty(list)) {\n            return new ArrayList();\n        }\n        return JSON.parseArray(JSON.toJSONString(list), clazz);\n    }\n\n    /**\n     * MAP\u62f7\u8d1d\n     *\n     * @param map \u6e90\n     * @return \u76ee\u6807\n     */\n    public static Map<String, Object> copyMap(Map map) {\n        if (CollectionUtils.isEmpty(map)) {\n            return new HashMap<>();\n        }\n        return JSON.parseObject(JSON.toJSONString(map));\n    }\n\n    /**\n     * json \u8f6c Map\n     *\n     * @param json\n     * @return\n     */\n    public static Map<String, Object> jsonToMap(String json) {\n        try {\n            ObjectMapper objectMapper = new ObjectMapper();\n            return objectMapper.readValue(json, Map.class);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n        return null;\n    }\n    \n    /**\n     * \u83b7\u53d6\u5bf9\u8c61 \u7a7a\u5c5e\u6027\n     * \n     * @param source\n     * @return\n     */\n    private static String[] getNullPropertyNames(Object source) {\n        BeanWrapper src = new BeanWrapperImpl(source);\n        PropertyDescriptor[] pds = src.getPropertyDescriptors();\n        Set<String> emptyNames = (Set) Arrays.stream(pds).filter((pd) -> {\n            return src.getPropertyValue(pd.getName()) == null;\n        }).map(FeatureDescriptor::getName).distinct().collect(Collectors.toSet());\n        String[] result = new String[emptyNames.size()];\n        return (String[])emptyNames.toArray(result);\n    }\n    \n    /**\n     * bean\u6570\u7ec4 \u8f6c bean\u6570\u7ec4\n     *\n     * @param source\n     * @param function\n     * @param <T>\n     * @param <R>\n     * @return\n     */\n    public static <T, R> List<R> covert2JavaBeanList(List<T> source, Function<T, R> function) {\n        if (null == source || source.size() < 0) {\n            return new ArrayList<>();\n        }\n        List<R> res = new ArrayList<>(source.size());\n        for (T t : source) {\n            res.add(function.apply(t));\n        }\n        return res;\n    }\n}\n")),(0,r.kt)("h3",{id:"\u5217\u8868\u8d4b\u503c"},"\u5217\u8868\u8d4b\u503c"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u4e00\u5f00\u59cb\u4f7f\u7528\u4e86ID\u5bf9\u5e94\uff0c\u5176\u5b9e\u4e0d\u7528\u76f4\u63a5\u987a\u5e8f\u8d4b\u503c\u5373\u53ef\n\u573a\u666f\u518d\u73b0\uff1a\u76ee\u6807\u662f\u8f6c\u6362DTO\u7684\u56fe\u7247\u96c6\u5230VO"),(0,r.kt)("ol",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ol"},"DTO\u83b7\u53d6\u5217\u8868"),(0,r.kt)("li",{parentName:"ol"},"\u521b\u5efa\u4e00\u4e2aVO"),(0,r.kt)("li",{parentName:"ol"},"\u904d\u5386DTO",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"\u6bcf\u4e00\u4e2aDTO\u8f6c\u6362\u6210VO\uff08\u5176\u4e2d\u56fe\u7247\u683c\u5f0f\u4e0d\u4e00\u6837\uff0c\u800c\u4e14\u56fe\u7247\u662f\u5217\u8868\uff09"),(0,r.kt)("li",{parentName:"ol"},"\u8bbe\u7f6e\u6bcf\u4e00\u4e2aVO\u7684\u56fe\u7247\uff0c\u6bcf\u4e2aVO\u7684\u56fe\u7247\u90fd\u4f7f\u7528List\u65b9\u5f0f\u7684Copy"),(0,r.kt)("li",{parentName:"ol"},"\u8c03\u6574\u5176\u4ed6\u72b6\u6001"))),(0,r.kt)("li",{parentName:"ol"},"\u5b8c\u6210\u8f6c\u6362"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// getDetail \u6b64\u5904\u662fFeign\u5904\u8fdb\u884c\u8c03\u7528Core,\u8fd4\u56de\u4e00\u4e2aDTO\nList<DTO> dtos = feignClient.getDetail(id);\n// \u521b\u5efa\u4e00\u4e2a\u6700\u7ec8\u8981\u8fd4\u56de\u7684VOv\nList<VO> vo = new ArrayList<>();\n// \u8f6c\u6362\u56fe\u7247\u683c\u5f0f\ndtos.forEach(dto -> {\n    // DTO\u8f6c\u6362VO\n    VO vo = CopyUtil.copy(VO.class, dto);\n    // \u591a\u4e2aDTO\u8f6c\u6362VO\u7136\u540e\u8bbe\u7f6e \u3010List\u3011\n    vo.setPictures(CopyUtil.copyList(fileVO.class, dto.getPictures()));\n    // \u5355\u4e2a\u8bbe\u7f6e(\u8fd9\u4e2a\u4e0d\u592a\u91cd\u8981) \u3010\u50cfInteger\u3001String...\u3011\n    vo.setName(Enums.getDescribe(dto.getStatus()));\n    // \u52a0\u5165\u5230VO\n    detailVO.add(vo);\n});\n")),(0,r.kt)("h2",{id:"\u5206\u7ec4\u8fdb\u884c\u4f18\u5148\u7ea7\u6392\u5e8f"},"\u5206\u7ec4\u8fdb\u884c\u4f18\u5148\u7ea7\u6392\u5e8f"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u9700\u6c42\u662f\u8fd9\u6837\uff1a\u9700\u8981\u6309\u7167\u4e00\u5b9a\u7684\u4f18\u5148\u7ea7\u8fdb\u884c\u6392\u5e8f\uff0c\u6bd4\u5982\u6570\u636e\u5e93\u6709\u8fd9\u6837\u5305\u542b\u8fd9\u6837\u7684\u5b57\u6bb5\uff08\u82b1\u8272\uff09\uff1a\u7ea2\u3001\u84dd\u3001\u767d\uff0c\u8fd9\u4e9b\u90fd\u662f\u4ee5\u5b57\u7b26\u4e32\u4e3a\u4ee3\u8868\u6ca1\u6709\u8fdb\u884c\u6570\u5b57\u7684\u6bd4\u8f83\uff0c\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u8fdb\u884c\u5206\u7ec4\u6392\u5e8f\uff1f\n\u5206\u9875\u662f\u540e\u7eed\u5728\u524d\u540e\u7aef\u8054\u8c03\u7684\u65f6\u5019\uff0c\u524d\u7aef\u8981\u6c42\u5206\u9875\u624d\u8fd9\u6837\u505a\u7684")),(0,r.kt)("p",null,"\u5728\u5206\u9875\u4e4b\u524d\u6211\u4eec\u9996\u5148\u8981\u505a\u7684\u662f\u5b9a\u4e49\u5b57\u7b26\u4e32\u7684\u4f18\u5148\u7ea7, ",(0,r.kt)("inlineCode",{parentName:"p"},"\u8d8a\u4f4e\u4f18\u5148\u7ea7\u8d8a\u9ad8"),"\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// \u8fd9\u4e2a\u5c5e\u4e8eFlowerConstant\u7c7b\npublic static final HashMap<String, Integer> flowerPriority = new HashMap<>();\nstatic {\n    flowerPriority.put(flowerEnums.RED.name(), 1);\n    flowerPriority.put(flowerEnums.BLUE.name(), 2);\n    flowerPriority.put(flowerEnums.WHITE.name(), 3);\n}\n")),(0,r.kt)("h3",{id:"\u5206\u9875\u540e\u6392\u5e8f\u6bcf\u9875\u6392\u5e8f"},"\u5206\u9875\u540e\u6392\u5e8f\uff08\u6bcf\u9875\u6392\u5e8f\uff09"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u9996\u5148\u901a\u8fc7\u67d0\u79cd\u624b\u6bb5\uff08mybatis\u3010\u7528\u7684\u8fd9\u4e2a\u3011\u3001jpa\uff09\u67e5\u51fa\u6765\u4e86\u5206\u9875\u6570\u636e"),(0,r.kt)("li",{parentName:"ol"},"\u901a\u8fc7Stream\u548cComparator\u8fdb\u884c\u6bd4\u8f83\u6392\u5e8f")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// \u901a\u8fc7\u4e00\u4e9b\u53c2\u6570\u67e5\u627e\u5230\u6570\u636e\nIPage<Flower> filteredFlowers = baseMapper.queryFlowers(...params, page);\n// \u6392\u5e8f(\u6838\u5fc3)\nList<Flower> sortedFlowers = filteredFlowers.getRecords()\n        .stream()\n        .sorted(Comparator.comparing(Flower::getColor, (p1, p2) -> {\n            if (StringUtils.isEmpty(p1)) {\n                return -1;\n            } else if (StringUtils.isEmpty(p2)) {\n                return 1;\n            } else {\n                return FlowerConstant.flowerPriority.get(p1) - FlowerConstant.flowerPriority.get(p2);\n            }\n        })).collect(Collectors.toList());\n// \u5206\u9875\u914d\u7f6e;\npage.setTotal(...);\nres.setSize(...);\nres.setRecords(...);\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u8fd9\u4e2a\u7684\u7ed3\u679c\u5c31\u662f\u6bcf\u9875\u90fd\u662f\u6309\u7167\u8fd9\u4e2a\u987a\u5e8f\u8fdb\u884c\u6392\u5e8f\uff0c\u4e0e\u4e0b\u9762\u7684\u4e0d\u540c\u662f\u4e0b\u9762\u662f\u6574\u4f53\u6392\u5e8f\u518d\u5206\u9875")),(0,r.kt)("p",null,"\u770b\u5230Hutool\u4e5f\u6709\u76f8\u5173\u7684\u89e3\u51b3\u65b9\u6848\uff1a"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"ListUtil\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4f7f\u7528sortByProperty\u5373\u53ef\uff0c\u4f46\u662f\u7279\u6b8a\u60c5\u51b5\u53ef\u4ee5\u4f7f\u7528\u3002"),(0,r.kt)("p",{parentName:"blockquote"},"\u6ce8\uff1aCollUtil\u4e5f\u6709\u7c7b\u4f3c\u7684\u89e3\u51b3\u65b9\u6848\uff1asortPageAll\u3001sortPageAll2\u65b9\u6cd5")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public static void main(String[] args) {\n    //Integer\u6bd4\u8f83\u5668\n    @Data\n    @AllArgsConstructor\n    class TestBean{\n        private int order;\n        private String name;\n    }\n\n    final HashMap<String, Integer> flowerPriority = new HashMap<>();\n    {\n        flowerPriority.put("\u7ea2", 1);\n        flowerPriority.put("\u84dd", 2);\n        flowerPriority.put("\u767d", 3);\n    }\n\n    final List<TestBean> beanList = ListUtil.toList(\n        new TestBean(2, "\u7ea2"),\n        new TestBean(1, "\u84dd"),\n        new TestBean(5, "\u767d"),\n        new TestBean(4, "\u7ea2"),\n        new TestBean(3, "\u84dd")\n    );\n\n    List<TestBean> sorted = ListUtil.sort(beanList, (o1, o2) -> {\n        if (CharSequenceUtil.isEmpty(o1.getName())) {\n            return -1;\n        } else if (CharSequenceUtil.isEmpty(o2.getName())) {\n            return 1;\n        } else {\n            return flowerPriority.get(o1.getName()).compareTo(flowerPriority.get(o2.getName()));\n        }\n    });\n    sorted.forEach(System.out::println);\n}\n')),(0,r.kt)("h3",{id:"\u5206\u9875\u524d\u6392\u5e8f\u6574\u4f53\u6392\u5e8f"},"\u5206\u9875\u524d\u6392\u5e8f\uff08\u6574\u4f53\u6392\u5e8f\uff09"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// \u901a\u8fc7\u4e00\u4e9b\u53c2\u6570\u67e5\u627e\u5230\u6570\u636e\nIPage<Flower> filteredFlowers = baseMapper.queryFlowers(...params, page);\n// \u5206\u9875\u914d\u7f6e;\npage.setTotal(...);\nres.setSize(...);\nres.setRecords(...);\n")),(0,r.kt)("p",null,"\u6b64\u65f6\u7684SQL\u9700\u8981\u7740\u91cd\u8bb2\u4e00\u8bb2\uff1a\n\u9996\u5148\u518d\u4f20\u5165\u53c2\u6570\u4e0a\u5ffd\u7565\u5176\u4ed6\u53c2\u6570\uff0c\u6211\u4eec\u628a\u4f18\u5148\u7ea7map\u4f20\u8fdb\u6765(",(0,r.kt)("inlineCode",{parentName:"p"},"HashMap<String, Integer>"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'IPage<HlImmunePlan> queryFlowers(...,\n                                @Param("enums") HashMap<String, Integer> enums,\n                                Page<Flowers> page);\n')),(0,r.kt)("p",null,"\u5728\u52a8\u6001SQL\u5904\u6211\u4eec\u91c7\u7528FOREACH + CASE WHEN THEN \u7684\u65b9\u5f0f\u8fdb\u884c\u52a8\u6001\u6392\u5e8f\uff0c\u53ef\u4ee5\u5ffd\u7565\u6389if\u8fd9\u4e9b\u6807\u7b7e\u7684\u7528\u6cd5\uff0c\u56e0\u4e3a\u5f88\u5e38\u89c4\uff0c\u91cd\u70b9\u5173\u6ce8foreach\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'<select id="queryFlowers" resultMap="BaseResultMap">\n    SELECT\n    <include refid="Base_Column_List"/>\n    FROM flowers f\n    <where>\n        <if test="... != null and ... != \'\'">\n            AND f.... = #{...}\n        </if>\n    </where>\n    ORDER BY CASE\n    <foreach collection="enums.entrySet()" index="key" item="val">\n        WHEN p.status = \'${key}\' THEN\n            ${val}\n    </foreach>\n    ELSE 5\n        END\n</select>\n')),(0,r.kt)("h2",{id:"\u5224\u65ad\u7a7a\u503c\u60c5\u51b5"},"\u5224\u65ad\u7a7a\u503c\u60c5\u51b5"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u8fd9\u4e2a\u60c5\u51b5\u662f\u975e\u5e38\u666e\u904d\u7684\uff0c\u5c24\u5176\u524d\u540e\u7aef\u8054\u8c03\u7684\u65f6\u5019\u6700\u5bb9\u6613\u51fa\u9519\uff0c\u81ea\u5df1\u81ea\u6d4b\u7684\u65f6\u5019\u6709\u65f6\u5019\u8fd8\u770b\u4e0d\u51fa\u6765\u63a7\u5236\u95ee\u9898\uff0c\u53ea\u80fd\u865a\u7a7a\u5199\u4ee3\u7801\u7684\u65f6\u5019\u51ed\u7a7a\u60f3\u8c61\u662f\u5426\u4f1a\u6709\u7a7a\u503c\u60c5\u51b5\uff0c\u5224\u65ad\u7a7a\u503c\u60c5\u51b5\u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u5c24\u5176\u662f\u4f7f\u7528Hutool\u4f1a\u66f4\u52a0\u65b9\u4fbf\uff0c\u4f46\u662f\u6709\u4e9b\u60c5\u51b5\u80af\u5b9a\u9700\u8981\u4f7f\u7528\u5176\u4ed6\u65b9\u6cd5")),(0,r.kt)("h3",{id:"optional"},"Optional"),(0,r.kt)("p",null,"\u6211\u5728\u516c\u53f8\u9047\u5230\u4e00\u4e2a\u60c5\u51b5\u5c31\u662f\u4f7f\u7528Map\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"addAll"),"\u7684\u60c5\u51b5\uff0c\u5982\u679c\u67e5\u51fa\u6765\u7684\u6570\u636e\u662f\u7a7a\u503c\uff0c\u90a3\u4e48\u5c31\u4f1a\u62a5\u9519\uff0c\u53ef\u4ee5\u4f7f\u7528Optional\u89e3\u51b3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"HashMap<String, List<dto>> map = new HashMap<>();\n// \u4e2d\u95f4\u64cd\u4f5c\uff08\u4f8b\u5982\u52a0\u5165\u5143\u7d20\u7b49\u7b49\uff09\nOptional\n    .ofNullable(map.get(xxx)\n    .ifPresent(dtos::addAll);\n")),(0,r.kt)("p",null,"\u94fe\u5f0f\u5224\u7a7a\uff1a\u94fe\u5f0f\u8c03\u7528\u5982\u679c\u51fa\u73b0\u7a7a\u503c\u4e5f\u4f1a\u62a5\u7a7a\u6307\u9488\u5f02\u5e38\uff0c\u4f7f\u7528Optional+map\u5373\u53ef\u89e3\u51b3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"String address = Optional.ofNullable(order)\n    .map(Order::getExpressInfo)\n    .map(Order::getAddress)\n    .orElse(null);\n")),(0,r.kt)("h3",{id:"\u5b57\u7b26\u4e32\u5224\u7a7a"},"\u5b57\u7b26\u4e32\u5224\u7a7a"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Stream.of")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"String s = Stream.of(str1, str2, str3)\n    .filter(Objects::nonNull)\n    .findFirst()\n    .orElse(str4);\n")),(0,r.kt)("p",null,"\u5c01\u88c5\u51fd\u6570\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public static Optional<String> firstNonNull(String... strings) {\n    return Arrays.stream(strings)\n            .filter(Objects::nonNull)\n            .findFirst();\n}\n// such as \nString s = firstNonNull(str1, str2, str3).orElse(str4);\n")),(0,r.kt)("h3",{id:"\u4f7f\u7528supplierobject-var-args\u53c2\u6570\u5224\u65adnull\u503c"},"\u4f7f\u7528Supplier",(0,r.kt)("inlineCode",{parentName:"h3"},"<Object> "),"var-args\u53c2\u6570\u5224\u65adnull\u503c"),(0,r.kt)("p",null,"\u8fd9\u4e2a\u662f\u770b\u7f51\u4e0a\u5927\u4f6c\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u80fd\u6bd4\u8f83\u9ebb\u70e6\uff0c\u8fd8\u662f\u4f18\u5148\u4f7f\u7528Optional"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"}," boolean isValid = isValid(() -> address, // first level\n                              () -> address.getCity(),   // second level\n                              () -> address.getCountry(),// second level\n                              () -> address.getStreet(), // second level\n                              () -> address.getZip(),    // second level\n                              () -> address.getCountry() // third level\n                                           .getISO()\n@SafeVarargs\npublic static boolean isValid(Supplier<Object>... suppliers) {\n    for (Supplier<Object> supplier : suppliers) {\n        if (Objects.isNull(supplier.get())) {\n            // log, handle specific thing if required\n            return false;\n        }\n    }\n    return true;\n}\n")),(0,r.kt)("h2",{id:"10\u66ff\u6362-\u5f02\u6216"},"1\u30010\u66ff\u6362-\u5f02\u6216"),(0,r.kt)("p",null,"\u91c7\u7528`\u5f02\u6216(^)\u601d\u60f3"),(0,r.kt)("p",null,"0\u548c1\u4e92\u6362\uff08\u539f\u6570\u503c\u5f02\u6216\u4e0a 1\uff09"),(0,r.kt)("p",null,"a=0\uff1b   a^1=1;"),(0,r.kt)("p",null,"a=1;    a^1=0;"),(0,r.kt)("p",null,"0\u548c2 \u4e92\u6362\uff08\u539f\u6570\u503c\u5f02\u6216\u4e0a 2\uff09"),(0,r.kt)("p",null,"a=0;    a^2=2;"),(0,r.kt)("p",null,"a=2;    a^2=0;"),(0,r.kt)("p",null,"1\u548c2 \u4e92\u6362\uff08\u539f\u6570\u503c\u5f02\u6216\u4e0a 3\uff09"),(0,r.kt)("p",null,"a=1;    a^3=2;"),(0,r.kt)("p",null,"a=2;    a^3=1;"),(0,r.kt)("h2",{id:"maven\u6784\u5efa\u95ee\u9898\u7236\u5b50\u5de5\u7a0b"},"Maven\u6784\u5efa\u95ee\u9898\uff08\u7236\u5b50\u5de5\u7a0b\uff09"),(0,r.kt)("p",null,"\u5982\u679c\u7236\u5de5\u7a0b\u4f7f\u7528\u7684Spring init\u521b\u5efa\u7684\uff0c\u90a3\u4e48\u672b\u5c3e\u5b83\u4f1a\u7ed9\u4f60\u6dfb\u52a0\u4e00\u4e2abuild\uff0c\u5220\u4e86\u5373\u53ef\uff0c\u4e0d\u7136\u540e\u7eed\u51fa\u95ee\u9898\u5b50\u5de5\u7a0b\u7684\u6709\u4e9b\u4f9d\u8d56\u90fd\u6dfb\u52a0\u4e0d\u4e0a"),(0,r.kt)("p",null,"\u4ee5\u4e0b\u5c31\u662f\u521b\u5efa\u65f6\u4f1a\u81ea\u52a8\u751f\u6210\u7684\uff08\u7236\uff09\uff0c\u5220\u6389\u5373\u53ef\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n            <configuration>\n                <excludes>\n                    <exclude>\n                        <groupId>org.projectlombok</groupId>\n                        <artifactId>lombok</artifactId>\n                    </exclude>\n                </excludes>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u8981\u8bb0\u4f4f\uff1aspring-boot-maven-plugin\u63d2\u4ef6\u5728\u6253Jar\u5305\u65f6\u4f1a\u5f15\u5165\u4f9d\u8d56\u5305")),(0,r.kt)("h2",{id:"hashmap-computeifabsent\u7528\u6cd5"},"HashMap-computeIfAbsent\u7528\u6cd5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.*; \n  \npublic class GFG { \n  \n    // Main method \n    public static void main(String[] args) \n    { \n  \n        Map<Integer, String> map = new Hashtable<>(); \n        map.put(1, "100RS"); \n        map.put(2, "500RS"); \n        map.put(3, "1000RS"); \n  \n        System.out.println("hashTable: "\n                           + map.toString()); \n  \n        // \u4e0d\u5b58\u5728\u5065\u503c\u5bf9\u7684\u60c5\u51b5\n        // \u4f7f\u7528computeIfAbsent\u65b9\u6cd5\n        map.computeIfAbsent(4, k -> "600RS"); \n  \n        // \u5982\u679c\u5b58\u5728\u4e0d\u4f1a\u6709\u4efb\u4f55\u5f71\u54cd\n        // key\u4e3a1\u5df2\u7ecf\u5b58\u5728\u4e86 \n        map.computeIfAbsent(1, k -> "800RS"); \n  \n        System.out.println("new hashTable: "\n                           + map); \n    } \n} \n// ============================================\nhashTable\uff1a{3 = 1000RS\uff0c2 = 500RS\uff0c1 = 100RS}\nnew hashTable\uff1a{4 = 600RS\uff0c3 = 1000RS\uff0c2 = 500RS\uff0c1 = 100RS}\n')),(0,r.kt)("h2",{id:"list\u8f6cmap"},"List\u8f6cMap"),(0,r.kt)("h3",{id:"java8\u4e4b\u524d"},"Java8\u4e4b\u524d"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public Map<Integer, Animal> convertListBeforeJava8(List<Animal> list) {\n    Map<Integer, Animal> map = new HashMap<>();\n    for (Animal animal : list) {\n        map.put(animal.getId(), animal);\n    }\n    return map;\n}\n")),(0,r.kt)("h3",{id:"java-8"},"Java 8"),(0,r.kt)("h4",{id:"tomap"},"toMap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"}," public Map<Integer, Animal> convertListAfterJava8(List<Animal> list) {\n    Map<Integer, Animal> map = list.stream()\n      .collect(Collectors.toMap(Animal::getId, Function.identity()));\n    return map;\n}\n")),(0,r.kt)("h4",{id:"groupingby"},"groupingBy"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"HashMap<String, List<HlImmuneTodoListDtoResult>> planMap = plans.stream()\n        .map(this::planApply)\n        .collect(Collectors.groupingBy(HlImmuneTodoListDtoResult::getStatus, HashMap::new, Collectors.toList()));\nHashMap<String, List<HlImmuneTodoListDtoResult>> jobMap = jobs.stream()\n        .map(this::jobApply)\n        .collect(Collectors.groupingBy(HlImmuneTodoListDtoResult::getStatus, HashMap::new, Collectors.toList()));\n")),(0,r.kt)("h3",{id:"apache"},"Apache"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public Map<Integer, Animal> convertListWithApacheCommons2(List<Animal> list) {\n    Map<Integer, Animal> map = new HashMap<>();\n    MapUtils.populateMap(map, list, Animal::getId);\n    return map;\n}\n")),(0,r.kt)("h3",{id:"guava"},"Guava"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public Map<Integer, Animal> convertListWithGuava(List<Animal> list) {\n    Map<Integer, Animal> map = Maps\n      .uniqueIndex(list, Animal::getId);\n    return map;\n}\n")),(0,r.kt)("h3",{id:"\u95ee\u9898key\u503c\u91cd\u590d"},"\u95ee\u9898\uff1akey\u503c\u91cd\u590d"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u4e00\u822c\u51fa\u73b0\u6b64\u95ee\u9898\u90fd\u4f1a\u8fd0\u884c java.lang.IllegalStateException: Duplicate key ")),(0,r.kt)("p",null," (key1, key2) -> key1 \u8868\u793a\u5982\u679c\u51fa\u73b0\u91cd\u590d\u4f7f\u7528\u7b2c\u4e00\u4e2a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// \u4f7f\u7528key1\n public Map<Integer, Animal> convertListAfterJava8(List<Animal> list) {\n    Map<Integer, Animal> map = list.stream()\n      .collect(Collectors.toMap(Animal::getId, Function.identity(), (key1, key2) -> key1));\n    return map;\n}\n// \u5982\u679c\u662fGuava\u51fa\u73b0\u91cd\u590d\u952e\u4f7f\u7528\uff1aImmutableListMultimap\nMultimaps.index()\n")),(0,r.kt)("p",null,"Guava\u5199\u6cd5(value\u662f\u5217\u8868)\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"userList.stream().collect(Collectors.toMap(User::getId,\ne -> Lists.newArrayList(e.getUsername()),\n(List<String> oldList, List<String> newList) -> {\n    oldList.addAll(newList);\n    return oldList;\n}));\n")),(0,r.kt)("h2",{id:"sql\u6280\u5de7\u6c47\u603b"},"SQL\u6280\u5de7\u6c47\u603b"),(0,r.kt)("h3",{id:"\u5224\u65ad\u5947\u6570\u7684-6-\u79cd\u65b9\u6cd5"},"\u5224\u65ad\u5947\u6570\u7684 6 \u79cd\u65b9\u6cd5"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/not-boring-movies/"},"620. \u6709\u8da3\u7684\u7535\u5f71 - \u529b\u6263\uff08LeetCode\uff09"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"mod(x, 2) = 1 \uff0c\u5982\u679c\u4f59\u6570\u662f 1 \u5c31\u662f\u5947\u6570\u3002"),(0,r.kt)("li",{parentName:"ul"},"power(-1, x) = -1 \uff0c \u5982\u679c\u7ed3\u679c\u662f -1 \u5c31\u662f\u5947\u6570"),(0,r.kt)("li",{parentName:"ul"},"x % 2 = 1 \uff0c\u5982\u679c\u4f59\u6570\u662f 1 \u5c31\u662f\u5947\u6570\u3002"),(0,r.kt)("li",{parentName:"ul"},"x & 1 = 1 \uff0c\u5982\u679c\u662f 1 \u5c31\u662f\u5947\u6570"),(0,r.kt)("li",{parentName:"ul"},"x regexp '","[1, 3, 5, 7, 9]","$' = 1 \u5982\u679c\u4e3a 1 \u5c31\u662f\u5947\u6570"),(0,r.kt)("li",{parentName:"ul"},"x>>1<<1 != x \u5982\u679c\u53f3\u79fb\u4e00\u4f4d\u5728\u5de6\u79fb\u4e00\u4f4d\u4e0d\u7b49\u4e8e\u539f\u503c\uff0c\u5c31\u662f\u5947\u6570")),(0,r.kt)("h3",{id:"\u5f00\u7a97\u5206\u7ec4\u6280\u5de7"},"\u5f00\u7a97\u5206\u7ec4\u6280\u5de7"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u5982\u679c\u8981\u5206\u7ec4\u540e\u8fdb\u884c\u8ba1\u6570\u4f7f\u7528")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"COUNT(*) OVER (PARTITION BY XXX)\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u5982\u679c\u8981\u5bf9\u67d0\u4e00\u4e2a\u5c5e\u6027\u8fdb\u884c\u6392\u540d\u53ef\u4ee5")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"id-RANK() OVER (ORDER BY xxx)\n")),(0,r.kt)("h2",{id:"\u5de5\u5177\u7c7b\u5c01\u88c5"},"\u5de5\u5177\u7c7b\u5c01\u88c5"),(0,r.kt)("h3",{id:"beanutils\u5c01\u88c5"},"BeanUtils\u5c01\u88c5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Spring-BeanUtils.copyProperties\u6269\u5c55\u7c7b\n *\n * @author zhiyu\n * @description \u89e3\u51b3BeanUtils.copyProperties\u4e0d\u80fd\u6d45\u62f7\u8d1d\u5217\u8868\u53ca\u5176\u4ed6\u6269\u5c55\n * @since 2022/10/13\n */\npublic class BeanExtUtils extends BeanUtils {\n\n    /**\n     * \u5c06\u6e90\u5b9e\u4f8b\u7684\u5185\u5bb9\u590d\u5236\u5230\u76ee\u6807\u5b9e\u4f8b\n     * @param source        \u6e90\u6570\u636e\n     * @param target        \u76ee\u6807\u7c7b\u578b\n     * @param ignoreNull    \u662f\u5426\u5ffd\u7565\u7a7a\u503c\n     * @param <S>           \u6e90\u7c7b\u578b\n     * @param <T>           \u76ee\u6807\u7c7b\u578b\n     * @return\n     */\n    public static <S, T> T copyProperties(S source, T target, boolean ignoreNull) {\n        if (source == null) {\n            return target;\n        }\n        if (ignoreNull) {\n            copyProperties(source, target, getNullPropertyNames(source));\n        } else {\n            copyProperties(source, target);\n        }\n\n        return target;\n    }\n\n    /**\n     * \u5c06\u6e90\u5b9e\u4f8b\u7684\u5185\u5bb9\u590d\u5236\u5230\u76ee\u6807\u5b9e\u4f8b\n     * @param source \u6e90\u6570\u636e\n     * @param target \u76ee\u6807\u7c7b\u578b\n     * @param <S>    \u6e90\u7c7b\u578b\n     * @param <T>    \u76ee\u6807\u7c7b\u578b\n     * @return\n     */\n    public static <S, T> T copyProperties(S source, Supplier<T> target) {\n        T result = target.get();\n        if (source == null) {\n            return result;\n        }\n        copyProperties(source, result);\n        return result;\n    }\n\n    /**\n     * \u4f7f\u7528\u573a\u666f\uff1aList\u4e2d\u6bcf\u4e2aJava\u5b9e\u4f53\u7684\u5faa\u73af\u590d\u5236\n     * @param sources           \u6e90\u5b9e\u4f53\n     * @param targetSupplier    \u76ee\u6807\u5b9e\u4f53\n     * @param <S>               \u6e90\u5b9e\u4f53\u5217\u8868\u7684\u7c7b\u578b\n     * @param <T>               \u76ee\u6807\u5b9e\u4f53\u5217\u8868\u7684\u7c7b\u578b\n     * @return\n     */\n    public static <S, T> List<T> copyListProperties(List<S> sources, Supplier<T> targetSupplier) {\n        if (sources == null || sources.isEmpty()) {\n            return new ArrayList<>(0);\n        }\n        List<T> list = new ArrayList<>(sources.size());\n        for (S source : sources) {\n            T target = copyProperties(source, targetSupplier);\n            list.add(target);\n        }\n        return list;\n    }\n\n    /**\n     * \u83b7\u53d6\u7ed9\u5b9a\u5bf9\u8c61\u7684\u7a7a\u5b57\u6bb5\u540d\u79f0\u6570\u7ec4\n     * @param source \u76ee\u6807\u5bf9\u8c61\n     * @return \u503c\u4e3a null \u7684\u5b57\u6bb5\u540d\u79f0\u6570\u7ec4\n     */\n    public static String[] getNullPropertyNames(Object source) {\n        final BeanWrapper src = new BeanWrapperImpl(source);\n        java.beans.PropertyDescriptor[] pds = src.getPropertyDescriptors();\n\n        Set<String> emptyNames = new HashSet<>();\n        for (java.beans.PropertyDescriptor pd : pds) {\n            Object srcValue = src.getPropertyValue(pd.getName());\n            if (srcValue == null) {\n                emptyNames.add(pd.getName());\n            }\n        }\n        String[] result = new String[emptyNames.size()];\n        return emptyNames.toArray(result);\n    }\n}\n")),(0,r.kt)("h3",{id:"copyutils\u5c01\u88c5"},"CopyUtils\u5c01\u88c5"),(0,r.kt)("p",null,"\u5e93\uff1acglib"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class CopyUtils {\n    public CopyUtils() {\n    }\n\n    public static <T, S> T copySingle(Class<T> targetClazz, S sourceData) {\n        if (sourceData == null) {\n            return null;\n        } else {\n            BeanCopier beanCopier = BeanCopier.create(sourceData.getClass(), targetClazz, false);\n            return copySingle(targetClazz, sourceData, beanCopier);\n        }\n    }\n\n    private static <T, S> T copySingle(Class<T> targetClazz, S sourceData, BeanCopier beanCopier) {\n        try {\n            T temp = targetClazz.getDeclaredConstructor().newInstance();\n            beanCopier.copy(sourceData, temp, (Converter)null);\n            return temp;\n        } catch (Exception var5) {\n            return null;\n        }\n    }\n\n    public static <T, S> List<T> copyMulti(Class<T> targetClazz, List<S> sourceDataList) {\n        if (CollectionUtils.isEmpty(sourceDataList)) {\n            return new ArrayList();\n        } else {\n            List<T> result = new ArrayList(sourceDataList.size());\n            BeanCopier beanCopier = BeanCopier.create(sourceDataList.get(0).getClass(), targetClazz, false);\n            Iterator var4 = sourceDataList.iterator();\n\n            while(var4.hasNext()) {\n                S temp = var4.next();\n                result.add(copySingle(targetClazz, temp, beanCopier));\n            }\n\n            return result;\n        }\n    }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class CopyUtils {\n\n    /**\n     * \u5355\u503c\u62f7\u8d1d\n     *\n     * @param targetClazz \u76ee\u6807\u7c7b\n     * @param sourceData  \u6e90\u6570\u636e\n     * @param <T>         \u76ee\u6807\u6cdb\u578b\n     * @param <S>         \u6e90\u6cdb\u578b\n     * @return \u62f7\u8d1d\u5bf9\u8c61\n     */\n    public static <T, S> T copySigle(Class<T> targetClazz, S sourceData) {\n        if (sourceData == null) {\n            return null;\n        }\n        //\u590d\u5236\u5668 \u9ed8\u8ba4\u5e26\u7f13\u5b58.\u6240\u4ee5\u4e0d\u7528\u5b58\u8d77\u6765.\n        BeanCopier beanCopier = BeanCopier.create(sourceData.getClass(), targetClazz, false);\n        return copySigle(targetClazz, sourceData, beanCopier);\n    }\n\n    /**\n     * \u5355\u503c\u590d\u5236\u5668\n     *\n     * @param targetClazz \u76ee\u6807\u7c7b\n     * @param sourceData  \u6e90\u6570\u636e\n     * @param beanCopier  \u590d\u5236\u5668\n     * @param <T>         \u76ee\u6807\u6cdb\u578b\n     * @param <S>         \u6e90\u6cdb\u578b\n     * @return \u590d\u5236\u7ed3\u679c\n     */\n    private static <T, S> T copySigle(Class<T> targetClazz, S sourceData, BeanCopier beanCopier) {\n        T temp;\n        try {\n            temp = targetClazz.newInstance();\n            beanCopier.copy(sourceData, temp, null);\n        } catch (Exception e) {\n            return null;\n        }\n        return temp;\n    }\n\n    /**\n     * \u5217\u8868\u62f7\u8d1d\n     *\n     * @param targetClazz    \u76ee\u6807\u7c7b\n     * @param sourceDataList \u6e90\u6570\u636e\n     * @param <T>            \u76ee\u6807\u6cdb\u578b\n     * @param <S>            \u6e90\u6cdb\u578b\n     * @return \u62f7\u8d1d\u5217\u8868\n     */\n    public static <T, S> List<T> copyMulti(Class<T> targetClazz, List<S> sourceDataList) {\n\n        if (CollectionUtils.isEmpty(sourceDataList)) {\n            return null;\n        }\n        List<T> result = new ArrayList<>(sourceDataList.size());\n        BeanCopier beanCopier = BeanCopier.create(sourceDataList.get(0).getClass(), targetClazz, false);\n\n        for (S temp : sourceDataList) {\n            result.add(copySigle(targetClazz, temp, beanCopier));\n        }\n        return result;\n    }\n}\n")),(0,r.kt)("h3",{id:"\u5e76\u53d1\u67e5\u8be2\u6a21\u677f"},"\u5e76\u53d1\u67e5\u8be2\u6a21\u677f"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Java\nCompletableFuture.supplyAsync(() ->\n    // A\u67e5\u8be2\n).thenCombine(CompletableFuture.supplyAsync(() ->\n    // B\u67e5\u8be2\n), (a, b) -> {\n    // \u7ec4\u5408\n});\n")),(0,r.kt)("h3",{id:"\u7ebf\u7a0b\u5de5\u5382\u5c01\u88c5"},"\u7ebf\u7a0b\u5de5\u5382\u5c01\u88c5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public class ExecutorUtil {\n    public ExecutorUtil() {\n    }\n\n    public static Future<?> submit(Runnable task) {\n        return ExecutorUtil.ExecutorHolder.COMMON_EXECUTOR.submit(task);\n    }\n\n    public static <T> Future<T> submit(Callable<T> task) {\n        return ExecutorUtil.ExecutorHolder.COMMON_EXECUTOR.submit(task);\n    }\n\n    public static void execute(Runnable command) {\n        ExecutorUtil.ExecutorHolder.COMMON_EXECUTOR.execute(command);\n    }\n\n    public static void asyncExecute(Runnable command) {\n        ExecutorUtil.ExecutorHolder.ASYNC_EXECUTOR.execute(command);\n    }\n\n    public static void toolExecute(Runnable command) {\n        ExecutorUtil.ExecutorHolder.TOOL_EXECUTOR.execute(command);\n    }\n\n    public static void executeHeavyTask(Runnable command) {\n        ExecutorUtil.ExecutorHolder.HEAVY_EXECUTOR.execute(command);\n    }\n\n    private static ExecutorService getCommonPool() {\n        return ExecutorUtil.ExecutorHolder.COMMON_EXECUTOR;\n    }\n\n    static class BizThreadFactory implements ThreadFactory {\n        private static final AtomicInteger POOL_NUMBER = new AtomicInteger(1);\n        private final ThreadGroup group;\n        private final AtomicInteger threadNumber = new AtomicInteger(1);\n        private final String namePrefix;\n\n        BizThreadFactory(String name) {\n            SecurityManager s = System.getSecurityManager();\n            this.group = s != null ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n            this.namePrefix = "newhope-biz-" + name + "-" + POOL_NUMBER.getAndIncrement() + "-thread-";\n        }\n\n        public Thread newThread(Runnable task) {\n            Thread t = new Thread(this.group, task, this.namePrefix + this.threadNumber.getAndIncrement(), 0L);\n            if (t.isDaemon()) {\n                t.setDaemon(false);\n            }\n\n            if (t.getPriority() != 5) {\n                t.setPriority(5);\n            }\n\n            return t;\n        }\n    }\n\n    private static class ExecutorHolder {\n        private static final ExecutorService COMMON_EXECUTOR;\n        private static final ExecutorService HEAVY_EXECUTOR;\n        private static final ExecutorService ASYNC_EXECUTOR;\n        private static final ExecutorService TOOL_EXECUTOR;\n\n        private ExecutorHolder() {\n        }\n\n        static {\n            COMMON_EXECUTOR = new ThreadPoolExecutor(32, 64, 3000L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue(16), new ExecutorUtil.BizThreadFactory("common"), new CallerRunsPolicy());\n            HEAVY_EXECUTOR = new ThreadPoolExecutor(4, 8, 3000L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue(4), new ExecutorUtil.BizThreadFactory("heavy"), new CallerRunsPolicy());\n            ASYNC_EXECUTOR = new ThreadPoolExecutor(16, 16, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue(4096), new ExecutorUtil.BizThreadFactory("async"), new CallerRunsPolicy());\n            TOOL_EXECUTOR = new ThreadPoolExecutor(8, 8, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue(8), new ExecutorUtil.BizThreadFactory("tool"), new CallerRunsPolicy());\n        }\n    }\n}\n')),(0,r.kt)("h3",{id:"\u6279\u5904\u7406\u7b80\u5355\u5c01\u88c5"},"\u6279\u5904\u7406\u7b80\u5355\u5c01\u88c5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class BatchExecuteUtil {\n\n    public static <T, R> List<R> execute(Function<List<T>, R> function, List<T> list, Integer num) {\n        List<R> result = new ArrayList<>();\n\n        for (int i = 0; i < list.size(); ) {\n            result.add(function.apply(list.subList(i, Math.min(i + num, list.size()))));\n            i += num;\n        }\n        return result;\n    }\n}\n")))}c.isMDXComponent=!0}}]);