"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1973],{3905:(e,r,n)=>{n.d(r,{Zo:()=>p,kt:()=>f});var t=n(67294);function i(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){i(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function d(e,r){if(null==e)return{};var n,t,i=function(e,r){if(null==e)return{};var n,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(i[n]=e[n]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=t.createContext({}),c=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},p=function(e){var r=c(e.components);return t.createElement(l.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},s=t.forwardRef((function(e,r){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),s=c(n),f=i,m=s["".concat(l,".").concat(f)]||s[f]||u[f]||o;return n?t.createElement(m,a(a({ref:r},p),{},{components:n})):t.createElement(m,a({ref:r},p))}));function f(e,r){var n=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=s;var d={};for(var l in r)hasOwnProperty.call(r,l)&&(d[l]=r[l]);d.originalType=e,d.mdxType="string"==typeof e?e:i,a[1]=d;for(var c=2;c<o;c++)a[c]=n[c];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}s.displayName="MDXCreateElement"},20369:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var t=n(87462),i=(n(67294),n(3905));const o={},a="\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",d={unversionedId:"Java/leetcode/src/BinaryTree/\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",id:"Java/leetcode/src/BinaryTree/\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",title:"\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",description:"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/",source:"@site/docs/Java/leetcode/src/BinaryTree/105-\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811.md",sourceDirName:"Java/leetcode/src/BinaryTree",slug:"/Java/leetcode/src/BinaryTree/\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",draft:!1,editUrl:"https://github.com/zhiyu1998/Computer-Science-Learn-Notes/edit/master/docs/Java/leetcode/src/BinaryTree/105-\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811.md",tags:[],version:"current",sidebarPosition:105,frontMatter:{},sidebar:"sidebars",previous:{title:"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6"},next:{title:"\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"}},l={},c=[{value:"\u95ee\u9898\u63cf\u8ff0",id:"\u95ee\u9898\u63cf\u8ff0",level:2},{value:"\u7b2c\u4e00\u601d\u8def\uff1a\u5206\u800c\u6cbb\u4e4b",id:"\u7b2c\u4e00\u601d\u8def\u5206\u800c\u6cbb\u4e4b",level:2},{value:"\u7b2c\u4e00\u6b21\u4f18\u5316\uff1a\u590d\u5236\u6539\u4e3a\u7d22\u5f15",id:"\u7b2c\u4e00\u6b21\u4f18\u5316\u590d\u5236\u6539\u4e3a\u7d22\u5f15",level:2},{value:"\u7b2c\u4e8c\u6b21\u4f18\u5316\uff1a\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u6539\u4e3aHashMap",id:"\u7b2c\u4e8c\u6b21\u4f18\u5316\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u6539\u4e3ahashmap",level:2}],p={toc:c};function u(e){let{components:r,...n}=e;return(0,i.kt)("wrapper",(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"},"\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/"},"https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/")),(0,i.kt)("h2",{id:"\u95ee\u9898\u63cf\u8ff0"},"\u95ee\u9898\u63cf\u8ff0"),(0,i.kt)("p",null,"\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\u6570\u7ec4 preorder \u548c inorder \uff0c\u5176\u4e2d preorder \u662f\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u904d\u5386\uff0c inorder \u662f\u540c\u4e00\u68f5\u6811\u7684\u4e2d\u5e8f\u904d\u5386\uff0c\u8bf7\u6784\u9020\u4e8c\u53c9\u6811\u5e76\u8fd4\u56de\u5176\u6839\u8282\u70b9\u3002"),(0,i.kt)("h2",{id:"\u7b2c\u4e00\u601d\u8def\u5206\u800c\u6cbb\u4e4b"},"\u7b2c\u4e00\u601d\u8def\uff1a\u5206\u800c\u6cbb\u4e4b"),(0,i.kt)("p",null,"\u4e3b\u8981\u601d\u60f3\uff1a\u6bcf\u6b21\u627e\u5230\u5148\u5e8f\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u518d\u627e\u8fd9\u4e2a\u5143\u7d20\u5728\u4e2d\u5e8f\u7684\u4f4d\u7f6e\uff0c\u5212\u5206\u5de6\u3001\u53f3",(0,i.kt)("br",{parentName:"p"}),"\n","\u8be5\u65b9\u6cd5\u7684\u552f\u4e00\u7f3a\u70b9\u5728\uff1aArrays.copyOfRange\uff0c\u9996\u5148\u5bfc\u5165\u4e86\u4e00\u4e2a\u5927\u5305\uff0c\u7136\u540e\u53c8\u6bcf\u6b21\u8fdb\u884c\u4e86\u4e00\u6b21\u590d\u5236\uff0c\u5927\u5927\u589e\u52a0\u4e86\u65f6\u95f4\u548c\u7a7a\u95f4\u7684\u5f00\u9500"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        return build(preorder, inorder);\n    }\n\n    private TreeNode build(int[] preorder, int[] inorder) {\n        if (preorder.length == 0) return null;\n        // \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u76f4\u63a5\u521b\u5efa\u51fa\u6765\n        if (preorder.length == 1) return new TreeNode(preorder[0]);\n\n        // \u521b\u5efa\u5148\u5e8f\u4e2d\u7b2c\u4e00\u4e2a\u8282\u70b9\u4e3a\u5934\u7ed3\u70b9\n        TreeNode cur = new TreeNode(preorder[0]);\n        int curIndex = 0; // \u5148\u5e8f\u8282\u70b9\u5728\u4e2d\u5e8f\u8282\u70b9\u7684\u4f4d\u7f6e\uff08\u4e5f\u53ef\u4ee5\u770b\u4f5c\u4e2d\u5e8f\u5de6\u8fb9\u6709\u591a\u5c11\u4e2a\u5143\u7d20\uff09\n\n        // \u627e\u5230\u5148\u5e8f\u904d\u5386\u7684\u90a3\u4e2a\u8282\u70b9\u5728\u4e2d\u5e8f\u7684\u4f4d\u7f6e\n        for (int i = 0; i < inorder.length; i++) {\n            if (cur.val == inorder[i]) {\n                curIndex = i;\n                break;\n            }\n        }\n\n        // \u5206\u5272\u5de6\u533a\u57df\n        TreeNode left = build(Arrays.copyOfRange(preorder, 1, curIndex + 1), Arrays.copyOfRange(inorder, 0, curIndex));\n        // \u5206\u5272\u53f3\u533a\u57df\n        TreeNode right = build(Arrays.copyOfRange(preorder, curIndex + 1, inorder.length), Arrays.copyOfRange(inorder, curIndex + 1, inorder.length));\n\n        cur.left = left;\n        cur.right = right;\n\n        return cur;\n    }\n}\n")),(0,i.kt)("h2",{id:"\u7b2c\u4e00\u6b21\u4f18\u5316\u590d\u5236\u6539\u4e3a\u7d22\u5f15"},"\u7b2c\u4e00\u6b21\u4f18\u5316\uff1a\u590d\u5236\u6539\u4e3a\u7d22\u5f15"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        return build(preorder, 0, preorder.length, inorder, 0, inorder.length);\n    }\n\n    private TreeNode build(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd) {\n        // preorder \u4e3a\u7a7a\uff0c\u76f4\u63a5\u8fd4\u56de null\n        if (preStart == preEnd) return null;\n\n        // \u521b\u5efa\u5148\u5e8f\u4e2d\u7b2c\u4e00\u4e2a\u8282\u70b9\u4e3a\u5934\u7ed3\u70b9\n        TreeNode cur = new TreeNode(preorder[preStart]);\n        int curIndex = 0; // \u5148\u5e8f\u8282\u70b9\u5728\u4e2d\u5e8f\u8282\u70b9\u7684\u4f4d\u7f6e\n\n        // \u627e\u5230\u5148\u5e8f\u904d\u5386\u7684\u90a3\u4e2a\u8282\u70b9\u5728\u4e2d\u5e8f\u7684\u4f4d\u7f6e\n        for (int i = inStart; i < inEnd; i++) {\n            if (cur.val == inorder[i]) {\n                curIndex = i;\n                break;\n            }\n        }\n\n        int leftNum = curIndex - inStart; // \u4e2d\u5e8f\u5de6\u8fb9\u6709\u591a\u5c11\u4e2a\u5143\u7d20\n\n        // \u6700\u4f73\u4f8b\u5b50\n        // pre 3 9 8 27 20 15 6 13 7 1 4\n        // in  8 9 27 3 6 15 13 20 1 7 4\n\n        // \u5206\u5272\u5de6\u533a\u57df\n        // preStart + 1 \u6bcf\u6b21\u5de6\u8fb9\u8981\u4e22\u4e00\u4e2a\u5143\u7d20\uff0c\u5c31\u524d\u8fdb\u4e00\u6b65\n        // leftNum + preStart + 1 \u4e0a\u4e00\u6b21\u5728\u5de6\u4fa7\u5f00\u59cb\u7684\u4f4d\u7f6e\u52a0\u4e0a\u4e2d\u5e8f\u904d\u5386\u540e\u5de6\u8fb9\u5269\u4e0b\u7684\u5143\u7d20+1\u5f97\u5230\u524d\u5e8f\u5de6\u8fb9\u672b\u5c3e\u5143\u7d20\u7684\u7d22\u5f15\n        // inStart \u4e0a\u4e00\u6b21\u4e2d\u5e8f\u7684\u5f00\u7aef\u7d22\u5f15\n        // curIndex \u5148\u5e8f\u7b2c\u4e00\u4e2a\u5143\u7d20\u5728\u4e2d\u5e8f\u7684\u7d22\u5f15\u4f4d\u7f6e\n        cur.left = build(preorder, preStart + 1, leftNum + preStart + 1, inorder, inStart, curIndex);\n\n        // \u5206\u5272\u53f3\u533a\u57df\n        // leftNum + preStart + 1 (\u53ef\u4ee5\u60f3\u8c61\u5df2\u7ecf\u5206\u5272\u6210\u4e24\u534a\u540e\uff0c\u4f7f\u7528\u53f3\u8fb9\u90a3\u4e00\u534a\u7684\u8303\u56f4)\u4ece\u4e0a\u4e00\u6b21\u5de6\u4fa7\u5148\u5e8f\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u52a0\u4e0a\u4e2d\u5e8f\u904d\u5386\u540e\u5df2\u77e5\u5de6\u8fb9\u5143\u7d20\u7684\u4e2a\u6570+1\u4e3a\u5148\u5e8f\u904d\u5386\u53f3\u4fa7\u7684\u8d77\u59cb\u4f4d\u7f6e\n        // preEnd \u4e0a\u4e00\u6b21\u5148\u5e8f\u904d\u5386\u4f20\u4e0b\u6765\u7684\u4f4d\u7f6e\n        // curIndex + 1 \u5148\u5e8f\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u5728\u4e2d\u5e8f\u7684\u4f4d\u7f6e + 1 \u5c31\u662f\u4e2d\u5e8f\u53f3\u4fa7\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\n        // inEnd \u4e0a\u4e00\u6b21\u4e2d\u5e8f\u4f20\u4e0b\u6765\u7684\u4f4d\u7f6e\n        cur.right = build(preorder, leftNum + preStart + 1, preEnd, inorder, curIndex + 1, inEnd);\n        return cur;\n    }\n}\n")),(0,i.kt)("h2",{id:"\u7b2c\u4e8c\u6b21\u4f18\u5316\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u6539\u4e3ahashmap"},"\u7b2c\u4e8c\u6b21\u4f18\u5316\uff1a\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u6539\u4e3aHashMap"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// @lc code=start\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    HashMap<int, int> map = new HashMap<>();\n\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        for (int i = 0; i < inorder.length; i++)\n            map.put(inorder[i], i);\n        return build(preorder, 0, preorder.length, inorder, 0, inorder.length);\n    }\n\n    private TreeNode build(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd) {\n        // preorder \u4e3a\u7a7a\uff0c\u76f4\u63a5\u8fd4\u56de null\n        if (preStart == preEnd) return null;\n\n        // \u521b\u5efa\u5148\u5e8f\u4e2d\u7b2c\u4e00\u4e2a\u8282\u70b9\u4e3a\u5934\u7ed3\u70b9\n        TreeNode cur = new TreeNode(preorder[preStart]);\n        int curIndex = map.get(cur.val);; // \u5148\u5e8f\u8282\u70b9\u5728\u4e2d\u5e8f\u8282\u70b9\u7684\u4f4d\u7f6e\n\n        int leftNum = curIndex - inStart; // \u4e2d\u5e8f\u5de6\u8fb9\u6709\u591a\u5c11\u4e2a\u5143\u7d20\n\n        // \u6700\u4f73\u4f8b\u5b50\n        // pre 3 9 8 27 20 15 6 13 7 1 4\n        // in  8 9 27 3 6 15 13 20 1 7 4\n\n        // \u5206\u5272\u5de6\u533a\u57df\n        // preStart + 1 \u6bcf\u6b21\u5de6\u8fb9\u8981\u4e22\u4e00\u4e2a\u5143\u7d20\uff0c\u5c31\u524d\u8fdb\u4e00\u6b65\n        // leftNum + preStart + 1 \u4e0a\u4e00\u6b21\u5728\u5de6\u4fa7\u5f00\u59cb\u7684\u4f4d\u7f6e\u52a0\u4e0a\u4e2d\u5e8f\u904d\u5386\u540e\u5de6\u8fb9\u5269\u4e0b\u7684\u5143\u7d20+1\u5f97\u5230\u524d\u5e8f\u5de6\u8fb9\u672b\u5c3e\u5143\u7d20\u7684\u7d22\u5f15\n        // inStart \u4e0a\u4e00\u6b21\u4e2d\u5e8f\u7684\u5f00\u7aef\u7d22\u5f15\n        // curIndex \u5148\u5e8f\u7b2c\u4e00\u4e2a\u5143\u7d20\u5728\u4e2d\u5e8f\u7684\u7d22\u5f15\u4f4d\u7f6e\n        cur.left = build(preorder, preStart + 1, leftNum + preStart + 1, inorder, inStart, curIndex);\n        \n        // \u5206\u5272\u53f3\u533a\u57df\n        // leftNum + preStart + 1 (\u53ef\u4ee5\u60f3\u8c61\u5df2\u7ecf\u5206\u5272\u6210\u4e24\u534a\u540e\uff0c\u4f7f\u7528\u53f3\u8fb9\u90a3\u4e00\u534a\u7684\u8303\u56f4)\u4ece\u4e0a\u4e00\u6b21\u5de6\u4fa7\u5148\u5e8f\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u52a0\u4e0a\u4e2d\u5e8f\u904d\u5386\u540e\u5df2\u77e5\u5de6\u8fb9\u5143\u7d20\u7684\u4e2a\u6570+1\u4e3a\u5148\u5e8f\u904d\u5386\u53f3\u4fa7\u7684\u8d77\u59cb\u4f4d\u7f6e\n        // preEnd \u4e0a\u4e00\u6b21\u5148\u5e8f\u904d\u5386\u4f20\u4e0b\u6765\u7684\u4f4d\u7f6e\n        // curIndex + 1 \u5148\u5e8f\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u5728\u4e2d\u5e8f\u7684\u4f4d\u7f6e + 1 \u5c31\u662f\u4e2d\u5e8f\u53f3\u4fa7\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\n        // inEnd \u4e0a\u4e00\u6b21\u4e2d\u5e8f\u4f20\u4e0b\u6765\u7684\u4f4d\u7f6e\n        cur.right = build(preorder, leftNum + preStart + 1, preEnd, inorder, curIndex + 1, inEnd);\n        return cur;\n    }\n}\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\u6267\u884c\u7ed3\u679c\uff1a \u901a\u8fc7\n\u6267\u884c\u7528\u65f6\uff1a1 ms, \u5728\u6240\u6709 Java \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8699.24% \u7684\u7528\u6237\n\u5185\u5b58\u6d88\u8017\uff1a40.8 MB, \u5728\u6240\u6709 Java \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8652.14% \u7684\u7528\u6237")))}u.isMDXComponent=!0}}]);