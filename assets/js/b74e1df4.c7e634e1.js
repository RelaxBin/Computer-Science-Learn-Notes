"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9051],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,i=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),m=c(n),f=o,d=m["".concat(i,".").concat(f)]||m[f]||s[f]||l;return n?r.createElement(d,a(a({ref:t},p),{},{components:n})):r.createElement(d,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=m;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u.mdxType="string"==typeof e?e:o,a[1]=u;for(var c=2;c<l;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},70739:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>s,frontMatter:()=>l,metadata:()=>u,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const l={},a="\u8def\u5f84\u603b\u548c",u={unversionedId:"Java/leetcode/src/BinaryTree/\u8def\u5f84\u603b\u548c",id:"Java/leetcode/src/BinaryTree/\u8def\u5f84\u603b\u548c",title:"\u8def\u5f84\u603b\u548c",description:"https://leetcode-cn.com/problems/path-sum/",source:"@site/docs/Java/leetcode/src/BinaryTree/112-\u8def\u5f84\u603b\u548c.md",sourceDirName:"Java/leetcode/src/BinaryTree",slug:"/Java/leetcode/src/BinaryTree/\u8def\u5f84\u603b\u548c",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u8def\u5f84\u603b\u548c",draft:!1,editUrl:"https://github.com/zhiyu1998/Computer-Science-Learn-Notes/edit/master/docs/Java/leetcode/src/BinaryTree/112-\u8def\u5f84\u603b\u548c.md",tags:[],version:"current",sidebarPosition:112,frontMatter:{},sidebar:"sidebars",previous:{title:"\u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6"},next:{title:"\u72ec\u7279\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/Daily/\u72ec\u7279\u7684\u7535\u5b50\u90ae\u7bb1"}},i={},c=[{value:"\u95ee\u9898\u63cf\u8ff0",id:"\u95ee\u9898\u63cf\u8ff0",level:2},{value:"\u7b2c\u4e00\u60f3\u6cd5\uff1a\u6df1\u5ea6\u4f18\u5148\uff08\u9012\u5f52\uff09",id:"\u7b2c\u4e00\u60f3\u6cd5\u6df1\u5ea6\u4f18\u5148\u9012\u5f52",level:2},{value:"\u601d\u8def\u4e8c\u63d0\u4f9b\uff1a\u5e7f\u5ea6\u4f18\u5148",id:"\u601d\u8def\u4e8c\u63d0\u4f9b\u5e7f\u5ea6\u4f18\u5148",level:2}],p={toc:c};function s(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u8def\u5f84\u603b\u548c"},"\u8def\u5f84\u603b\u548c"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/path-sum/"},"https://leetcode-cn.com/problems/path-sum/")),(0,o.kt)("h2",{id:"\u95ee\u9898\u63cf\u8ff0"},"\u95ee\u9898\u63cf\u8ff0"),(0,o.kt)("p",null,"\u7ed9\u4f60\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \u548c\u4e00\u4e2a\u8868\u793a\u76ee\u6807\u548c\u7684\u6574\u6570 targetSum \u3002\u5224\u65ad\u8be5\u6811\u4e2d\u662f\u5426\u5b58\u5728 \u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9 \u7684\u8def\u5f84\uff0c\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u503c\u76f8\u52a0\u7b49\u4e8e\u76ee\u6807\u548c targetSum \u3002\u5982\u679c\u5b58\u5728\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002"),(0,o.kt)("p",null,"\u53f6\u5b50\u8282\u70b9 \u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002"),(0,o.kt)("h2",{id:"\u7b2c\u4e00\u60f3\u6cd5\u6df1\u5ea6\u4f18\u5148\u9012\u5f52"},"\u7b2c\u4e00\u60f3\u6cd5\uff1a\u6df1\u5ea6\u4f18\u5148\uff08\u9012\u5f52\uff09"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u9996\u5148\u6392\u9664\u9898\u76ee\u4e2d\u7684\u4e00\u79cd\u60c5\u51b5\uff1a\u6811\u662f\u7a7a\u7684\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u3002"),(0,o.kt)("li",{parentName:"ol"},"\u672c\u9898\u7684\u9012\u5f52\u5e94\u8be5\u662f\u5148\u5e8f\u9012\u5f52"),(0,o.kt)("li",{parentName:"ol"},"\u5f00\u59cb\u9012\u5f52\uff1a",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"\u8bbe\u7f6e\u9012\u5f52\u59341\uff08\u6ca1\u6709\u627e\u5230\uff09\uff1aroot == null"),(0,o.kt)("li",{parentName:"ol"},"\u8bbe\u7f6e\u9012\u5f52\u59342\uff08\u627e\u5230\uff0ccurSum\u662f\u4e0a\u4e00\u6b21\u52a0\u4e0a\u8fd9\u4e00\u6b21\uff0c\u4f20\u8fdb\u6765\u7684curSum\u662f\u4e0a\u4e00\u6b21\u7684\uff09\uff1acurSum == targetSum && root.left == null && root.right == null"),(0,o.kt)("li",{parentName:"ol"},"\u6811\u904d\u5386\u6a21\u677f"))),(0,o.kt)("li",{parentName:"ol"},"\u8bbe\u7f6e\u627e\u5230\u7684\u6807\u5fd7",(0,o.kt)("inlineCode",{parentName:"li"},"findout"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    boolean findout = false;\n\n    public boolean hasPathSum(TreeNode root, int targetSum) {\n        if (root == null)\n            return false;\n        helper(root, targetSum, 0);\n        return findout;\n    }\n\n    private void helper(TreeNode root, int targetSum, int curSum) {\n\n        if (root == null)\n            return;\n\n        curSum += root.val;\n        if (curSum == targetSum && root.left == null && root.right == null) {\n            findout = true;\n            return;\n        }\n        \n        helper(root.left, targetSum, curSum);\n\n        helper(root.right, targetSum, curSum);\n    }\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u6267\u884c\u7ed3\u679c\uff1a\u901a\u8fc7"),(0,o.kt)("p",{parentName:"blockquote"},"\u6267\u884c\u7528\u65f6\uff1a0 ms, \u5728\u6240\u6709 Java \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86100.00% \u7684\u7528\u6237"),(0,o.kt)("p",{parentName:"blockquote"},"\u5185\u5b58\u6d88\u8017\uff1a41 MB, \u5728\u6240\u6709 Java \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8669.66% \u7684\u7528\u6237"),(0,o.kt)("p",{parentName:"blockquote"},"\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b\uff1a117 / 117")),(0,o.kt)("p",null,"\u66f4\u52a0\u7cbe\u7b80\u7684\u5199\u6cd5\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public boolean hasPathSum(TreeNode root, int sum) {\n        if (root == null) {\n            return false;\n        }\n        if (root.left == null && root.right == null) {\n            return sum == root.val;\n        }\n        return hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);\n    }\n}\n")),(0,o.kt)("h2",{id:"\u601d\u8def\u4e8c\u63d0\u4f9b\u5e7f\u5ea6\u4f18\u5148"},"\u601d\u8def\u4e8c\u63d0\u4f9b\uff1a\u5e7f\u5ea6\u4f18\u5148"),(0,o.kt)("p",null,"\u56fe\u89e3\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/path-sum/solution/lu-jing-zong-he-by-leetcode-solution/"},"https://leetcode-cn.com/problems/path-sum/solution/lu-jing-zong-he-by-leetcode-solution/")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public boolean hasPathSum(TreeNode root, int sum) {\n        if (root == null) {\n            return false;\n        }\n        Queue<TreeNode> queNode = new LinkedList<TreeNode>();\n        Queue<Integer> queVal = new LinkedList<Integer>();\n        queNode.offer(root);\n        queVal.offer(root.val);\n        while (!queNode.isEmpty()) {\n            TreeNode now = queNode.poll();\n            int temp = queVal.poll();\n            if (now.left == null && now.right == null) {\n                if (temp == sum) {\n                    return true;\n                }\n                continue;\n            }\n            if (now.left != null) {\n                queNode.offer(now.left);\n                queVal.offer(now.left.val + temp);\n            }\n            if (now.right != null) {\n                queNode.offer(now.right);\n                queVal.offer(now.right.val + temp);\n            }\n        }\n        return false;\n    }\n}\n")))}s.isMDXComponent=!0}}]);