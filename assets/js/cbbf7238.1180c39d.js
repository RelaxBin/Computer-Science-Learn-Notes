"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7367],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),p=o,m=u["".concat(s,".").concat(p)]||u[p]||f[p]||a;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},25658:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const a={},i=void 0,l={unversionedId:"Java/leetcode/src/\u5251\u6307offer/\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9",id:"Java/leetcode/src/\u5251\u6307offer/\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9",title:"\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9",description:"\u5251\u6307 Offer 22. \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9",source:"@site/docs/Java/leetcode/src/\u5251\u6307offer/22-\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9.md",sourceDirName:"Java/leetcode/src/\u5251\u6307offer",slug:"/Java/leetcode/src/\u5251\u6307offer/\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/\u5251\u6307offer/\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9",draft:!1,editUrl:"https://github.com/zhiyu1998/Computer-Science-Learn-Notes/edit/master/docs/Java/leetcode/src/\u5251\u6307offer/22-\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9.md",tags:[],version:"current",sidebarPosition:22,frontMatter:{},sidebar:"sidebars",previous:{title:"\u5220\u9664\u94fe\u8868\u7684\u8282\u70b9",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/\u5251\u6307offer/\u5220\u9664\u94fe\u8868\u7684\u8282\u70b9"},next:{title:"\u53cd\u8f6c\u94fe\u8868",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/\u5251\u6307offer/\u53cd\u8f6c\u94fe\u8868"}},s={},c=[{value:"\u5251\u6307 Offer 22. \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9",id:"\u5251\u6307-offer-22-\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9",level:2},{value:"\u4e24\u6b21\u7ffb\u8f6c",id:"\u4e24\u6b21\u7ffb\u8f6c",level:3},{value:"\u5feb\u6162\u6307\u9488",id:"\u5feb\u6162\u6307\u9488",level:3}],d={toc:c};function f(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"\u5251\u6307-offer-22-\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9"},"\u5251\u6307 Offer 22. \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/"},"\u5251\u6307 Offer 22. \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9")),(0,o.kt)("h3",{id:"\u4e24\u6b21\u7ffb\u8f6c"},"\u4e24\u6b21\u7ffb\u8f6c"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode getKthFromEnd(ListNode head, int k) {\n        ListNode node = reverseList(head);\n        \n        ListNode temp = node;\n        for (;k!=1;k--){\n            temp = temp.next;\n        }\n        temp.next = null;\n        \n        return reverseList(node);\n    }\n\n    private ListNode reverseList(ListNode head) {\n    ListNode prev = null;\n    ListNode curr = head;\n    while (curr != null) {\n        ListNode next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}\n}\n")),(0,o.kt)("h3",{id:"\u5feb\u6162\u6307\u9488"},"\u5feb\u6162\u6307\u9488"),(0,o.kt)("p",null,"\u601d\u8def\uff1a\u5feb\u6162\u6307\u9488\uff0c\u5148\u8ba9\u5feb\u6307\u9488\u8d70k\u6b65\uff0c\u7136\u540e\u4e24\u4e2a\u6307\u9488\u540c\u6b65\u8d70\uff0c\u5f53\u5feb\u6307\u9488\u8d70\u5230\u5934\u65f6\uff0c\u6162\u6307\u9488\u5c31\u662f\u94fe\u8868\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode getKthFromEnd(ListNode head, int k) {\n        ListNode fast = head, slow = head;\n        while (k > 1) {\n            k -= 1;\n            if (fast.next != null) {\n                fast = fast.next;\n            }\n        }\n        while (fast.next != null) {\n            fast = fast.next;\n            slow = slow.next;\n        }\n        return slow;\n    }\n}\n")))}f.isMDXComponent=!0}}]);