"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7907],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(t),f=a,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||o;return t?r.createElement(m,l(l({ref:n},u),{},{components:t})):r.createElement(m,l({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=p;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},34627:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=t(87462),a=(t(67294),t(3905));const o={},l="\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386",i={unversionedId:"Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386",id:"Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386",title:"\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386",description:"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/",source:"@site/docs/Java/leetcode/src/BinaryTree/103-\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386.md",sourceDirName:"Java/leetcode/src/BinaryTree",slug:"/Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386",draft:!1,editUrl:"https://github.com/zhiyu1998/Computer-Science-Learn-Notes/edit/master/docs/Java/leetcode/src/BinaryTree/103-\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386.md",tags:[],version:"current",sidebarPosition:103,frontMatter:{},sidebar:"sidebars",previous:{title:"\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"},next:{title:"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6"}},c={},s=[{value:"\u95ee\u9898\u63cf\u8ff0",id:"\u95ee\u9898\u63cf\u8ff0",level:2},{value:"\u7b2c\u4e00\u60f3\u6cd5\uff1a\u5c42\u5e8f\u904d\u5386+\u903b\u8f91\u5224\u65ad",id:"\u7b2c\u4e00\u60f3\u6cd5\u5c42\u5e8f\u904d\u5386\u903b\u8f91\u5224\u65ad",level:2}],u={toc:s};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386"},"\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/"},"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/")),(0,a.kt)("h2",{id:"\u95ee\u9898\u63cf\u8ff0"},"\u95ee\u9898\u63cf\u8ff0"),(0,a.kt)("p",null,"\u7ed9\u4f60\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u7684 \u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386 \u3002\uff08\u5373\u5148\u4ece\u5de6\u5f80\u53f3\uff0c\u518d\u4ece\u53f3\u5f80\u5de6\u8fdb\u884c\u4e0b\u4e00\u5c42\u904d\u5386\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5c42\u4e0e\u5c42\u4e4b\u95f4\u4ea4\u66ff\u8fdb\u884c\uff09\u3002"),(0,a.kt)("h2",{id:"\u7b2c\u4e00\u60f3\u6cd5\u5c42\u5e8f\u904d\u5386\u903b\u8f91\u5224\u65ad"},"\u7b2c\u4e00\u60f3\u6cd5\uff1a\u5c42\u5e8f\u904d\u5386+\u903b\u8f91\u5224\u65ad"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u5199\u51fa\u5c42\u5e8f\u904d\u5386\u7684\u6a21\u677f"),(0,a.kt)("li",{parentName:"ol"},"\u52a0\u5165\u5f53\u524d\u5c42\u662f\u7b2c\u51e0\u6b21\uff08\u672c\u7b97\u6cd5\u4e0d\u75280\u5c42\uff0c1\u5f00\u59cb\uff09"),(0,a.kt)("li",{parentName:"ol"},"\u5728\u4e2d\u95f4\u90e8\u5206\u8fdb\u884c\u4fee\u6539",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"\u5220\u9664\u975e\u5b50\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff08n-i-1\uff09"),(0,a.kt)("li",{parentName:"ol"},"\u5224\u65ad\u4e3a\u5076\u6570\u5c42\u5148\u6dfb\u52a0\u53f3\u8fb9\u518d\u6dfb\u52a0\u5de6\u8fb9\u5143\u7d20"),(0,a.kt)("li",{parentName:"ol"},"\u5224\u65ad\u4e3a\u5947\u6570\u5c42\u5148\u6dfb\u52a0\u5de6\u8fb9\u518d\u6dfb\u52a0\u53f3\u8fb9\u5143\u7d20")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.ArrayList;\n\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n * int val;\n * TreeNode left;\n * TreeNode right;\n * TreeNode() {}\n * TreeNode(int val) { this.val = val; }\n * TreeNode(int val, TreeNode left, TreeNode right) {\n * this.val = val;\n * this.left = left;\n * this.right = right;\n * }\n * }\n */\nclass Solution {\n    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {\n        List<List<Integer>> ans = new LinkedList<>();\n\n        // \u7b2c\u4e00\u5c42\n        if (root == null)\n            return ans;\n        else {\n            final List<Integer> temp = new LinkedList<>();\n            temp.add(root.val);\n            ans.add(temp);\n        }\n\n        // \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\n        if (root.left == null && root.right == null)\n            return ans;\n\n        // \u7b2c\u4e8c\u5c42\n        ArrayList<TreeNode> queue = new ArrayList<>();\n\n        if (root.left != null)\n            queue.add(root.left);\n        if (root.right != null)\n            queue.add(root.right);\n\n        int level = 2;\n\n        // \u5176\u4ed6\u5c42\uff08>2\uff09\n        while (queue.size() > 0) {\n            List<Integer> elList = new LinkedList<>();\n\n            int n = queue.size(); // \u8bb0\u5fc6\u5f53\u524d\u96c6\u5408\u7684\u5927\u5c0f\uff0c\u65b9\u4fbf\u4e0b\u4e00\u4ee3\u52a0\u5165\u7684\u65f6\u5019\u51fa\u73b0\u95ee\u9898\n\n            // \u52a0\u5165\u4e0a\u4e00\u6b21\u7684\u7b54\u6848, \u6e05\u9664\u961f\u5217\u5143\u7d20\n            for (int i = 0; i < n; i++) {\n                // \u5076\u6570\u884c\uff1a\u961f\u5217\u5904\u7406\uff1b\u5947\u6570\u884c\uff1a\u6808\u5904\u7406\n                final TreeNode node = queue.remove(n - i - 1);\n                if (level % 2 == 0) {\n                    // \u6dfb\u52a0\u53f3\u8282\u70b9\u548c\u5de6\u8282\u70b9\n                    if (node.right != null)\n                        queue.add(node.right);\n                    if (node.left != null)\n                        queue.add(node.left);\n                } else {\n                    // \u6dfb\u52a0\u5de6\u8282\u70b9\u548c\u53f3\u8282\u70b9\n                    if (node.left != null)\n                        queue.add(node.left);\n                    if (node.right != null)\n                        queue.add(node.right);\n                }\n\n                elList.add(node.val);\n\n            }\n\n            // \u6dfb\u52a0\u961f\u5217\u5143\u7d20\n            ans.add(elList);\n\n            level++;\n        }\n\n        return ans;\n    }\n}\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u6267\u884c\u7ed3\u679c\uff1a \u901a\u8fc7",(0,a.kt)("br",{parentName:"p"}),"\n","\u6267\u884c\u7528\u65f6\uff1a0 ms, \u5728\u6240\u6709 Java \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 100.00% \u7684\u7528\u6237",(0,a.kt)("br",{parentName:"p"}),"\n","\u5185\u5b58\u6d88\u8017\uff1a39.5 MB, \u5728\u6240\u6709 Java \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e86 46.91% \u7684\u7528\u6237")))}d.isMDXComponent=!0}}]);