"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3633],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=p(r),m=o,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(f,l(l({ref:t},s),{},{components:r})):n.createElement(f,l({ref:t},s))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},21001:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var n=r(87462),o=(r(67294),r(3905));const a={},l="\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",i={unversionedId:"Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",id:"Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",title:"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",description:"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/",source:"@site/docs/Java/leetcode/src/BinaryTree/104-\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6.md",sourceDirName:"Java/leetcode/src/BinaryTree",slug:"/Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",draft:!1,editUrl:"https://github.com/zhiyu1998/Computer-Science-Learn-Notes/edit/master/docs/Java/leetcode/src/BinaryTree/104-\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6.md",tags:[],version:"current",sidebarPosition:104,frontMatter:{},sidebar:"sidebars",previous:{title:"\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386"},next:{title:"\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"}},c={},p=[{value:"\u95ee\u9898\u63cf\u8ff0",id:"\u95ee\u9898\u63cf\u8ff0",level:2},{value:"\u7b2c\u4e00\u60f3\u6cd5\uff1a\u540e\u5e8f\u904d\u5386",id:"\u7b2c\u4e00\u60f3\u6cd5\u540e\u5e8f\u904d\u5386",level:2}],s={toc:p};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6"},"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/"},"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/")),(0,o.kt)("h2",{id:"\u95ee\u9898\u63cf\u8ff0"},"\u95ee\u9898\u63cf\u8ff0"),(0,o.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5927\u6df1\u5ea6\u3002"),(0,o.kt)("p",null,"\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3a\u6839\u8282\u70b9\u5230\u6700\u8fdc\u53f6\u5b50\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u3002"),(0,o.kt)("p",null,"\u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," 3\n/ \\\n9  20\n/  \\\n15   7\n")),(0,o.kt)("p",null,"\u8fd4\u56de\u5b83\u7684\u6700\u5927\u6df1\u5ea6 3 \u3002"),(0,o.kt)("h2",{id:"\u7b2c\u4e00\u60f3\u6cd5\u540e\u5e8f\u904d\u5386"},"\u7b2c\u4e00\u60f3\u6cd5\uff1a\u540e\u5e8f\u904d\u5386"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n * int val;\n * TreeNode left;\n * TreeNode right;\n * TreeNode() {}\n * TreeNode(int val) { this.val = val; }\n * TreeNode(int val, TreeNode left, TreeNode right) {\n * this.val = val;\n * this.left = left;\n * this.right = right;\n * }\n * }\n */\nclass Solution {\n\n    public int maxDepth(TreeNode root) {\n\n        if (root == null)\n            return 0;\n\n        if (root.left == null && root.right == null)\n            return 1;\n\n        if (root.left != null && root.right != null) {\n            int l = maxDepth(root.left) + 1;\n            int r = maxDepth(root.right) + 1;\n            return l > r ? l : r;\n        }\n\n        return root.left != null ? maxDepth(root.left) + 1 : maxDepth(root.right) + 1;\n    }\n}\n")))}u.isMDXComponent=!0}}]);