"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4603],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),f=o,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||a;return t?r.createElement(m,i(i({ref:n},u),{},{components:t})):r.createElement(m,i({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1078:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(87462),o=(t(67294),t(3905));const a={},i="\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 II",l={unversionedId:"Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 II",id:"Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 II",title:"\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 II",description:"\u95ee\u9898\u63cf\u8ff0",source:"@site/docs/Java/leetcode/src/BinaryTree/107-\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 II.md",sourceDirName:"Java/leetcode/src/BinaryTree",slug:"/Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 II",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 II",draft:!1,editUrl:"https://github.com/zhiyu1998/Computer-Science-Learn-Notes/edit/master/docs/Java/leetcode/src/BinaryTree/107-\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 II.md",tags:[],version:"current",sidebarPosition:107,frontMatter:{},sidebar:"sidebars",previous:{title:"\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811"},next:{title:"\u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811",permalink:"/Computer-Science-Learn-Notes/docs/Java/leetcode/src/BinaryTree/\u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811"}},c={},s=[{value:"\u95ee\u9898\u63cf\u8ff0",id:"\u95ee\u9898\u63cf\u8ff0",level:2},{value:"\u7b2c\u4e00\u60f3\u6cd5\uff1aBFS",id:"\u7b2c\u4e00\u60f3\u6cd5bfs",level:2}],u={toc:s};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386-ii"},"\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 II"),(0,o.kt)("h2",{id:"\u95ee\u9898\u63cf\u8ff0"},"\u95ee\u9898\u63cf\u8ff0"),(0,o.kt)("p",null,"\u7ed9\u4f60\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," \uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c ",(0,o.kt)("strong",{parentName:"p"},"\u81ea\u5e95\u5411\u4e0a\u7684\u5c42\u5e8f\u904d\u5386")," \u3002 \uff08\u5373\u6309\u4ece\u53f6\u5b50\u8282\u70b9\u6240\u5728\u5c42\u5230\u6839\u8282\u70b9\u6240\u5728\u7684\u5c42\uff0c\u9010\u5c42\u4ece\u5de6\u5411\u53f3\u904d\u5386\uff09"),(0,o.kt)("h2",{id:"\u7b2c\u4e00\u60f3\u6cd5bfs"},"\u7b2c\u4e00\u60f3\u6cd5\uff1aBFS"),(0,o.kt)("p",null,"\u601d\u8def\u540clc. 102"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\n        if (root == null) {\n            return new LinkedList<>();\n        }\n\n        if (root.left == null && root.right == null) {\n            return new LinkedList<List<Integer>>(Collections.singleton(new LinkedList<Integer>(Collections.singleton(1))));\n        }\n\n        LinkedList<List<Integer>> ans = new LinkedList<>();\n\n        LinkedList<TreeNode> queue = new LinkedList<>();\n\n        LinkedList<Integer> stack = new LinkedList<>();\n        stack.add(root.val);\n\n        int container = 0;\n\n        if (root.left != null) {\n            queue.addLast(root.left);\n            container++;\n        }\n        if (root.right != null) {\n            queue.addLast(root.right);\n            container++;\n        }\n        \n        while (queue.size() > 0) {\n            ans.addFirst(stack);\n            stack = new LinkedList<Integer>();\n\n            int nextLength = 0;\n\n            for(int i = 0; i < container; i++) {\n                TreeNode ele = queue.removeFirst();\n\n                stack.addLast(ele.val);\n\n                if (ele.left != null) {\n                    queue.addLast(ele.left);\n                    nextLength++;\n                }\n                if (ele.right != null) {\n                    queue.addLast(ele.right);\n                    nextLength++;\n                }\n            }\n\n            container = nextLength;\n        }\n\n        ans.addFirst(stack);\n\n        return ans;\n    }\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u6267\u884c\u7ed3\u679c\uff1a"),(0,o.kt)("p",{parentName:"blockquote"},"\u6267\u884c\u7528\u65f6\uff1a1 ms, \u5728\u6240\u6709 Java \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8693.24% \u7684\u7528\u6237"),(0,o.kt)("p",{parentName:"blockquote"},"\u5185\u5b58\u6d88\u8017\uff1a41.5 MB, \u5728\u6240\u6709 Java \u63d0\u4ea4\u4e2d\u51fb\u8d25\u4e8638.20% \u7684\u7528\u6237"),(0,o.kt)("p",{parentName:"blockquote"},"\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b\uff1a34 / 34")))}d.isMDXComponent=!0}}]);