import{_ as o,W as l,X as i,a0 as s,a1 as e,Z as a,$ as n,C as c}from"./framework-c8643d23.js";const r={},p=s("h1",{id:"我的刷题顺序",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#我的刷题顺序","aria-hidden":"true"},"#"),e(" 我的刷题顺序")],-1),d=s("h2",{id:"二叉树-✅",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#二叉树-✅","aria-hidden":"true"},"#"),e(" 二叉树 ✅")],-1),k=s("ul",null,[s("li",null,"掌握二叉树递归与非递归遍历"),s("li",null,"理解 DFS 前序遍历与分治法"),s("li",null,"理解 BFS 层次遍历")],-1),h=s("p",null,"精选：",-1),u={class:"task-list-container"},_={class:"task-list-item"},b=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-0",checked:"checked",disabled:"disabled"},null,-1),m={class:"task-list-item-label",for:"task-item-0"},f={href:"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/",target:"_blank",rel:"noopener noreferrer"},v={class:"task-list-item"},x=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-1",checked:"checked",disabled:"disabled"},null,-1),g={class:"task-list-item-label",for:"task-item-1"},y={href:"https://leetcode-cn.com/problems/balanced-binary-tree/",target:"_blank",rel:"noopener noreferrer"},w={class:"task-list-item"},I=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-2",disabled:"disabled"},null,-1),j={class:"task-list-item-label",for:"task-item-2"},N={href:"https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/",target:"_blank",rel:"noopener noreferrer"},L={class:"task-list-item"},B=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-3",disabled:"disabled"},null,-1),M={class:"task-list-item-label",for:"task-item-3"},z={href:"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/",target:"_blank",rel:"noopener noreferrer"},q={class:"task-list-item"},D=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-4",checked:"checked",disabled:"disabled"},null,-1),H={class:"task-list-item-label",for:"task-item-4"},O={href:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/",target:"_blank",rel:"noopener noreferrer"},P={class:"task-list-item"},S=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-5",checked:"checked",disabled:"disabled"},null,-1),T={class:"task-list-item-label",for:"task-item-5"},V={href:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/",target:"_blank",rel:"noopener noreferrer"},E={class:"task-list-item"},F=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-6",checked:"checked",disabled:"disabled"},null,-1),C={class:"task-list-item-label",for:"task-item-6"},K={href:"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/",target:"_blank",rel:"noopener noreferrer"},W={class:"task-list-item"},X=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-7",checked:"checked",disabled:"disabled"},null,-1),Z={class:"task-list-item-label",for:"task-item-7"},$={href:"https://leetcode-cn.com/problems/validate-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},A={class:"task-list-item"},G=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-8",disabled:"disabled"},null,-1),J={class:"task-list-item-label",for:"task-item-8"},Q={href:"https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},R=n('<h2 id="链表-✅" tabindex="-1"><a class="header-anchor" href="#链表-✅" aria-hidden="true">#</a> 链表 ✅</h2><ul><li>null/nil异常处理</li><li>dummy node哑巴节点</li><li>快慢指针</li><li>插入一个节点到排序链表</li><li>从一个链表中移除一个节点</li><li>翻转链表</li><li>合并两个链表</li><li>找到链表的中间节点</li></ul>',2),U={class:"task-list-container"},Y={class:"task-list-item"},ss=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-9",checked:"checked",disabled:"disabled"},null,-1),es={class:"task-list-item-label",for:"task-item-9"},ts={href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/",target:"_blank",rel:"noopener noreferrer"},as={class:"task-list-item"},ns=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-10",checked:"checked",disabled:"disabled"},null,-1),os={class:"task-list-item-label",for:"task-item-10"},ls={href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/",target:"_blank",rel:"noopener noreferrer"},is={class:"task-list-item"},cs=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-11",checked:"checked",disabled:"disabled"},null,-1),rs={class:"task-list-item-label",for:"task-item-11"},ps={href:"https://leetcode-cn.com/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"},ds={class:"task-list-item"},ks=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-12",checked:"checked",disabled:"disabled"},null,-1),hs={class:"task-list-item-label",for:"task-item-12"},us={href:"https://leetcode-cn.com/problems/reverse-linked-list-ii/",target:"_blank",rel:"noopener noreferrer"},_s={class:"task-list-item"},bs=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-13",checked:"checked",disabled:"disabled"},null,-1),ms={class:"task-list-item-label",for:"task-item-13"},fs={href:"https://leetcode-cn.com/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"},vs={class:"task-list-item"},xs=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-14",checked:"checked",disabled:"disabled"},null,-1),gs={class:"task-list-item-label",for:"task-item-14"},ys={href:"https://leetcode-cn.com/problems/partition-list/",target:"_blank",rel:"noopener noreferrer"},ws={class:"task-list-item"},Is=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-15",checked:"checked",disabled:"disabled"},null,-1),js={class:"task-list-item-label",for:"task-item-15"},Ns={href:"https://leetcode-cn.com/problems/sort-list/",target:"_blank",rel:"noopener noreferrer"},Ls={class:"task-list-item"},Bs=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-16",checked:"checked",disabled:"disabled"},null,-1),Ms={class:"task-list-item-label",for:"task-item-16"},zs={href:"https://leetcode-cn.com/problems/reorder-list/",target:"_blank",rel:"noopener noreferrer"},qs={class:"task-list-item"},Ds=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-17",checked:"checked",disabled:"disabled"},null,-1),Hs={class:"task-list-item-label",for:"task-item-17"},Os={href:"https://leetcode-cn.com/problems/linked-list-cycle/",target:"_blank",rel:"noopener noreferrer"},Ps={class:"task-list-item"},Ss=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-18",checked:"checked",disabled:"disabled"},null,-1),Ts={class:"task-list-item-label",for:"task-item-18"},Vs={href:"https://leetcode-cn.com/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"},Es={class:"task-list-item"},Fs=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-19",checked:"checked",disabled:"disabled"},null,-1),Cs={class:"task-list-item-label",for:"task-item-19"},Ks={href:"https://leetcode-cn.com/problems/palindrome-linked-list/",target:"_blank",rel:"noopener noreferrer"},Ws={class:"task-list-item"},Xs=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-20",checked:"checked",disabled:"disabled"},null,-1),Zs={class:"task-list-item-label",for:"task-item-20"},$s={href:"https://leetcode-cn.com/problems/copy-list-with-random-pointer/",target:"_blank",rel:"noopener noreferrer"},As=s("h2",{id:"字符串-✅",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#字符串-✅","aria-hidden":"true"},"#"),e(" 字符串 ✅")],-1),Gs=s("p",null,"需要考虑的问题：",-1),Js=s("ol",null,[s("li",null,"要不要使用库函数"),s("li",null,"双指针法"),s("li",null,"反转系列"),s("li",null,"KMP")],-1),Qs={class:"task-list-container"},Rs={class:"task-list-item"},Us=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-21",checked:"checked",disabled:"disabled"},null,-1),Ys={class:"task-list-item-label",for:"task-item-21"},se={href:"https://leetcode-cn.com/problems/reverse-string/",target:"_blank",rel:"noopener noreferrer"},ee={class:"task-list-item"},te=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-22",checked:"checked",disabled:"disabled"},null,-1),ae={class:"task-list-item-label",for:"task-item-22"},ne={href:"https://leetcode-cn.com/problems/reverse-string-ii/",target:"_blank",rel:"noopener noreferrer"},oe={class:"task-list-item"},le=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-23",checked:"checked",disabled:"disabled"},null,-1),ie={class:"task-list-item-label",for:"task-item-23"},ce={href:"https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/",target:"_blank",rel:"noopener noreferrer"},re={class:"task-list-item"},pe=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-24",checked:"checked",disabled:"disabled"},null,-1),de={class:"task-list-item-label",for:"task-item-24"},ke={href:"https://leetcode-cn.com/problems/reverse-words-in-a-string/",target:"_blank",rel:"noopener noreferrer"},he={class:"task-list-item"},ue=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-25",checked:"checked",disabled:"disabled"},null,-1),_e={class:"task-list-item-label",for:"task-item-25"},be={href:"https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/",target:"_blank",rel:"noopener noreferrer"},me={class:"task-list-item"},fe=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-26",checked:"checked",disabled:"disabled"},null,-1),ve={class:"task-list-item-label",for:"task-item-26"},xe={href:"https://leetcode-cn.com/problems/implement-strstr/",target:"_blank",rel:"noopener noreferrer"},ge={class:"task-list-item"},ye=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-27",checked:"checked",disabled:"disabled"},null,-1),we={class:"task-list-item-label",for:"task-item-27"},Ie={href:"https://leetcode-cn.com/problems/repeated-substring-pattern/",target:"_blank",rel:"noopener noreferrer"},je=s("h2",{id:"动态规划-🚫",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#动态规划-🚫","aria-hidden":"true"},"#"),e(" 动态规划 🚫")],-1),Ne=s("p",null,"最长递增子序列 ➡️ 单词拆分 ➡️ 编辑距离",-1),Le=s("p",null,"矩阵DP",-1),Be={class:"task-list-container"},Me={class:"task-list-item"},ze=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-28",disabled:"disabled"},null,-1),qe={class:"task-list-item-label",for:"task-item-28"},De={href:"https://leetcode-cn.com/problems/triangle/",target:"_blank",rel:"noopener noreferrer"},He={class:"task-list-item"},Oe=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-29",disabled:"disabled"},null,-1),Pe={class:"task-list-item-label",for:"task-item-29"},Se={href:"https://leetcode-cn.com/problems/minimum-path-sum/",target:"_blank",rel:"noopener noreferrer"},Te={class:"task-list-item"},Ve=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-30",disabled:"disabled"},null,-1),Ee={class:"task-list-item-label",for:"task-item-30"},Fe={href:"https://leetcode-cn.com/problems/unique-paths/",target:"_blank",rel:"noopener noreferrer"},Ce={class:"task-list-item"},Ke=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-31",disabled:"disabled"},null,-1),We={class:"task-list-item-label",for:"task-item-31"},Xe={href:"https://leetcode-cn.com/problems/unique-paths-ii/",target:"_blank",rel:"noopener noreferrer"},Ze=s("p",null,"序列",-1),$e={class:"task-list-container"},Ae={class:"task-list-item"},Ge=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-32",disabled:"disabled"},null,-1),Je={class:"task-list-item-label",for:"task-item-32"},Qe={href:"https://leetcode-cn.com/problems/climbing-stairs/",target:"_blank",rel:"noopener noreferrer"},Re={class:"task-list-item"},Ue=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-33",disabled:"disabled"},null,-1),Ye={class:"task-list-item-label",for:"task-item-33"},st={href:"https://leetcode-cn.com/problems/jump-game/",target:"_blank",rel:"noopener noreferrer"},et={class:"task-list-item"},tt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-34",disabled:"disabled"},null,-1),at={class:"task-list-item-label",for:"task-item-34"},nt={href:"https://leetcode-cn.com/problems/jump-game-ii/",target:"_blank",rel:"noopener noreferrer"},ot={class:"task-list-item"},lt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-35",disabled:"disabled"},null,-1),it={class:"task-list-item-label",for:"task-item-35"},ct={href:"https://leetcode-cn.com/problems/palindrome-partitioning-ii/",target:"_blank",rel:"noopener noreferrer"},rt={class:"task-list-item"},pt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-36",checked:"checked",disabled:"disabled"},null,-1),dt={class:"task-list-item-label",for:"task-item-36"},kt={href:"https://leetcode-cn.com/problems/longest-increasing-subsequence/",target:"_blank",rel:"noopener noreferrer"},ht={class:"task-list-item"},ut=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-37",disabled:"disabled"},null,-1),_t={class:"task-list-item-label",for:"task-item-37"},bt={href:"https://leetcode-cn.com/problems/word-break/",target:"_blank",rel:"noopener noreferrer"},mt=s("p",null,"两个序列的DP",-1),ft={class:"task-list-container"},vt={class:"task-list-item"},xt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-38",disabled:"disabled"},null,-1),gt={class:"task-list-item-label",for:"task-item-38"},yt={href:"https://leetcode-cn.com/problems/longest-common-subsequence/",target:"_blank",rel:"noopener noreferrer"},wt={class:"task-list-item"},It=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-39",disabled:"disabled"},null,-1),jt={class:"task-list-item-label",for:"task-item-39"},Nt={href:"https://leetcode-cn.com/problems/edit-distance/",target:"_blank",rel:"noopener noreferrer"},Lt=s("p",null,"背包 & 零钱兑换",-1),Bt={class:"task-list-container"},Mt={class:"task-list-item"},zt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-40",disabled:"disabled"},null,-1),qt={class:"task-list-item-label",for:"task-item-40"},Dt={href:"https://leetcode-cn.com/problems/coin-change/",target:"_blank",rel:"noopener noreferrer"},Ht={class:"task-list-item"},Ot=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-41",disabled:"disabled"},null,-1),Pt={class:"task-list-item-label",for:"task-item-41"},St={href:"https://www.lintcode.com/problem/92/",target:"_blank",rel:"noopener noreferrer"},Tt={class:"task-list-item"},Vt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-42",disabled:"disabled"},null,-1),Et={class:"task-list-item-label",for:"task-item-42"},Ft={href:"https://www.lintcode.com/problem/125/",target:"_blank",rel:"noopener noreferrer"},Ct=s("h2",{id:"回溯-🚫",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#回溯-🚫","aria-hidden":"true"},"#"),e(" 回溯 🚫")],-1),Kt={class:"task-list-container"},Wt={class:"task-list-item"},Xt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-43",disabled:"disabled"},null,-1),Zt={class:"task-list-item-label",for:"task-item-43"},$t={href:"https://leetcode.cn/problems/subsets/",target:"_blank",rel:"noopener noreferrer"},At={class:"task-list-item"},Gt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-44",disabled:"disabled"},null,-1),Jt={class:"task-list-item-label",for:"task-item-44"},Qt={href:"https://leetcode.cn/problems/subsets-ii/",target:"_blank",rel:"noopener noreferrer"},Rt={class:"task-list-item"},Ut=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-45",disabled:"disabled"},null,-1),Yt={class:"task-list-item-label",for:"task-item-45"},sa={href:"https://leetcode.cn/problems/permutations/",target:"_blank",rel:"noopener noreferrer"},ea={class:"task-list-item"},ta=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-46",disabled:"disabled"},null,-1),aa={class:"task-list-item-label",for:"task-item-46"},na={href:"https://leetcode.cn/problems/permutations-ii/",target:"_blank",rel:"noopener noreferrer"},oa={class:"task-list-item"},la=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-47",disabled:"disabled"},null,-1),ia={class:"task-list-item-label",for:"task-item-47"},ca={href:"https://leetcode.cn/problems/combination-sum/",target:"_blank",rel:"noopener noreferrer"},ra={class:"task-list-item"},pa=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-48",disabled:"disabled"},null,-1),da={class:"task-list-item-label",for:"task-item-48"},ka={href:"https://leetcode.cn/problems/letter-combinations-of-a-phone-number/",target:"_blank",rel:"noopener noreferrer"},ha={class:"task-list-item"},ua=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-49",disabled:"disabled"},null,-1),_a={class:"task-list-item-label",for:"task-item-49"},ba={href:"https://leetcode.cn/problems/palindrome-partitioning/",target:"_blank",rel:"noopener noreferrer"},ma={class:"task-list-item"},fa=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-50",disabled:"disabled"},null,-1),va={class:"task-list-item-label",for:"task-item-50"},xa={href:"https://leetcode.cn/problems/restore-ip-addresses/",target:"_blank",rel:"noopener noreferrer"},ga=n('<h2 id="滑动窗口-🚫" tabindex="-1"><a class="header-anchor" href="#滑动窗口-🚫" aria-hidden="true">#</a> 滑动窗口 🚫</h2><h2 id="位运算-🚫" tabindex="-1"><a class="header-anchor" href="#位运算-🚫" aria-hidden="true">#</a> 位运算 🚫</h2><h2 id="分治-🚫" tabindex="-1"><a class="header-anchor" href="#分治-🚫" aria-hidden="true">#</a> 分治 🚫</h2><h2 id="贪心算法-🚫" tabindex="-1"><a class="header-anchor" href="#贪心算法-🚫" aria-hidden="true">#</a> 贪心算法 🚫</h2><h2 id="参考刷题顺序的仓库" tabindex="-1"><a class="header-anchor" href="#参考刷题顺序的仓库" aria-hidden="true">#</a> 参考刷题顺序的仓库</h2>',5),ya={href:"https://greyireland.gitbook.io/algorithm-pattern/shu-ju-jie-gou-pian/binary_tree",target:"_blank",rel:"noopener noreferrer"},wa={href:"https://labuladong.gitee.io/algo/",target:"_blank",rel:"noopener noreferrer"},Ia={href:"https://github.com/youngyangyang04/leetcode-master",target:"_blank",rel:"noopener noreferrer"},ja={href:"https://www.geekxh.com/",target:"_blank",rel:"noopener noreferrer"},Na=n(`<h1 id="力扣常用方法封装" tabindex="-1"><a class="header-anchor" href="#力扣常用方法封装" aria-hidden="true">#</a> 力扣常用方法封装</h1><h2 id="快慢指针找中间位置" tabindex="-1"><a class="header-anchor" href="#快慢指针找中间位置" aria-hidden="true">#</a> 快慢指针找中间位置</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ListNode</span> <span class="token function">endOfFirstHalf</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">,</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="反转链表" tabindex="-1"><a class="header-anchor" href="#反转链表" aria-hidden="true">#</a> 反转链表</h2><p>这里用的是力扣官方的代码，我的声明的变量稍微有点多</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> curr <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> next <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        curr<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>
        prev <span class="token operator">=</span> curr<span class="token punctuation">;</span>
        curr <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> prev<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="后序遍历" tabindex="-1"><a class="header-anchor" href="#后序遍历" aria-hidden="true">#</a> 后序遍历</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postorder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="计算最大深度" tabindex="-1"><a class="header-anchor" href="#计算最大深度" aria-hidden="true">#</a> 计算最大深度</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="判断是否是平衡二叉树" tabindex="-1"><a class="header-anchor" href="#判断是否是平衡二叉树" aria-hidden="true">#</a> 判断是否是平衡二叉树</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如果要用hashmap统计个数" tabindex="-1"><a class="header-anchor" href="#如果要用hashmap统计个数" aria-hidden="true">#</a> 如果要用HashMap统计个数</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 遍历数组，统计每个数字出现的次数</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function La(Ba,Ma){const t=c("ExternalLinkIcon");return l(),i("div",null,[p,d,k,h,s("ul",u,[s("li",_,[b,s("label",m,[s("a",f,[e("二叉树的最大深度"),a(t)])])]),s("li",v,[x,s("label",g,[s("a",y,[e(" 平衡二叉树"),a(t)])])]),s("li",w,[I,s("label",j,[s("a",N,[e("二叉树中的最大路径和"),a(t)])])]),s("li",L,[B,s("label",M,[s("a",z,[e("二叉树的最近公共祖先"),a(t)])])]),s("li",q,[D,s("label",H,[s("a",O,[e("二叉树的层序遍历"),a(t)])])]),s("li",P,[S,s("label",T,[s("a",V,[e("二叉树的层序遍历 II"),a(t)])])]),s("li",E,[F,s("label",C,[s("a",K,[e("二叉树的锯齿形层序遍历"),a(t)])])]),s("li",W,[X,s("label",Z,[s("a",$,[e("验证二叉搜索树"),a(t)])])]),s("li",A,[G,s("label",J,[s("a",Q,[e("二叉搜索树中的插入操作"),a(t)])])])]),R,s("ul",U,[s("li",Y,[ss,s("label",es,[s("a",ts,[e("删除排序链表中的重复元素"),a(t)])])]),s("li",as,[ns,s("label",os,[s("a",ls,[e("删除排序链表中的重复元素 II"),a(t)])])]),s("li",is,[cs,s("label",rs,[s("a",ps,[e("反转链表"),a(t)])])]),s("li",ds,[ks,s("label",hs,[s("a",us,[e("反转链表 II"),a(t)])])]),s("li",_s,[bs,s("label",ms,[s("a",fs,[e("合并两个有序链表"),a(t)])])]),s("li",vs,[xs,s("label",gs,[s("a",ys,[e("分隔链表"),a(t)])])]),s("li",ws,[Is,s("label",js,[s("a",Ns,[e("排序链表"),a(t)])])]),s("li",Ls,[Bs,s("label",Ms,[s("a",zs,[e("重排链表"),a(t)])])]),s("li",qs,[Ds,s("label",Hs,[s("a",Os,[e("环形链表"),a(t)])])]),s("li",Ps,[Ss,s("label",Ts,[s("a",Vs,[e("环形链表 II"),a(t)])])]),s("li",Es,[Fs,s("label",Cs,[s("a",Ks,[e("回文链表"),a(t)])])]),s("li",Ws,[Xs,s("label",Zs,[s("a",$s,[e("复制带随机指针的链表"),a(t)])])])]),As,Gs,Js,s("ul",Qs,[s("li",Rs,[s("p",null,[Us,s("label",Ys,[s("a",se,[e("反转字符串"),a(t)])])])]),s("li",ee,[s("p",null,[te,s("label",ae,[s("a",ne,[e("反转字符串 II"),a(t)])])])]),s("li",oe,[s("p",null,[le,s("label",ie,[s("a",ce,[e("剑指 Offer 05. 替换空格"),a(t)])])])]),s("li",re,[s("p",null,[pe,s("label",de,[s("a",ke,[e("颠倒字符串中的单词"),a(t)])])])]),s("li",he,[s("p",null,[ue,s("label",_e,[s("a",be,[e("剑指 Offer 58 - II. 左旋转字符串"),a(t)])])])]),s("li",me,[s("p",null,[fe,s("label",ve,[s("a",xe,[e("实现 strStr()"),a(t)])])])]),s("li",ge,[s("p",null,[ye,s("label",we,[s("a",Ie,[e("重复的子字符串"),a(t)])])])])]),je,Ne,Le,s("ul",Be,[s("li",Me,[ze,s("label",qe,[s("a",De,[e("三角形最小路径和"),a(t)])])]),s("li",He,[Oe,s("label",Pe,[s("a",Se,[e("最小路径和"),a(t)])])]),s("li",Te,[Ve,s("label",Ee,[s("a",Fe,[e("不同路径"),a(t)])])]),s("li",Ce,[Ke,s("label",We,[s("a",Xe,[e("不同路径 II"),a(t)])])])]),Ze,s("ul",$e,[s("li",Ae,[Ge,s("label",Je,[s("a",Qe,[e("爬楼梯"),a(t)])])]),s("li",Re,[Ue,s("label",Ye,[s("a",st,[e("跳跃游戏"),a(t)])])]),s("li",et,[tt,s("label",at,[s("a",nt,[e("跳跃游戏 II"),a(t)])])]),s("li",ot,[lt,s("label",it,[s("a",ct,[e("分割回文串 II"),a(t)])])]),s("li",rt,[pt,s("label",dt,[s("a",kt,[e("最长递增子序列"),a(t)])])]),s("li",ht,[ut,s("label",_t,[s("a",bt,[e("单词拆分"),a(t)])])])]),mt,s("ul",ft,[s("li",vt,[xt,s("label",gt,[s("a",yt,[e("最长公共子序列"),a(t)])])]),s("li",wt,[It,s("label",jt,[s("a",Nt,[e("编辑距离"),a(t)])])])]),Lt,s("ul",Bt,[s("li",Mt,[zt,s("label",qt,[s("a",Dt,[e("零钱兑换"),a(t)])])]),s("li",Ht,[Ot,s("label",Pt,[s("a",St,[e("背包问题"),a(t)])])]),s("li",Tt,[Vt,s("label",Et,[s("a",Ft,[e("背包问题（二）"),a(t)])])])]),Ct,s("ul",Kt,[s("li",Wt,[Xt,s("label",Zt,[s("a",$t,[e("子集"),a(t)])])]),s("li",At,[Gt,s("label",Jt,[s("a",Qt,[e("子集 II"),a(t)])])]),s("li",Rt,[Ut,s("label",Yt,[s("a",sa,[e("全排列"),a(t)])])]),s("li",ea,[ta,s("label",aa,[s("a",na,[e("全排列 II"),a(t)])])]),s("li",oa,[la,s("label",ia,[s("a",ca,[e("组合总和"),a(t)])])]),s("li",ra,[pa,s("label",da,[s("a",ka,[e("电话号码的字母组合"),a(t)])])]),s("li",ha,[ua,s("label",_a,[s("a",ba,[e("分割回文串"),a(t)])])]),s("li",ma,[fa,s("label",va,[s("a",xa,[e("复原 IP 地址"),a(t)])])])]),ga,s("p",null,[e("算法模板："),s("a",ya,[e("https://greyireland.gitbook.io/algorithm-pattern/shu-ju-jie-gou-pian/binary_tree"),a(t)])]),s("p",null,[e("labuladong 的算法："),s("a",wa,[e("https://labuladong.gitee.io/algo/"),a(t)])]),s("p",null,[e("代码随想录："),s("a",Ia,[e("https://github.com/youngyangyang04/leetcode-master"),a(t)])]),s("p",null,[e("小浩算法："),s("a",ja,[e("https://www.geekxh.com/"),a(t)])]),Na])}const qa=o(r,[["render",La],["__file","leetcode.html.vue"]]);export{qa as default};
