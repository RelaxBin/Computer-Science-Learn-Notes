import{_ as o,W as l,X as p,a0 as s,a1 as n,Z as t,$ as e,C as c}from"./framework-c8643d23.js";const i={},r=s("h1",{id:"算法模板",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#算法模板","aria-hidden":"true"},"#"),n(" 算法模板")],-1),u=s("p",null,"光看模板肯定看不懂的，刷几道题就明白了",-1),d={href:"https://github.com/labuladong/fucking-algorithm",target:"_blank",rel:"noopener noreferrer"},k=e(`<h2 id="二分查找" tabindex="-1"><a class="header-anchor" href="#二分查找" aria-hidden="true">#</a> 二分查找</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="双指针" tabindex="-1"><a class="header-anchor" href="#双指针" aria-hidden="true">#</a> 双指针</h2><h3 id="快慢指针的常见算法" tabindex="-1"><a class="header-anchor" href="#快慢指针的常见算法" aria-hidden="true">#</a> 快慢指针的常见算法</h3><h4 id="判定链表中是否含有环" tabindex="-1"><a class="header-anchor" href="#判定链表中是否含有环" aria-hidden="true">#</a> 判定链表中是否含有环</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> fast<span class="token punctuation">,</span> slow<span class="token punctuation">;</span>
    fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="已知链表中含有环-返回这个环的起始位置" tabindex="-1"><a class="header-anchor" href="#已知链表中含有环-返回这个环的起始位置" aria-hidden="true">#</a> 已知链表中含有环，返回这个环的起始位置</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ListNode</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> fast<span class="token punctuation">,</span> slow<span class="token punctuation">;</span>
    fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 上面的代码类似 hasCycle 函数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> fast<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// fast 遇到空指针说明没有环</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="寻找链表的中点" tabindex="-1"><a class="header-anchor" href="#寻找链表的中点" aria-hidden="true">#</a> 寻找链表的中点</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// slow 就在中间位置</span>
<span class="token keyword">return</span> slow<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="寻找链表的倒数第-k-个元素" tabindex="-1"><a class="header-anchor" href="#寻找链表的倒数第-k-个元素" aria-hidden="true">#</a> 寻找链表的倒数第 k 个元素</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ListNode</span> slow<span class="token punctuation">,</span> fast<span class="token punctuation">;</span>
slow <span class="token operator">=</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> 
    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> slow<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="左右指针的常用算法" tabindex="-1"><a class="header-anchor" href="#左右指针的常用算法" aria-hidden="true">#</a> 左右指针的常用算法</h3><h4 id="二分查找-1" tabindex="-1"><a class="header-anchor" href="#二分查找-1" aria-hidden="true">#</a> 二分查找</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
    <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">+</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span>
            <span class="token keyword">return</span> mid<span class="token punctuation">;</span> 
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> 
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="两数之和" tabindex="-1"><a class="header-anchor" href="#两数之和" aria-hidden="true">#</a> 两数之和</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 题目要求的索引是从 1 开始的</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 让 sum 大一点</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 让 sum 小一点</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="反转数组" tabindex="-1"><a class="header-anchor" href="#反转数组" aria-hidden="true">#</a> 反转数组</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// swap(nums[left], nums[right])</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span> right<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="滑动窗口算法" tabindex="-1"><a class="header-anchor" href="#滑动窗口算法" aria-hidden="true">#</a> 滑动窗口算法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/* 滑动窗口算法框架 */</span>
<span class="token keyword">void</span> <span class="token function">slidingWindow</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    unordered_map<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> need<span class="token punctuation">,</span> window<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> t<span class="token punctuation">)</span> need<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// c 是将移入窗口的字符</span>
        <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 右移窗口</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// 进行窗口内数据的一系列更新</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

        <span class="token doc-comment comment">/*** debug 输出的位置 ***/</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;window: [%d, %d)\\n&quot;</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/********************/</span>

        <span class="token comment">// 判断左侧窗口是否要收缩</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>window needs shrink<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// d 是将移出窗口的字符</span>
            <span class="token keyword">char</span> d <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 左移窗口</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment">// 进行窗口内数据的一系列更新</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="回溯" tabindex="-1"><a class="header-anchor" href="#回溯" aria-hidden="true">#</a> 回溯</h2><p>回溯的大致模板就是以下，掌握三个核心点就行：</p><ul><li>递归函数</li><li>递归里肯定有一个if（至少一个）</li><li>递归里或者外面有一个for循环 完毕，剩下的自己刷题领悟，下面是模板</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 主函数，输入一组不重复的数字，返回它们的全排列 */</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 记录「路径」</span>
    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> track <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> track<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 路径：记录在 track 中</span>
<span class="token comment">// 选择列表：nums 中不存在于 track 的那些元素</span>
<span class="token comment">// 结束条件：nums 中的元素全都在 track 中出现</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> track<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 触发结束条件</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>track<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span>track<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 排除不合法的选择</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>track<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token comment">// 做选择</span>
        track<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 进入下一层决策树</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> track<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 取消选择</span>
        track<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例题：</p>`,27),m={href:"https://leetcode.cn/problems/permutations/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://leetcode.cn/submissions/detail/432257030/",target:"_blank",rel:"noopener noreferrer"},h=e(`<h2 id="贪心" tabindex="-1"><a class="header-anchor" href="#贪心" aria-hidden="true">#</a> 贪心</h2><p>贪心的3个核心点：</p><ul><li>for循环</li><li>Math.max</li><li>数组中的当前元素和前一个元素相关（至于为什么刷完题就知道了）</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>bool <span class="token function">canJump</span><span class="token punctuation">(</span>vector<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> farthest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 不断计算能跳到的最远距离</span>
        farthest <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>farthest<span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 可能碰到了 0，卡住跳不动了</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>farthest <span class="token operator">&lt;=</span> i<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> farthest <span class="token operator">&gt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>贪心就是通过局部最优求全局最优，最两道题就明白了</p>`,5),_={href:"https://leetcode.cn/problems/jump-game/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/description/",target:"_blank",rel:"noopener noreferrer"},f=e(`<h2 id="动态规划" tabindex="-1"><a class="header-anchor" href="#动态规划" aria-hidden="true">#</a> 动态规划</h2><p>动态规划是我最怕的题目之一，主要是要思考状态转移方程</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># 初始化 base <span class="token keyword">case</span>
dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token operator">=</span> base
# 进行状态转移
<span class="token keyword">for</span> 状态<span class="token number">1</span> in 状态<span class="token number">1</span>的所有取值：
    <span class="token keyword">for</span> 状态<span class="token number">2</span> in 状态<span class="token number">2</span>的所有取值：
        <span class="token keyword">for</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            dp<span class="token punctuation">[</span>状态<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>状态<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token operator">=</span> 求最值<span class="token punctuation">(</span>选择<span class="token number">1</span>，选择<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推荐两道题去理解动态规划：</p>`,4),g={href:"https://leetcode.cn/problems/unique-paths/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://leetcode.cn/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/",target:"_blank",rel:"noopener noreferrer"},w=e('<h2 id="分治" tabindex="-1"><a class="header-anchor" href="#分治" aria-hidden="true">#</a> 分治</h2><p>@todo</p><h2 id="并查集" tabindex="-1"><a class="header-anchor" href="#并查集" aria-hidden="true">#</a> 并查集</h2><p>@todo</p><h1 id="刷题顺序" tabindex="-1"><a class="header-anchor" href="#刷题顺序" aria-hidden="true">#</a> 刷题顺序</h1><h2 id="二叉树-✅" tabindex="-1"><a class="header-anchor" href="#二叉树-✅" aria-hidden="true">#</a> 二叉树 ✅</h2><ul><li>掌握二叉树递归与非递归遍历</li><li>理解 DFS 前序遍历与分治法</li><li>理解 BFS 层次遍历</li></ul><p>精选：</p>',8),x={class:"task-list-container"},j={class:"task-list-item"},I=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-0",disabled:"disabled"},null,-1),L={class:"task-list-item-label",for:"task-item-0"},N={href:"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/",target:"_blank",rel:"noopener noreferrer"},q={class:"task-list-item"},z=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-1",disabled:"disabled"},null,-1),B={class:"task-list-item-label",for:"task-item-1"},M={href:"https://leetcode-cn.com/problems/balanced-binary-tree/",target:"_blank",rel:"noopener noreferrer"},S={class:"task-list-item"},C=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-2",disabled:"disabled"},null,-1),O={class:"task-list-item-label",for:"task-item-2"},D={href:"https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/",target:"_blank",rel:"noopener noreferrer"},H={class:"task-list-item"},P=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-3",disabled:"disabled"},null,-1),T={class:"task-list-item-label",for:"task-item-3"},V={href:"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/",target:"_blank",rel:"noopener noreferrer"},E={class:"task-list-item"},F=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-4",disabled:"disabled"},null,-1),W={class:"task-list-item-label",for:"task-item-4"},J={href:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/",target:"_blank",rel:"noopener noreferrer"},K={class:"task-list-item"},X=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-5",disabled:"disabled"},null,-1),Z={class:"task-list-item-label",for:"task-item-5"},$={href:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/",target:"_blank",rel:"noopener noreferrer"},A={class:"task-list-item"},G=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-6",disabled:"disabled"},null,-1),Q={class:"task-list-item-label",for:"task-item-6"},R={href:"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/",target:"_blank",rel:"noopener noreferrer"},U={class:"task-list-item"},Y=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-7",disabled:"disabled"},null,-1),ss={class:"task-list-item-label",for:"task-item-7"},ns={href:"https://leetcode-cn.com/problems/validate-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},as={class:"task-list-item"},ts=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-8",disabled:"disabled"},null,-1),es={class:"task-list-item-label",for:"task-item-8"},os={href:"https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},ls=e('<h2 id="链表-✅" tabindex="-1"><a class="header-anchor" href="#链表-✅" aria-hidden="true">#</a> 链表 ✅</h2><ul><li>null/nil异常处理</li><li>dummy node哑巴节点</li><li>快慢指针</li><li>插入一个节点到排序链表</li><li>从一个链表中移除一个节点</li><li>翻转链表</li><li>合并两个链表</li><li>找到链表的中间节点</li></ul>',2),ps={class:"task-list-container"},cs={class:"task-list-item"},is=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-9",disabled:"disabled"},null,-1),rs={class:"task-list-item-label",for:"task-item-9"},us={href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/",target:"_blank",rel:"noopener noreferrer"},ds={class:"task-list-item"},ks=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-10",disabled:"disabled"},null,-1),ms={class:"task-list-item-label",for:"task-item-10"},bs={href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/",target:"_blank",rel:"noopener noreferrer"},hs={class:"task-list-item"},_s=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-11",disabled:"disabled"},null,-1),vs={class:"task-list-item-label",for:"task-item-11"},fs={href:"https://leetcode-cn.com/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"},gs={class:"task-list-item"},ys=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-12",disabled:"disabled"},null,-1),ws={class:"task-list-item-label",for:"task-item-12"},xs={href:"https://leetcode-cn.com/problems/reverse-linked-list-ii/",target:"_blank",rel:"noopener noreferrer"},js={class:"task-list-item"},Is=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-13",disabled:"disabled"},null,-1),Ls={class:"task-list-item-label",for:"task-item-13"},Ns={href:"https://leetcode-cn.com/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"},qs={class:"task-list-item"},zs=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-14",disabled:"disabled"},null,-1),Bs={class:"task-list-item-label",for:"task-item-14"},Ms={href:"https://leetcode-cn.com/problems/partition-list/",target:"_blank",rel:"noopener noreferrer"},Ss={class:"task-list-item"},Cs=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-15",disabled:"disabled"},null,-1),Os={class:"task-list-item-label",for:"task-item-15"},Ds={href:"https://leetcode-cn.com/problems/sort-list/",target:"_blank",rel:"noopener noreferrer"},Hs={class:"task-list-item"},Ps=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-16",disabled:"disabled"},null,-1),Ts={class:"task-list-item-label",for:"task-item-16"},Vs={href:"https://leetcode-cn.com/problems/reorder-list/",target:"_blank",rel:"noopener noreferrer"},Es={class:"task-list-item"},Fs=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-17",disabled:"disabled"},null,-1),Ws={class:"task-list-item-label",for:"task-item-17"},Js={href:"https://leetcode-cn.com/problems/linked-list-cycle/",target:"_blank",rel:"noopener noreferrer"},Ks={class:"task-list-item"},Xs=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-18",disabled:"disabled"},null,-1),Zs={class:"task-list-item-label",for:"task-item-18"},$s={href:"https://leetcode-cn.com/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"},As={class:"task-list-item"},Gs=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-19",disabled:"disabled"},null,-1),Qs={class:"task-list-item-label",for:"task-item-19"},Rs={href:"https://leetcode-cn.com/problems/palindrome-linked-list/",target:"_blank",rel:"noopener noreferrer"},Us={class:"task-list-item"},Ys=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-20",disabled:"disabled"},null,-1),sn={class:"task-list-item-label",for:"task-item-20"},nn={href:"https://leetcode-cn.com/problems/copy-list-with-random-pointer/",target:"_blank",rel:"noopener noreferrer"},an=s("h2",{id:"字符串-✅",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#字符串-✅","aria-hidden":"true"},"#"),n(" 字符串 ✅")],-1),tn=s("p",null,"需要考虑的问题：",-1),en=s("ol",null,[s("li",null,"要不要使用库函数"),s("li",null,"双指针法"),s("li",null,"反转系列"),s("li",null,"KMP")],-1),on={class:"task-list-container"},ln={class:"task-list-item"},pn=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-21",disabled:"disabled"},null,-1),cn={class:"task-list-item-label",for:"task-item-21"},rn={href:"https://leetcode-cn.com/problems/reverse-string/",target:"_blank",rel:"noopener noreferrer"},un={class:"task-list-item"},dn=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-22",disabled:"disabled"},null,-1),kn={class:"task-list-item-label",for:"task-item-22"},mn={href:"https://leetcode-cn.com/problems/reverse-string-ii/",target:"_blank",rel:"noopener noreferrer"},bn={class:"task-list-item"},hn=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-23",disabled:"disabled"},null,-1),_n={class:"task-list-item-label",for:"task-item-23"},vn={href:"https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/",target:"_blank",rel:"noopener noreferrer"},fn={class:"task-list-item"},gn=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-24",disabled:"disabled"},null,-1),yn={class:"task-list-item-label",for:"task-item-24"},wn={href:"https://leetcode-cn.com/problems/reverse-words-in-a-string/",target:"_blank",rel:"noopener noreferrer"},xn={class:"task-list-item"},jn=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-25",disabled:"disabled"},null,-1),In={class:"task-list-item-label",for:"task-item-25"},Ln={href:"https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/",target:"_blank",rel:"noopener noreferrer"},Nn={class:"task-list-item"},qn=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-26",disabled:"disabled"},null,-1),zn={class:"task-list-item-label",for:"task-item-26"},Bn={href:"https://leetcode-cn.com/problems/implement-strstr/",target:"_blank",rel:"noopener noreferrer"},Mn={class:"task-list-item"},Sn=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-27",disabled:"disabled"},null,-1),Cn={class:"task-list-item-label",for:"task-item-27"},On={href:"https://leetcode-cn.com/problems/repeated-substring-pattern/",target:"_blank",rel:"noopener noreferrer"},Dn=s("h2",{id:"动态规划-🚫",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#动态规划-🚫","aria-hidden":"true"},"#"),n(" 动态规划 🚫")],-1),Hn=s("p",null,"最长递增子序列 ➡️ 单词拆分 ➡️ 编辑距离",-1),Pn=s("p",null,"矩阵DP",-1),Tn={class:"task-list-container"},Vn={class:"task-list-item"},En=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-28",disabled:"disabled"},null,-1),Fn={class:"task-list-item-label",for:"task-item-28"},Wn={href:"https://leetcode-cn.com/problems/triangle/",target:"_blank",rel:"noopener noreferrer"},Jn={class:"task-list-item"},Kn=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-29",disabled:"disabled"},null,-1),Xn={class:"task-list-item-label",for:"task-item-29"},Zn={href:"https://leetcode-cn.com/problems/minimum-path-sum/",target:"_blank",rel:"noopener noreferrer"},$n={class:"task-list-item"},An=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-30",disabled:"disabled"},null,-1),Gn={class:"task-list-item-label",for:"task-item-30"},Qn={href:"https://leetcode-cn.com/problems/unique-paths/",target:"_blank",rel:"noopener noreferrer"},Rn={class:"task-list-item"},Un=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-31",disabled:"disabled"},null,-1),Yn={class:"task-list-item-label",for:"task-item-31"},sa={href:"https://leetcode-cn.com/problems/unique-paths-ii/",target:"_blank",rel:"noopener noreferrer"},na=s("p",null,"序列",-1),aa={class:"task-list-container"},ta={class:"task-list-item"},ea=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-32",disabled:"disabled"},null,-1),oa={class:"task-list-item-label",for:"task-item-32"},la={href:"https://leetcode-cn.com/problems/climbing-stairs/",target:"_blank",rel:"noopener noreferrer"},pa={class:"task-list-item"},ca=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-33",disabled:"disabled"},null,-1),ia={class:"task-list-item-label",for:"task-item-33"},ra={href:"https://leetcode-cn.com/problems/jump-game/",target:"_blank",rel:"noopener noreferrer"},ua={class:"task-list-item"},da=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-34",disabled:"disabled"},null,-1),ka={class:"task-list-item-label",for:"task-item-34"},ma={href:"https://leetcode-cn.com/problems/jump-game-ii/",target:"_blank",rel:"noopener noreferrer"},ba={class:"task-list-item"},ha=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-35",disabled:"disabled"},null,-1),_a={class:"task-list-item-label",for:"task-item-35"},va={href:"https://leetcode-cn.com/problems/palindrome-partitioning-ii/",target:"_blank",rel:"noopener noreferrer"},fa={class:"task-list-item"},ga=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-36",disabled:"disabled"},null,-1),ya={class:"task-list-item-label",for:"task-item-36"},wa={href:"https://leetcode-cn.com/problems/longest-increasing-subsequence/",target:"_blank",rel:"noopener noreferrer"},xa={class:"task-list-item"},ja=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-37",disabled:"disabled"},null,-1),Ia={class:"task-list-item-label",for:"task-item-37"},La={href:"https://leetcode-cn.com/problems/word-break/",target:"_blank",rel:"noopener noreferrer"},Na=s("p",null,"两个序列的DP",-1),qa={class:"task-list-container"},za={class:"task-list-item"},Ba=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-38",disabled:"disabled"},null,-1),Ma={class:"task-list-item-label",for:"task-item-38"},Sa={href:"https://leetcode-cn.com/problems/longest-common-subsequence/",target:"_blank",rel:"noopener noreferrer"},Ca={class:"task-list-item"},Oa=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-39",disabled:"disabled"},null,-1),Da={class:"task-list-item-label",for:"task-item-39"},Ha={href:"https://leetcode-cn.com/problems/edit-distance/",target:"_blank",rel:"noopener noreferrer"},Pa=s("p",null,"背包 & 零钱兑换",-1),Ta={class:"task-list-container"},Va={class:"task-list-item"},Ea=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-40",disabled:"disabled"},null,-1),Fa={class:"task-list-item-label",for:"task-item-40"},Wa={href:"https://leetcode-cn.com/problems/coin-change/",target:"_blank",rel:"noopener noreferrer"},Ja={class:"task-list-item"},Ka=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-41",disabled:"disabled"},null,-1),Xa={class:"task-list-item-label",for:"task-item-41"},Za={href:"https://www.lintcode.com/problem/92/",target:"_blank",rel:"noopener noreferrer"},$a={class:"task-list-item"},Aa=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-42",disabled:"disabled"},null,-1),Ga={class:"task-list-item-label",for:"task-item-42"},Qa={href:"https://www.lintcode.com/problem/125/",target:"_blank",rel:"noopener noreferrer"},Ra=s("h2",{id:"回溯-1",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#回溯-1","aria-hidden":"true"},"#"),n(" 回溯")],-1),Ua={class:"task-list-container"},Ya={class:"task-list-item"},st=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-43",disabled:"disabled"},null,-1),nt={class:"task-list-item-label",for:"task-item-43"},at={href:"https://leetcode.cn/problems/subsets/",target:"_blank",rel:"noopener noreferrer"},tt={class:"task-list-item"},et=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-44",disabled:"disabled"},null,-1),ot={class:"task-list-item-label",for:"task-item-44"},lt={href:"https://leetcode.cn/problems/subsets-ii/",target:"_blank",rel:"noopener noreferrer"},pt={class:"task-list-item"},ct=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-45",disabled:"disabled"},null,-1),it={class:"task-list-item-label",for:"task-item-45"},rt={href:"https://leetcode.cn/problems/permutations/",target:"_blank",rel:"noopener noreferrer"},ut={class:"task-list-item"},dt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-46",disabled:"disabled"},null,-1),kt={class:"task-list-item-label",for:"task-item-46"},mt={href:"https://leetcode.cn/problems/permutations-ii/",target:"_blank",rel:"noopener noreferrer"},bt={class:"task-list-item"},ht=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-47",disabled:"disabled"},null,-1),_t={class:"task-list-item-label",for:"task-item-47"},vt={href:"https://leetcode.cn/problems/combination-sum/",target:"_blank",rel:"noopener noreferrer"},ft={class:"task-list-item"},gt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-48",disabled:"disabled"},null,-1),yt={class:"task-list-item-label",for:"task-item-48"},wt={href:"https://leetcode.cn/problems/letter-combinations-of-a-phone-number/",target:"_blank",rel:"noopener noreferrer"},xt={class:"task-list-item"},jt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-49",disabled:"disabled"},null,-1),It={class:"task-list-item-label",for:"task-item-49"},Lt={href:"https://leetcode.cn/problems/palindrome-partitioning/",target:"_blank",rel:"noopener noreferrer"},Nt={class:"task-list-item"},qt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-50",disabled:"disabled"},null,-1),zt={class:"task-list-item-label",for:"task-item-50"},Bt={href:"https://leetcode.cn/problems/restore-ip-addresses/",target:"_blank",rel:"noopener noreferrer"},Mt=s("h2",{id:"滑动窗口",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#滑动窗口","aria-hidden":"true"},"#"),n(" 滑动窗口")],-1),St={class:"task-list-container"},Ct={class:"task-list-item"},Ot=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-51",disabled:"disabled"},null,-1),Dt={class:"task-list-item-label",for:"task-item-51"},Ht={href:"https://leetcode.cn/problems/sliding-window-maximum/",target:"_blank",rel:"noopener noreferrer"},Pt={class:"task-list-item"},Tt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-52",disabled:"disabled"},null,-1),Vt={class:"task-list-item-label",for:"task-item-52"},Et={href:"https://leetcode.cn/problems/longest-substring-without-repeating-characters/",target:"_blank",rel:"noopener noreferrer"},Ft={class:"task-list-item"},Wt=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-53",disabled:"disabled"},null,-1),Jt={class:"task-list-item-label",for:"task-item-53"},Kt={href:"https://leetcode.cn/problems/find-all-anagrams-in-a-string/",target:"_blank",rel:"noopener noreferrer"},Xt=s("h2",{id:"位运算",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#位运算","aria-hidden":"true"},"#"),n(" 位运算")],-1),Zt={class:"task-list-container"},$t={class:"task-list-item"},At=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-54",disabled:"disabled"},null,-1),Gt={class:"task-list-item-label",for:"task-item-54"},Qt={href:"https://leetcode.cn/problems/power-of-two/",target:"_blank",rel:"noopener noreferrer"},Rt={class:"task-list-item"},Ut=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-55",disabled:"disabled"},null,-1),Yt={class:"task-list-item-label",for:"task-item-55"},se={href:"https://leetcode.cn/problems/number-of-1-bits/",target:"_blank",rel:"noopener noreferrer"},ne={class:"task-list-item"},ae=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-56",disabled:"disabled"},null,-1),te={class:"task-list-item-label",for:"task-item-56"},ee={href:"https://leetcode.cn/problems/single-number/",target:"_blank",rel:"noopener noreferrer"},oe={class:"task-list-item"},le=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-57",disabled:"disabled"},null,-1),pe={class:"task-list-item-label",for:"task-item-57"},ce={href:"https://leetcode.cn/problems/single-number-ii/",target:"_blank",rel:"noopener noreferrer"},ie={class:"task-list-item"},re=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-58",disabled:"disabled"},null,-1),ue={class:"task-list-item-label",for:"task-item-58"},de={href:"https://leetcode.cn/problems/missing-number/",target:"_blank",rel:"noopener noreferrer"},ke=e('<h2 id="分治-1" tabindex="-1"><a class="header-anchor" href="#分治-1" aria-hidden="true">#</a> 分治</h2><p>@todo</p><h2 id="贪心算法" tabindex="-1"><a class="header-anchor" href="#贪心算法" aria-hidden="true">#</a> 贪心算法</h2><p>@todo</p><h2 id="参考刷题顺序的仓库" tabindex="-1"><a class="header-anchor" href="#参考刷题顺序的仓库" aria-hidden="true">#</a> 参考刷题顺序的仓库</h2>',5),me={href:"https://greyireland.gitbook.io/algorithm-pattern/shu-ju-jie-gou-pian/binary_tree",target:"_blank",rel:"noopener noreferrer"},be={href:"https://labuladong.gitee.io/algo/",target:"_blank",rel:"noopener noreferrer"},he={href:"https://github.com/youngyangyang04/leetcode-master",target:"_blank",rel:"noopener noreferrer"},_e={href:"https://www.geekxh.com/",target:"_blank",rel:"noopener noreferrer"},ve=e(`<h1 id="力扣常用方法封装" tabindex="-1"><a class="header-anchor" href="#力扣常用方法封装" aria-hidden="true">#</a> 力扣常用方法封装</h1><h2 id="快慢指针找中间位置" tabindex="-1"><a class="header-anchor" href="#快慢指针找中间位置" aria-hidden="true">#</a> 快慢指针找中间位置</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ListNode</span> <span class="token function">endOfFirstHalf</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">,</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="反转链表" tabindex="-1"><a class="header-anchor" href="#反转链表" aria-hidden="true">#</a> 反转链表</h2><p>这里用的是力扣官方的代码，我的声明的变量稍微有点多</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> curr <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> next <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        curr<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>
        prev <span class="token operator">=</span> curr<span class="token punctuation">;</span>
        curr <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> prev<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="后序遍历" tabindex="-1"><a class="header-anchor" href="#后序遍历" aria-hidden="true">#</a> 后序遍历</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postorder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">postorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="计算最大深度" tabindex="-1"><a class="header-anchor" href="#计算最大深度" aria-hidden="true">#</a> 计算最大深度</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="判断是否是平衡二叉树" tabindex="-1"><a class="header-anchor" href="#判断是否是平衡二叉树" aria-hidden="true">#</a> 判断是否是平衡二叉树</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如果要用hashmap统计个数" tabindex="-1"><a class="header-anchor" href="#如果要用hashmap统计个数" aria-hidden="true">#</a> 如果要用HashMap统计个数</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 遍历数组，统计每个数字出现的次数</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function fe(ge,ye){const a=c("ExternalLinkIcon");return l(),p("div",null,[r,u,s("ul",null,[s("li",null,[n("部分参考了"),s("a",d,[n("lambdadong的算法小炒"),t(a)])])]),k,s("ul",null,[s("li",null,[s("a",m,[n("全排列"),t(a)])]),s("li",null,[s("a",b,[n("单词搜索"),t(a)])])]),h,s("ul",null,[s("li",null,[s("a",_,[n("跳跃游戏"),t(a)])]),s("li",null,[s("a",v,[n("买卖股票的最佳时机 II"),t(a)])])]),f,s("ul",null,[s("li",null,[s("a",g,[n("不同路径"),t(a)])]),s("li",null,[s("a",y,[n("剑指 Offer 13. 机器人的运动范围"),t(a)])])]),w,s("ul",x,[s("li",j,[I,s("label",L,[s("a",N,[n("二叉树的最大深度"),t(a)])])]),s("li",q,[z,s("label",B,[s("a",M,[n(" 平衡二叉树"),t(a)])])]),s("li",S,[C,s("label",O,[s("a",D,[n("二叉树中的最大路径和"),t(a)])])]),s("li",H,[P,s("label",T,[s("a",V,[n("二叉树的最近公共祖先"),t(a)])])]),s("li",E,[F,s("label",W,[s("a",J,[n("二叉树的层序遍历"),t(a)])])]),s("li",K,[X,s("label",Z,[s("a",$,[n("二叉树的层序遍历 II"),t(a)])])]),s("li",A,[G,s("label",Q,[s("a",R,[n("二叉树的锯齿形层序遍历"),t(a)])])]),s("li",U,[Y,s("label",ss,[s("a",ns,[n("验证二叉搜索树"),t(a)])])]),s("li",as,[ts,s("label",es,[s("a",os,[n("二叉搜索树中的插入操作"),t(a)])])])]),ls,s("ul",ps,[s("li",cs,[is,s("label",rs,[s("a",us,[n("删除排序链表中的重复元素"),t(a)])])]),s("li",ds,[ks,s("label",ms,[s("a",bs,[n("删除排序链表中的重复元素 II"),t(a)])])]),s("li",hs,[_s,s("label",vs,[s("a",fs,[n("反转链表"),t(a)])])]),s("li",gs,[ys,s("label",ws,[s("a",xs,[n("反转链表 II"),t(a)])])]),s("li",js,[Is,s("label",Ls,[s("a",Ns,[n("合并两个有序链表"),t(a)])])]),s("li",qs,[zs,s("label",Bs,[s("a",Ms,[n("分隔链表"),t(a)])])]),s("li",Ss,[Cs,s("label",Os,[s("a",Ds,[n("排序链表"),t(a)])])]),s("li",Hs,[Ps,s("label",Ts,[s("a",Vs,[n("重排链表"),t(a)])])]),s("li",Es,[Fs,s("label",Ws,[s("a",Js,[n("环形链表"),t(a)])])]),s("li",Ks,[Xs,s("label",Zs,[s("a",$s,[n("环形链表 II"),t(a)])])]),s("li",As,[Gs,s("label",Qs,[s("a",Rs,[n("回文链表"),t(a)])])]),s("li",Us,[Ys,s("label",sn,[s("a",nn,[n("复制带随机指针的链表"),t(a)])])])]),an,tn,en,s("ul",on,[s("li",ln,[pn,s("label",cn,[s("a",rn,[n("反转字符串"),t(a)])])]),s("li",un,[dn,s("label",kn,[s("a",mn,[n("反转字符串 II"),t(a)])])]),s("li",bn,[hn,s("label",_n,[s("a",vn,[n("剑指 Offer 05. 替换空格"),t(a)])])]),s("li",fn,[gn,s("label",yn,[s("a",wn,[n("颠倒字符串中的单词"),t(a)])])]),s("li",xn,[jn,s("label",In,[s("a",Ln,[n("剑指 Offer 58 - II. 左旋转字符串"),t(a)])])]),s("li",Nn,[qn,s("label",zn,[s("a",Bn,[n("实现 strStr()"),t(a)])])]),s("li",Mn,[Sn,s("label",Cn,[s("a",On,[n("重复的子字符串"),t(a)])])])]),Dn,Hn,Pn,s("ul",Tn,[s("li",Vn,[En,s("label",Fn,[s("a",Wn,[n("三角形最小路径和"),t(a)])])]),s("li",Jn,[Kn,s("label",Xn,[s("a",Zn,[n("最小路径和"),t(a)])])]),s("li",$n,[An,s("label",Gn,[s("a",Qn,[n("不同路径"),t(a)])])]),s("li",Rn,[Un,s("label",Yn,[s("a",sa,[n("不同路径 II"),t(a)])])])]),na,s("ul",aa,[s("li",ta,[ea,s("label",oa,[s("a",la,[n("爬楼梯"),t(a)])])]),s("li",pa,[ca,s("label",ia,[s("a",ra,[n("跳跃游戏"),t(a)])])]),s("li",ua,[da,s("label",ka,[s("a",ma,[n("跳跃游戏 II"),t(a)])])]),s("li",ba,[ha,s("label",_a,[s("a",va,[n("分割回文串 II"),t(a)])])]),s("li",fa,[ga,s("label",ya,[s("a",wa,[n("最长递增子序列"),t(a)])])]),s("li",xa,[ja,s("label",Ia,[s("a",La,[n("单词拆分"),t(a)])])])]),Na,s("ul",qa,[s("li",za,[Ba,s("label",Ma,[s("a",Sa,[n("最长公共子序列"),t(a)])])]),s("li",Ca,[Oa,s("label",Da,[s("a",Ha,[n("编辑距离"),t(a)])])])]),Pa,s("ul",Ta,[s("li",Va,[Ea,s("label",Fa,[s("a",Wa,[n("零钱兑换"),t(a)])])]),s("li",Ja,[Ka,s("label",Xa,[s("a",Za,[n("背包问题"),t(a)])])]),s("li",$a,[Aa,s("label",Ga,[s("a",Qa,[n("背包问题（二）"),t(a)])])])]),Ra,s("ul",Ua,[s("li",Ya,[st,s("label",nt,[s("a",at,[n("子集"),t(a)])])]),s("li",tt,[et,s("label",ot,[s("a",lt,[n("子集 II"),t(a)])])]),s("li",pt,[ct,s("label",it,[s("a",rt,[n("全排列"),t(a)])])]),s("li",ut,[dt,s("label",kt,[s("a",mt,[n("全排列 II"),t(a)])])]),s("li",bt,[ht,s("label",_t,[s("a",vt,[n("组合总和"),t(a)])])]),s("li",ft,[gt,s("label",yt,[s("a",wt,[n("电话号码的字母组合"),t(a)])])]),s("li",xt,[jt,s("label",It,[s("a",Lt,[n("分割回文串"),t(a)])])]),s("li",Nt,[qt,s("label",zt,[s("a",Bt,[n("复原 IP 地址"),t(a)])])])]),Mt,s("ul",St,[s("li",Ct,[Ot,s("label",Dt,[s("a",Ht,[n("滑动窗口最大值"),t(a)])])]),s("li",Pt,[Tt,s("label",Vt,[s("a",Et,[n("无重复字符的最长子串"),t(a)])])]),s("li",Ft,[Wt,s("label",Jt,[s("a",Kt,[n("字母异位词"),t(a)])])])]),Xt,s("ul",Zt,[s("li",$t,[At,s("label",Gt,[s("a",Qt,[n("2的幂"),t(a)])])]),s("li",Rt,[Ut,s("label",Yt,[s("a",se,[n("返回二进制中1的个数"),t(a)])])]),s("li",ne,[ae,s("label",te,[s("a",ee,[n("只出现一次的数字"),t(a)])])]),s("li",oe,[le,s("label",pe,[s("a",ce,[n("只出现一次的数字Ⅱ"),t(a)])])]),s("li",ie,[re,s("label",ue,[s("a",de,[n("缺失数字"),t(a)])])])]),ke,s("ul",null,[s("li",null,[n("算法模板："),s("a",me,[n("https://greyireland.gitbook.io/algorithm-pattern/shu-ju-jie-gou-pian/binary_tree"),t(a)])]),s("li",null,[n("labuladong 的算法："),s("a",be,[n("https://labuladong.gitee.io/algo/"),t(a)])]),s("li",null,[n("代码随想录："),s("a",he,[n("https://github.com/youngyangyang04/leetcode-master"),t(a)])]),s("li",null,[n("小浩算法："),s("a",_e,[n("https://www.geekxh.com/"),t(a)])])]),ve])}const xe=o(i,[["render",fe],["__file","leetcode.html.vue"]]);export{xe as default};
