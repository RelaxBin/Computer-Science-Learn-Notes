const t=JSON.parse('{"key":"v-2f47e328","path":"/Java/eightpart/think.html","title":"操作系统","lang":"zh-CN","frontmatter":{"order":15,"author":"zhiyu1998","title":"操作系统","category":["八股文"],"description":"Java的native关键字 Java的native关键字用于表示一个方法的实现是由底层的本地代码（通常是C或C++）提供的，而不是Java代码实现的。因此，该方法的实现在编译时并不会被包含在生成的Java字节码中。 在使用native关键字声明一个方法时，该方法只包含方法签名，而没有方法体。例如： 这里的myMethod()方法只有方法签名，没有方法...","head":[["meta",{"property":"og:url","content":"https://zhiyu1998.github.io/Computer-Science-Learn-Notes/Computer-Science-Learn-Notes/Java/eightpart/think.html"}],["meta",{"property":"og:title","content":"操作系统"}],["meta",{"property":"og:description","content":"Java的native关键字 Java的native关键字用于表示一个方法的实现是由底层的本地代码（通常是C或C++）提供的，而不是Java代码实现的。因此，该方法的实现在编译时并不会被包含在生成的Java字节码中。 在使用native关键字声明一个方法时，该方法只包含方法签名，而没有方法体。例如： 这里的myMethod()方法只有方法签名，没有方法..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-06T15:04:01.000Z"}],["meta",{"property":"article:author","content":"zhiyu1998"}],["meta",{"property":"article:modified_time","content":"2023-04-06T15:04:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"操作系统\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-06T15:04:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zhiyu1998\\"}]}"]]},"headers":[{"level":2,"title":"Java的native关键字","slug":"java的native关键字","link":"#java的native关键字","children":[{"level":3,"title":"native里面的代码也是Java写吗还是C","slug":"native里面的代码也是java写吗还是c","link":"#native里面的代码也是java写吗还是c","children":[]},{"level":3,"title":"例子Java_MyClass_myMethod我能理解为在MyClass类内的myMethod方法吗，前面的Java是必须的吗？","slug":"例子java-myclass-mymethod我能理解为在myclass类内的mymethod方法吗-前面的java是必须的吗","link":"#例子java-myclass-mymethod我能理解为在myclass类内的mymethod方法吗-前面的java是必须的吗","children":[]}]},{"level":2,"title":"Java11特性","slug":"java11特性","link":"#java11特性","children":[{"level":3,"title":"例子","slug":"例子","link":"#例子","children":[]}]},{"level":2,"title":"Java17","slug":"java17","link":"#java17","children":[{"level":3,"title":"例子","slug":"例子-1","link":"#例子-1","children":[]}]},{"level":2,"title":"关于泛型的一些理解","slug":"关于泛型的一些理解","link":"#关于泛型的一些理解","children":[{"level":3,"title":"解释下这三个T分别代表什么意思？","slug":"解释下这三个t分别代表什么意思","link":"#解释下这三个t分别代表什么意思","children":[]},{"level":3,"title":"进一步思考：如果没有<T>可以吗？","slug":"进一步思考-如果没有-t-可以吗","link":"#进一步思考-如果没有-t-可以吗","children":[]},{"level":3,"title":"<T>就是接收参数的类型吗","slug":"t-就是接收参数的类型吗","link":"#t-就是接收参数的类型吗","children":[]},{"level":3,"title":"方法中的static <T>中的<T>，与Class<T> clazz中的<T>是同一个意思吗","slug":"方法中的static-t-中的-t-与class-t-clazz中的-t-是同一个意思吗","link":"#方法中的static-t-中的-t-与class-t-clazz中的-t-是同一个意思吗","children":[]},{"level":3,"title":"为什么不能写成static T <T>","slug":"为什么不能写成static-t-t","link":"#为什么不能写成static-t-t","children":[]},{"level":3,"title":"static <T>中T声明了T的泛型类型参数，Class<T>才能接收一个为T类型的clazz吗","slug":"static-t-中t声明了t的泛型类型参数-class-t-才能接收一个为t类型的clazz吗","link":"#static-t-中t声明了t的泛型类型参数-class-t-才能接收一个为t类型的clazz吗","children":[]}]}],"git":{"createdTime":1680621124000,"updatedTime":1680793441000,"contributors":[{"name":"RrOrange","email":"542716863@qq.com","commits":5}]},"readingTime":{"minutes":14.45,"words":4335},"filePathRelative":"Java/eightpart/think.md","localizedDate":"2023年4月4日","autoDesc":true,"excerpt":""}');export{t as data};
